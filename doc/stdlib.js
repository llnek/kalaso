/*Auto generated by Kirby v1.0.0 - Tue Jan 23 2018 23:05:30 GMT-0800 (PST)
  czlab.kirby.stdlib
{"doc":"Kirby's standard core library.","author":"Kenneth Leung"}
*/

const __module_namespace__ = "czlab.kirby.stdlib";
const MODULE_NAMESPACE = "__module_namespace__";
////////////////////////////////////////////////////////////////////////////////
//fn: [println] in file: stdlib.ky, line: 567
const println = function() {
  let msgs = Array.prototype.slice.call(arguments, 0);
  return (console ?
    console.log(msgs.join("")) :
    null);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [not-empty] in file: stdlib.ky, line: 571
//If coll is empty, returns nil, else coll
const not_DASH_empty = function(coll) {
  return ((0 === count(coll)) ?
    null :
    coll);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [noCRef] in file: stdlib.ky, line: 579
//Use a cache to store already referenced objects
//to prevent circular references
const noCRef = function() {
  let cache = [];
  return function(k, v) {
    if (( (typeof (v) === "function") )) {
      (
      v = "native-fn");
    } else {
      if (object_QMRK(v)) {
        if (contains_QMRK(cache, v)) {
          (
          v = undefined);
        } else {
          conj_BANG(cache, v);
        }
      } else {
        null;
      }
    }
    return v;
  };
};
////////////////////////////////////////////////////////////////////////////////
//fn: [stringify] in file: stdlib.ky, line: 592
//JSON stringify (no cyclical obj-ref)
const stringify = function(obj) {
  return (obj ?
    JSON.stringify(obj, noCRef()) :
    null);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [opt??] in file: stdlib.ky, line: 600
//If cur is not defined, returns other else cur
const opt_QMRK__QMRK = function(cur, other) {
  return (((typeof (cur) !== "undefined")) ?
    cur :
    other);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [conj!] in file: stdlib.ky, line: 608
//conj[oin]. Returns coll with the xs
//'added'. (conj! nil item) returns [item].
//If coll is a list, prepends else appends to coll.
const conj_BANG = function(coll) {
  let xs = Array.prototype.slice.call(arguments, 1);
  let c = (coll || []);
  if (list_QMRK(c)) {
    c.unshift.apply(c, xs.reverse());
  } else {
    c.push.apply(c, xs);
  }
  return c;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [conj] in file: stdlib.ky, line: 621
//Like conj! but
//returns a new collection
const conj = function(coll) {
  let xs = Array.prototype.slice.call(arguments, 1);
  let c = (vector_QMRK(coll) ?
    into("vector", coll) :
    (list_QMRK(coll) ?
      into("list", coll) :
      (map_QMRK(coll) ?
        into("map", coll) :
        (nichts_QMRK(coll) ?
          [] :
          (true ?
            Array.prototype.slice.call(coll) :
            null)))));
  return conj_BANG.apply(this, [c].concat(xs));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [pop!] in file: stdlib.ky, line: 637
//Removes the first element if list,
//else removes the last element,
//returning the element
//and the altered collection
const pop_BANG = function(coll) {
  let r = (list_QMRK(coll) ?
    coll.shift() :
    coll.pop());
  return [r, coll];
};
////////////////////////////////////////////////////////////////////////////////
//fn: [pop] in file: stdlib.ky, line: 649
//Like pop! but returns a new collection
const pop = function(coll) {
  let r = (list_QMRK(coll) ?
    getProp(coll, 0) :
    last(coll));
  return [r, (list_QMRK(coll) ?
    coll.slice(1) :
    coll.slice(0, -1))];
};
////////////////////////////////////////////////////////////////////////////////
//fn: [wrap-str] in file: stdlib.ky, line: 657
//Prepend and append
//strings to the object.
const wrap_DASH_str = function(obj, start, end) {
  return [start, obj, end].join("");
};
////////////////////////////////////////////////////////////////////////////////
//fn: [getProp] in file: stdlib.ky, line: 662
//If prop is a string, returns the value of
//this object property, obeying the own? flag.
//Otherwise, return the value at the index of
//the array
const getProp = function(obj, prop) {
  let GS__1 = Array.prototype.slice.call(arguments, 2);
  let own_QMRK = GS__1[0];
  (
  own_QMRK = opt_QMRK__QMRK(own_QMRK, true));
  return ((((typeof (prop) === "string")) || ((typeof (prop) === "number"))) ?
    ((own_QMRK && ((typeof (prop) === "string")) && (!obj.hasOwnProperty(prop))) ?
      undefined :
      obj[prop]) :
    undefined);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [prn] in file: stdlib.ky, line: 682
//Print data as string - use to dump an AST node
const prn = function(obj) {
  let GS__2 = Array.prototype.slice.call(arguments, 1);
  let r_QMRK = GS__2[0];
  let f = noCRef();
  if (complex_QMRK(obj)) {
    (
    obj = f(null, obj));
  }
  return (obj ?
    prn_STAR(obj, r_QMRK, f) :
    "");
};
////////////////////////////////////////////////////////////////////////////////
//fn: [prnArr*] in file: stdlib.ky, line: 693
//Print an array
const prnArr_STAR = function(obj, r_QMRK, f) {
  return obj.map(function(v, i) {
    let x = f(i, v);
    return prn_STAR(opt_QMRK__QMRK(x, null), r_QMRK, f);
  }).join(" ");
};
////////////////////////////////////////////////////////////////////////////////
//fn: [prn*] in file: stdlib.ky, line: 701
const prn_STAR = function(obj, r_QMRK, func) {
  let pfx = function() {
    let ____args = Array.prototype.slice.call(arguments);
    return prn_STAR(____args[0], r_QMRK, func);
  };
  let parr = ((Array.isArray(obj)) ?
    function() {
      let ____args = Array.prototype.slice.call(arguments);
      return wrap_DASH_str(prnArr_STAR(obj, r_QMRK, func), ____args[0], ____args[1]);
    } :
    null);
  return (function() {
    let C__3;
    switch (typeid(obj)) {
      case "atom":
        C__3 = wrap_DASH_str(func(null, obj.value), "(atom ", ")");
        break;
      case "lambda-arg":
        C__3 = obj.value;
        break;
      case "regex-obj":
        C__3 = obj.value;
        break;
      case "keyword":
        C__3 = obj.value;
        break;
      case "symbol":
        C__3 = obj.value;
        break;
      case "object":
        C__3 = wrap_DASH_str(seq(obj).reduce(function(acc, GS__4) {
          let k = GS__4[0];
          let v = GS__4[1];
          let x = func(k, v);
          if ( (!((typeof (x) === "undefined"))) ) {
            conj_BANG(acc, [pfx(k), ":", pfx(x)].join(""));
          } else {
            null;
          }
          return acc;
        }, []).join(","), "{", "}");
        break;
      case "vector":
        C__3 = parr("[", "]");
        break;
      case "map":
        C__3 = parr("{", "}");
        break;
      case "list":
        C__3 = parr("'(", ")");
        break;
      case "string":
        C__3 = (r_QMRK ?
          quote_DASH_str(obj) :
          obj);
        break;
      case "null":
      case "nil":
        C__3 = "null";
        break;
      default:
        C__3 = ((Array.isArray(obj)) ?
          parr("(", ")") :
          obj.toString());
        break;
    }
    return C__3;
  }).call(this);
};
//Defining a lambda positional argument
class LambdaArg {
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [constructor] in file: stdlib.ky, line: 747
  constructor(arg) {
    (
    this["value"] = "");
    let name = ((arg === "%") ?
      "1" :
      arg.slice(1));
    let v = parseInt(name);
    if ( (!(v > 0)) ) {
      throw new Error(["invalid lambda-arg ", arg].join(""));
    } else {
      null;
    }
    (this.value = ["%", v].join(""));
    return this;
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [toString] in file: stdlib.ky, line: 754
  toString() {
    return this.value;
  }
}
//Defining a primitive data type
class Primitive {
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [constructor] in file: stdlib.ky, line: 759
  constructor(v) {
    (
    this["value"] = null);
    (
    this.value = v);
    return this;
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [toString] in file: stdlib.ky, line: 761
  toString() {
    return this.value;
  }
}
//Defining a Regex pattern
class RegexObj {
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [constructor] in file: stdlib.ky, line: 766
  constructor(v) {
    (
    this["value"] = null);
    (
    this.value = v);
    return this;
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [toString] in file: stdlib.ky, line: 768
  toString() {
    return this.value;
  }
}
//Defining a keyword
class Keyword {
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [constructor] in file: stdlib.ky, line: 773
  constructor(name) {
    (
    this["value"] = "");
    (
    this.value = name);
    return this;
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [toString] in file: stdlib.ky, line: 775
  toString() {
    return (this.value.startsWith("::") ?
      [peekNSP().id, "/", this.value.slice(2)].join("") :
      (this.value.startsWith(":") ?
        this.value.slice(1) :
        null));
  }
}
//Defining a symbol
class Symbol {
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [constructor] in file: stdlib.ky, line: 784
  constructor(name) {
    (
    this["value"] = "");
    (
    this.value = name);
    return this;
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [toString] in file: stdlib.ky, line: 786
  toString() {
    return this.value;
  }
}
////////////////////////////////////////////////////////////////////////////////
//fn: [primitive?] in file: stdlib.ky, line: 789
//Returns true if primitive
const primitive_QMRK = function(obj) {
  return (obj instanceof Primitive);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [primitive] in file: stdlib.ky, line: 793
//Create a Primitive
const primitive = function(v) {
  return new Primitive(v);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [regexObj?] in file: stdlib.ky, line: 797
//Returns true if a regex
const regexObj_QMRK = function(obj) {
  return (obj instanceof RegexObj);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [regexObj] in file: stdlib.ky, line: 801
//Create a new regex
const regexObj = function(name) {
  return new RegexObj(name);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [symbol?] in file: stdlib.ky, line: 805
//Returns true if a symbol
const symbol_QMRK = function(obj) {
  return (obj instanceof Symbol);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [symbol] in file: stdlib.ky, line: 809
//Create a new Symbol
const symbol = function(name) {
  return new Symbol(name);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [keyword?] in file: stdlib.ky, line: 813
//Returns true if a keyword
const keyword_QMRK = function(obj) {
  return (obj instanceof Keyword);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [keyword] in file: stdlib.ky, line: 817
//Create a new Keyword
const keyword = function(name) {
  return new Keyword(name);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [keyword->symbol] in file: stdlib.ky, line: 821
//Convert a Keyword to Symbol
const keyword_DASH__GT_symbol = function(k) {
  let s = new Symbol(k.value);
  (s["source"] = k.source, s["line"] = k.line, s["column"] = k.column);
  return s;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [lambdaArg?] in file: stdlib.ky, line: 830
//Returns true if a Lambda Arg
const lambdaArg_QMRK = function(obj) {
  return (obj instanceof LambdaArg);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [lambdaArg] in file: stdlib.ky, line: 834
//Create a new Lambda Arg
const lambdaArg = function(name) {
  return new LambdaArg(name);
};
//Defining a clojure-like Atom
class Atom {
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [constructor] in file: stdlib.ky, line: 840
  constructor(val) {
    (
    this["value"] = null);
    (
    this.value = val);
    return this;
  }
}
////////////////////////////////////////////////////////////////////////////////
//fn: [atom?] in file: stdlib.ky, line: 843
//Returns true if an Atom
const atom_QMRK = function(atm) {
  return (atm instanceof Atom);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [atom] in file: stdlib.ky, line: 847
//Create a new Atom
const atom = function(val) {
  return new Atom(val);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [reset!] in file: stdlib.ky, line: 851
//Set a new value to the Atom
const reset_BANG = function(a, v) {
  return (function() {
    let GS__5 = null;
    (a.value = v);
    return GS__5;
  }).call(this);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [resetVec!] in file: stdlib.ky, line: 855
const resetVec_BANG = function(v) {
  return (function() {
    let GS__6 = null;
    if ( (Array.isArray(v)) ) {
      v.splice(0);
    }
    return GS__6;
  }).call(this);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [resetObject!] in file: stdlib.ky, line: 859
const resetObject_BANG = function(obj) {
  return (function() {
    let GS__7 = null;
    if (object_QMRK(obj)) {
      Object.keys(obj).forEach(function() {
        let ____args = Array.prototype.slice.call(arguments);
        return delete obj[____args[0]];
      });
    }
    return GS__7;
  }).call(this);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [sort!] in file: stdlib.ky, line: 865
//Returns a sorted sequence of the items in coll.
//If no comparator is supplied, uses compare
const sort_BANG = function(comp, coll) {
  return (((typeof (comp) === "function")) ?
    coll.sort(comp) :
    comp.sort());
};
////////////////////////////////////////////////////////////////////////////////
//fn: [find] in file: stdlib.ky, line: 872
//Returns the value of the first element
//in the collection that satisfies the
//provided predicate function
const find = function(coll, pred) {
  let ret = null;
  let c = null;
  for (let i = 0, sz = count(coll), ____break = false; ((!____break) && (i < sz)); i = (i + 1)) {
    (
    c = coll[i]);
    if (pred(c)) {
      (
      ret = c);
      (
      ____break = true);
    }
  }
  return ret;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [deref] in file: stdlib.ky, line: 888
//Get value inside the Atom
const deref = function(a) {
  return a.value;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [swap!] in file: stdlib.ky, line: 892
//Change value inside the Atom,
//returning the new value
const swap_BANG = function(a, f) {
  let xs = Array.prototype.slice.call(arguments, 2);
  (
  a.value = f.apply(this, [a.value].concat(xs)));
  return getProp(a, "value");
};
////////////////////////////////////////////////////////////////////////////////
//fn: [typeid] in file: stdlib.ky, line: 900
//Returns the type-id
//of this object
const typeid = function(obj) {
  return (lambdaArg_QMRK(obj) ?
    "lambda-arg" :
    (keyword_QMRK(obj) ?
      "keyword" :
      (symbol_QMRK(obj) ?
        "symbol" :
        (vector_QMRK(obj) ?
          "vector" :
          (atom_QMRK(obj) ?
            "atom" :
            (list_QMRK(obj) ?
              "list" :
              (map_QMRK(obj) ?
                "map" :
                (((obj === null)) ?
                  "null" :
                  (((obj === true)) ?
                    "true" :
                    (((obj === false)) ?
                      "false" :
                      (((typeof (obj) === "function")) ?
                        "function" :
                        (((typeof (obj) === "string")) ?
                          "string" :
                          (((typeof (obj) === "number")) ?
                            "number" :
                            ((Array.isArray(obj)) ?
                              "array" :
                              (object_QMRK(obj) ?
                                "object" :
                                (true ?
                                  (function() {
                                    throw new Error(["Unknown type [", typeof (obj), "]"].join(""));
                                  }).call(this) :
                                  null))))))))))))))));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [complex?] in file: stdlib.ky, line: 923
//True if x is an array
//or js object.
const complex_QMRK = function(x) {
  return ((Array.isArray(x)) || object_QMRK(x));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [simple?] in file: stdlib.ky, line: 928
//True if x is a
//primitive value type
const simple_QMRK = function(obj) {
  return (((typeof (obj) === "undefined")) || ((obj === null)) || ((obj === false)) || ((obj === true)) || ((typeof (obj) === "string")) || ((typeof (obj) === "number")));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [value?] in file: stdlib.ky, line: 934
//Returns true
//if a simple LISP value
const value_QMRK = function(obj) {
  return (((obj === null)) || vector_QMRK(obj) || list_QMRK(obj) || map_QMRK(obj) || ((obj === false)) || ((obj === true)) || ((typeof (obj) === "string")) || ((typeof (obj) === "number")));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [sequential?] in file: stdlib.ky, line: 947
//True if coll
//implements Sequential
const sequential_QMRK = function(arr) {
  return ((Array.isArray(arr)) && (!map_QMRK(arr)));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [map2Obj] in file: stdlib.ky, line: 953
const map2Obj = function(m) {
  let ret = {};
  let k,
    v;
  for (let i = 0, sz = count(m), ____break = false; ((!____break) && (i < sz)); i = (i + 2)) {
    (k = m[i], v = m[i + 1]);
    (
    ret[[k].join("")] = v);
  }
  return ret;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [eq?] in file: stdlib.ky, line: 963
//True if both are equal
const eq_QMRK = function(a, b) {
  let k = null;
  let ok_QMRK = true;
  return ((map_QMRK(a) && map_QMRK(b) && (a.length === b.length)) ?
    eq_QMRK(map2Obj(a), map2Obj(b)) :
    (((Array.isArray(a)) && (Array.isArray(b)) && (a.length === b.length)) ?
      (function() {
        for (let i = 0, sz = a.length, ____break = false; ((!____break) && (ok_QMRK && (i < sz))); i = (i + 1)) {
          if ( (!eq_QMRK(a[i], b[i])) ) {
            (
            ok_QMRK = false);
          }
        }
        return ok_QMRK;
      }).call(this) :
      (((a instanceof LambdaArg) && (b instanceof LambdaArg)) ?
        (a.value === b.value) :
        (((a instanceof Symbol) && (b instanceof Symbol)) ?
          (a.value === b.value) :
          (((a instanceof Keyword) && (b instanceof Keyword)) ?
            (a.value === b.value) :
            ((object_QMRK(a) && object_QMRK(b) && (count(a) === count(b))) ?
              (function() {
                for (let i = 0, ks = Object.keys(a), sz = count(ks), ____break = false; ((!____break) && (ok_QMRK && (i < sz))); i = (i + 1)) {
                  (
                  k = ks[i]);
                  if ( (!eq_QMRK(getProp(a, k), getProp(b, k))) ) {
                    (
                    ok_QMRK = false);
                  }
                }
                return ok_QMRK;
              }).call(this) :
              (true ?
                (a === b) :
                null)))))));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [object?] in file: stdlib.ky, line: 996
//Returns true
//if a js object
const object_QMRK = function(obj) {
  return ((!(((obj === null)) || (Array.isArray(obj)))) ?
    (typeof (obj) === "object") :
    null);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [last] in file: stdlib.ky, line: 1002
//Returns the last element
const last = function(coll) {
  return (((Array.isArray(coll)) && (coll.length > 0)) ?
    getProp(coll, (coll.length - 1)) :
    null);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [into!] in file: stdlib.ky, line: 1008
//Assign a type to this collection
const into_BANG = function(type, coll) {
  let C__8;
  switch (type) {
    case "vector":
      C__8 = (coll["____vec"] = true);
      break;
    case "list":
      C__8 = (coll["____list"] = true);
      break;
    case "map":
      C__8 = (coll["____map"] = true);
      break;
  }
  return coll;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [into] in file: stdlib.ky, line: 1019
//Like into! but
//returning a new collection
const into = function(type, coll) {
  return into_BANG(type, coll.slice(0));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [pairs?] in file: stdlib.ky, line: 1025
//Returns true if
//a LISP list, not data
const pairs_QMRK = function(obj) {
  return ((Array.isArray(obj)) && (!vector_QMRK(obj)) && (!map_QMRK(obj)) && (!list_QMRK(obj)));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [list?] in file: stdlib.ky, line: 1031
//Returns true if a List
const list_QMRK = function(obj) {
  return ((Array.isArray(obj)) && obj.____list);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [list] in file: stdlib.ky, line: 1035
//Create a List
const list = function() {
  let xs = Array.prototype.slice.call(arguments, 0);
  (
  xs["____list"] = true);
  return xs;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [vector?] in file: stdlib.ky, line: 1039
//Returns true if a Vector
const vector_QMRK = function(obj) {
  return ((Array.isArray(obj)) && obj.____vec);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [vector] in file: stdlib.ky, line: 1043
//Create a Vector
const vector = function() {
  let xs = Array.prototype.slice.call(arguments, 0);
  (
  xs["____vec"] = true);
  return xs;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [map?] in file: stdlib.ky, line: 1047
//Returns true if a Hashmap
const map_QMRK = function(obj) {
  return ((Array.isArray(obj)) && obj.____map);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [arraymap] in file: stdlib.ky, line: 1051
//Create a new array map
const arraymap = function() {
  let xs = Array.prototype.slice.call(arguments, 0);
  if (( (!((0 === modulo(xs.length, 2)))) )) {
    throw new Error("Invalid arity for arraymap");
  }
  (xs["____map"] = true);
  return xs;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [object] in file: stdlib.ky, line: 1058
//Create a new js object
const object = function() {
  let xs = Array.prototype.slice.call(arguments, 0);
  if (( (!((0 === modulo(xs.length, 2)))) )) {
    throw new Error("Invalid arity for object");
  }
  return zipmap(evens(xs), odds(xs));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [seq] in file: stdlib.ky, line: 1065
//Returns a sequence
const seq = function(obj) {
  return (((typeof (obj) === "string")) ?
    obj.split("") :
    ((Array.isArray(obj)) ?
      obj.slice(0) :
      (object_QMRK(obj) ?
        Object.entries(obj) :
        null)));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [contains?] in file: stdlib.ky, line: 1073
//True if item is inside
const contains_QMRK = function(coll, x) {
  return (((Array.isArray(coll)) || ((typeof (coll) === "string"))) ?
    coll.includes(x) :
    (object_QMRK(coll) ?
      coll.hasOwnProperty(x) :
      (true ?
        false :
        null)));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [nichts?] in file: stdlib.ky, line: 1080
//True if object is
//either null of undefined
const nichts_QMRK = function(obj) {
  return (((typeof (obj) === "undefined")) || ((obj === null)));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [some?] in file: stdlib.ky, line: 1084
//True if object is
//defined and not null
const some_QMRK = function(obj) {
  return (!nichts_QMRK(obj));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [count] in file: stdlib.ky, line: 1088
//Count the number of elements inside
const count = function(coll) {
  return (coll ?
    ((((typeof (coll) === "string")) || (Array.isArray(coll))) ?
      coll :
      Object.keys(coll)).length :
    0);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [concat*] in file: stdlib.ky, line: 1095
//Add many to this collection
const concat_STAR = function(coll) {
  let xs = Array.prototype.slice.call(arguments, 1);
  return (coll ?
    coll.concat.apply(coll, xs) :
    null);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [every] in file: stdlib.ky, line: 1100
const every = function(coll, start, step) {
  let ret = [];
  for (let i = start, sz = count(coll), ____break = false; ((!____break) && (i < sz)); i = (i + step)) {
    conj_BANG(ret, coll[i]);
  }
  return ret;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [evens] in file: stdlib.ky, line: 1106
//Collect every
//2nd item starting at 0
const evens = function(coll) {
  return every(coll, 0, 2);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [odds] in file: stdlib.ky, line: 1110
//Collect every
//2nd item starting at 1
const odds = function(coll) {
  return every(coll, 1, 2);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [modulo] in file: stdlib.ky, line: 1114
//Modulo
const modulo = function(x, N) {
  return ((x < 0) ?
    (x - (-1 * (N + (Math.floor(((-1 * x) / N)) * N)))) :
    (x % N));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [partition] in file: stdlib.ky, line: 1122
//Returns a sequence of lists of n items each.
const partition = function(n, coll) {
  return (function() {
    let _x_ = null;
    let recur = null;
    let _f_ = function(ret, GS__9) {
      let x = GS__9[0];
      let y = GS__9[1];
      if (not_DASH_empty(x)) {
        conj_BANG(ret, x);
      }
      return ((0 === count(y)) ?
        ret :
        recur(ret, split_DASH_seq(y, n)));
    };
    let _r_ = _f_;
    (recur = function() {
      (
      _x_ = arguments);
      if (_r_) {
        for (_r_ = undefined; _r_ === undefined;) {
          _r_ = _f_.apply(this, _x_);
        }
        return _r_;
      }
      return undefined;
    });
    return recur([], split_DASH_seq(coll, n));
  })(this);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [split-str] in file: stdlib.ky, line: 1135
//Returns a sequence of strings of n characters each.
const split_DASH_str = function(n, string) {
  let ret = [];
  for (let i = 0, sz = count(string), ____break = false; ((!____break) && (i < sz));) {
    conj_BANG(ret, string.substr(i, n));
    (
    i = (i + n));
  }
  return ret;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [interleave] in file: stdlib.ky, line: 1146
//Returns a seq of the first item
//in each coll, then the second, etc
const interleave = function(c1, c2) {
  let cz = ((c2.length < c1.length) ?
    c2.length :
    c1.length);
  let ret = [];
  for (let i = 0, ____break = false; ((!____break) && (i < cz)); i = (i + 1)) {
    conj_BANG(ret, c1[i], c2[i]);
  }
  return ret;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [zipmap] in file: stdlib.ky, line: 1157
//Returns an object with the
//keys mapped to the corresponding vals
const zipmap = function(keys, vals) {
  let cz = ((keys.length < vals.length) ?
    keys.length :
    vals.length);
  let ret = {};
  for (let i = 0, ____break = false; ((!____break) && (i < cz)); i = (i + 1)) {
    (
    ret[[keys[i]].join("")] = vals[i]);
  }
  return ret;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [extendAttr] in file: stdlib.ky, line: 1169
const extendAttr = function(obj, attr) {
  let GS__10 = Array.prototype.slice.call(arguments, 2);
  let flags = GS__10[0];
  (
  flags = opt_QMRK__QMRK(flags, {
    "enumerable": false,
    "writable": true
  }));
  Object.defineProperty(obj, attr, flags);
  return obj;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [cons] in file: stdlib.ky, line: 1175
//Returns a new seq where x is the first element and seq is
//the rest.
const cons = function(x, coll) {
  return [x].concat(coll);
};
const gensym_DASH_counter = atom(0);
////////////////////////////////////////////////////////////////////////////////
//fn: [gensym] in file: stdlib.ky, line: 1183
//Generates next random symbol
const gensym = function() {
  let GS__11 = Array.prototype.slice.call(arguments, 0);
  let pfx = GS__11[0];
  return symbol([opt_QMRK__QMRK(pfx, "GS__"), swap_BANG(gensym_DASH_counter, function(x) {
    return (x + 1);
  })].join(""));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [carve] in file: stdlib.ky, line: 1190
const carve = function(coll) {
  let GS__12 = Array.prototype.slice.call(arguments, 1);
  let start = GS__12[0];
  let end = GS__12[1];
  return (((typeof (end) !== "undefined")) ?
    Array.prototype.slice.call(coll, start, end) :
    (((typeof (start) !== "undefined")) ?
      Array.prototype.slice.call(coll, start) :
      Array.prototype.slice.call(coll)));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [assoc!] in file: stdlib.ky, line: 1198
const assoc_BANG = function(mmap) {
  let xs = Array.prototype.slice.call(arguments, 1);
  if (mmap) {
    for (let i = 0, sz = count(xs), ____break = false; ((!____break) && (i < sz)); i = (i + 2)) {
      (
      mmap[xs[i]] = xs[i + 1]);
    }
  }
  return mmap;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [dissoc!] in file: stdlib.ky, line: 1207
const dissoc_BANG = function(mmap) {
  let xs = Array.prototype.slice.call(arguments, 1);
  if (mmap) {
    let GS__13 = xs;
    for (let GS__15 = 0, GS__14 = false, ____break = false; ((!____break) && ((!GS__14) && (GS__15 < GS__13.length))); GS__15 = (GS__15 + 1)) {
      let n = getProp(GS__13, GS__15);
      null;
      if ( (!true) ) {
        (
        GS__14 = true);
      } else {
        null;
      }
      if ( ((!GS__14) && true) ) {
        delete mmap[n];
      }
    }
    null;
  }
  return mmap;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [truthy?] in file: stdlib.ky, line: 1213
//LISP truthy
const truthy_QMRK = function(a) {
  return (!falsy_QMRK(a));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [falsy?] in file: stdlib.ky, line: 1216
//LISP falsy
const falsy_QMRK = function(a) {
  return (((a === null)) || ((a === false)));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [flatten] in file: stdlib.ky, line: 1219
//Flatten an array
const flatten = function(xs) {
  return xs.reduce(function(acc, v) {
    return acc.concat(v);
  }, []);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [identity] in file: stdlib.ky, line: 1224
//Returns its argument.
const identity = function(x) {
  return x;
};
const m_DASH_identity = (function() {
  let bind,
    unit,
    zero,
    plus;
  return (function() {
    let bind = function(mv, mf) {
      return mf(mv);
    };
    let unit = function() {
      let ____args = Array.prototype.slice.call(arguments);
      return ____args[0];
    };
    return {
      "bind": bind,
      "unit": unit,
      "zero": zero,
      "plus": plus
    };
  }).call(this);
}).call(this);
const m_DASH_maybe = (function() {
  let bind,
    unit,
    zero,
    plus;
  return (function() {
    let bind = function(mv, mf) {
      return ((!((mv === null))) ?
        mf(mv) :
        null);
    };
    let unit = function() {
      let ____args = Array.prototype.slice.call(arguments);
      return ____args[0];
    };
    let zero = null;
    return {
      "bind": bind,
      "unit": unit,
      "zero": zero,
      "plus": plus
    };
  }).call(this);
}).call(this);
const m_DASH_list = (function() {
  let bind,
    unit,
    zero,
    plus;
  return (function() {
    let bind = function(mv, mf) {
      return flatten(mv.map(mf));
    };
    let unit = function() {
      let ____args = Array.prototype.slice.call(arguments);
      return [].concat(____args[0]);
    };
    let zero = [];
    let plus = function() {
      let ____args = Array.prototype.slice.call(arguments);
      return flatten(____args);
    };
    return {
      "bind": bind,
      "unit": unit,
      "zero": zero,
      "plus": plus
    };
  }).call(this);
}).call(this);
const m_DASH_state = (function() {
  let bind,
    unit,
    zero,
    plus;
  return (function() {
    let bind = function(mv, mf) {
      return function(state) {
        return (function() {
          let GS__16 = mv(state);
          let value = GS__16[0];
          let newState = GS__16[1];
          return mf(value)(newState);
        }).call(this);
      };
    };
    let unit = function(v) {
      return function() {
        let ____args = Array.prototype.slice.call(arguments);
        return [v, ____args[0]];
      };
    };
    return {
      "bind": bind,
      "unit": unit,
      "zero": zero,
      "plus": plus
    };
  }).call(this);
}).call(this);
const m_DASH_continuation = (function() {
  let bind,
    unit,
    zero,
    plus;
  return (function() {
    let bind = function(mv, mf) {
      return function(cont) {
        return mv(function(value) {
          return mf(value)(cont);
        });
      };
    };
    let unit = function(value) {
      return function(cont) {
        return cont(value);
      };
    };
    return {
      "bind": bind,
      "unit": unit,
      "zero": zero,
      "plus": plus
    };
  }).call(this);
}).call(this);
////////////////////////////////////////////////////////////////////////////////
//fn: [run-cont] in file: stdlib.ky, line: 1285
//Execute the computation cont
//in the cont monad and return its result.
const run_DASH_cont = function(cont) {
  return cont(identity);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [quote-str] in file: stdlib.ky, line: 1292
//Add quotes around a string
const quote_DASH_str = function(s) {
  let out = "\"";
  for (let i = 0, ch = "", sz = count(s), ____break = false; ((!____break) && (i < sz)); i = (i + 1)) {
    (
    ch = s.charAt(i));
    if ( (ch === "\"") ) {
      (
      out += "\\\"");
    } else {
      if ( (ch === "\n") ) {
        (
        out += "\\n");
      } else {
        if ( (ch === "\t") ) {
          (
          out += "\\t");
        } else {
          if ( (ch === "\f") ) {
            (
            out += "\\f");
          } else {
            if ( (ch === "\r") ) {
              (
              out += "\\r");
            } else {
              if ( (ch === "\v") ) {
                (
                out += "\\v");
              } else {
                if ( (ch === "\\") ) {
                  (
                  out += (("u" === s.charAt((i + 1))) ?
                    ch :
                    "\\\\"));
                } else {
                  if (true) {
                    (
                    out += ch);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return (out += "\"");
};
////////////////////////////////////////////////////////////////////////////////
//fn: [unquote-str] in file: stdlib.ky, line: 1309
//Removes quotes around a string
const unquote_DASH_str = function(s) {
  return ((s.startsWith("\"") && s.endsWith("\"")) ?
    (function() {
      let out = "";
      (s = s.slice(1, -1));
      for (let i = 0, nx = "", ch = "", sz = count(s), ____break = false; ((!____break) && (i < sz)); i = (i + 1)) {
        (
        ch = s.charAt(i));
        if ( (ch === "\\") ) {
          ++i;
          (
          nx = s.charAt(i));
          if ( (nx === "\"") ) {
            (
            out += "\"");
          } else {
            if ( (nx === "\\") ) {
              (
              out += "\\");
            } else {
              if ( (nx === "n") ) {
                (
                out += "\n");
              } else {
                if ( (nx === "t") ) {
                  (
                  out += "\t");
                } else {
                  if ( (nx === "f") ) {
                    (
                    out += "\f");
                  } else {
                    if ( (nx === "v") ) {
                      (
                      out += "\v");
                    } else {
                      if ( (nx === "r") ) {
                        (
                        out += "\r");
                      } else {
                        if (true) {
                          (
                          out += ch);
                          --i;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        } else {
          (
          out += ch);
        }
      }
      return out;
    }).call(this) :
    s);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [escXml] in file: stdlib.ky, line: 1333
//Escape XML special chars
const escXml = function(s) {
  let out = "";
  for (let i = 0, c = null, sz = count(s), ____break = false; ((!____break) && (i < sz)); i = (i + 1)) {
    (
    c = s[i]);
    if ( (c === "&") ) {
      (
      c = "&amp;");
    } else {
      if ( (c === ">") ) {
        (
        c = "&gt;");
      } else {
        if ( (c === "<") ) {
          (
          c = "&lt;");
        } else {
          if ( (c === "\"") ) {
            (
            c = "&quot;");
          } else {
            if ( (c === "'") ) {
              (
              c = "&apos;");
            } else {
              null;
            }
          }
        }
      }
    }
    (out += c);
  }
  return out;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [split-seq] in file: stdlib.ky, line: 1348
//Split a collection into 2 parts
const split_DASH_seq = function(coll, cnt) {
  return ((cnt < count(coll)) ?
    [Array.prototype.slice.call(coll, 0, cnt), Array.prototype.slice.call(coll, cnt)] :
    [Array.prototype.slice.call(coll, 0), []]);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [select-keys] in file: stdlib.ky, line: 1354
//Get a subset of keys
const select_DASH_keys = function(coll, keys) {
  return seq(keys).reduce(function(acc, n) {
    (
    acc[[n].join("")] = getProp(coll, [n].join("")));
    return acc;
  }, {});
};
////////////////////////////////////////////////////////////////////////////////
//fn: [doUpdateIn!] in file: stdlib.ky, line: 1362
const doUpdateIn_BANG = function(coll, n, func, args, err) {
  let cur = (((typeof (n) === "number")) ?
    (((Array.isArray(coll)) && (n < coll.length)) ?
      getProp(coll, n) :
      err(n)) :
    (true ?
      getProp(coll, n) :
      null));
  let v = func.apply(this, cons(cur, args));
  return (coll[n] = v);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [update-in!] in file: stdlib.ky, line: 1372
//'Updates' a value in a nested associative structure, where ks is a
//sequence of keys and f is a function that will take the old value
//and any supplied args and return the new value, and returns a new
//nested structure.  If any levels do not exist, hash-maps will be
//created.
const update_DASH_in_BANG = function(coll, keys, func) {
  let xs = Array.prototype.slice.call(arguments, 3);
  let err = function() {
    let ____args = Array.prototype.slice.call(arguments);
    return (function() {
      throw new Error(["update-in! failed, bad nested keys: ", ____args[0]].join(""));
    }).call(this);
  };
  let root = coll;
  let end = (keys.length - 1);
  let m,
    n;
  for (let i = 0, ____break = false; ((!____break) && (i <= end)); i = (i + 1)) {
    (
    n = keys[i]);
    if ( (i === end) ) {
      doUpdateIn_BANG(root, n, func, xs, err);
    } else {
      if (( (typeof (n) === "number") )) {
        if ( (!((Array.isArray(root)) && (n < root.length))) ) {
          err(n);
        } else {
          (
          root = getProp(root, n));
        }
      } else {
        if (true) {
          (
          m = getProp(root, n));
          if (( (typeof (m) === "undefined") )) {
            (
            m = {});
            (
            root[n] = m);
          }
          if ( (!object_QMRK(m)) ) {
            err(n);
          } else {
            null;
          }
          (root = m);
        }
      }
    }
  }
  return coll;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [get-in] in file: stdlib.ky, line: 1404
//Returns the value in a nested associative structure,
//where ks is a sequence of keys. Returns nil if the key
//is not present, or the not-found value if supplied.
const get_DASH_in = function(coll, keys) {
  let root = coll;
  let ret = null;
  let end = (keys.length - 1);
  let m,
    n;
  for (let i = 0, ____break = false; ((!____break) && (i <= end)); i = (i + 1)) {
    (
    n = keys[i]);
    if (( (typeof (n) === "number") )) {
      if ( (!((Array.isArray(root)) && (n < root.length))) ) {
        (
        ret = null);
        console.log("sdfdsgfdsgdsgd");
        (
        ____break = true);
      } else {
        (root = getProp(root, n), ret = root);
      }
    } else {
      if (true) {
        (root = getProp(root, n), ret = root);
      }
    }
  }
  return ret;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [merge!] in file: stdlib.ky, line: 1430
const merge_BANG = function(base, m) {
  let ret = (base || {});
  let src = (m || {});
  let GS__17 = src;
  Object.entries(GS__17).forEach(function(e) {
    return (function(v, k) {
      return (ret[k] = v);
    })(getProp(e, 1), getProp(e, 0));
  });
  return ret;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [merge] in file: stdlib.ky, line: 1437
//Returns a map that consists of the rest of the maps conj-ed onto
//the first.  If a key occurs in more than one map, the mapping from
//the latter (left-to-right) will be the mapping in the result.
const merge = function() {
  let maps = Array.prototype.slice.call(arguments, 0);
  return maps.reduce(function(acc, n) {
    return merge_BANG(acc, n);
  }, {});
};
////////////////////////////////////////////////////////////////////////////////
//fn: [difference] in file: stdlib.ky, line: 1446
//Return a set that is the first set
//without elements of the other set.
const difference = function(a, b) {
  let ret = [];
  let z = null;
  for (let i = 0, sz = count(a), ____break = false; ((!____break) && (i < sz)); i = (i + 1)) {
    (
    z = a[i]);
    if ( (!contains_QMRK(b, z)) ) {
      conj_BANG(ret, z);
    } else {
      null;
    }
  }
  return ret;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [percent] in file: stdlib.ky, line: 1459
const percent = function(numerator, denominator) {
  return (100 * (numerator / denominator));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [toFixed] in file: stdlib.ky, line: 1463
const toFixed = function(num, digits) {
  (
  digits = opt_QMRK__QMRK(digits, 2));
  return Number(num).toFixed(digits);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [ensureTest] in file: stdlib.ky, line: 1472
const ensureTest = function(cnd, msg) {
  (
  msg = (msg || "test"));
  return (function() {
    try {
      return [(cnd ?
        "passed:" :
        "FAILED:"), " ", msg].join("");
    } catch (e) {
      return ["FAILED: ", msg].join("");
    }
  }).call(this);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [ensureTestThrown] in file: stdlib.ky, line: 1478
const ensureTestThrown = function(expected, error, msg) {
  return (((error === null)) ?
    ["FAILED: ", msg].join("") :
    (((expected === typeof (error)) || (expected === "any")) ?
      ["passed: ", msg].join("") :
      ["FAILED: ", msg].join("")));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [runtest] in file: stdlib.ky, line: 1487
const runtest = function(test) {
  let GS__18 = Array.prototype.slice.call(arguments, 1);
  let title = GS__18[0];
  (
  title = opt_QMRK__QMRK(title, "test"));
  let now = new Date();
  let results = test();
  let sum = count(results);
  let ok = count(results.filter(function() {
    let ____args = Array.prototype.slice.call(arguments);
    return ____args[0].startsWith("p");
  }));
  let ps = toFixed(percent(ok, sum));
  return ["+".repeat(78), title, now, "+".repeat(78), results.join("\n"), "=".repeat(78), ["Passed: ", ok, "/", sum, " [", ps, "%]"].join(""), ["Failed: ", (sum - ok)].join(""), ["CPU Time: ", (new Date() - now), "ms"].join("")].join("\n");
};
const _STAR_ns_DASH_cache_STAR = atom([{
  "id": "user",
  "meta": null
}]);
////////////////////////////////////////////////////////////////////////////////
//fn: [pushNSP] in file: stdlib.ky, line: 1508
const pushNSP = function(nsp) {
  let GS__19 = Array.prototype.slice.call(arguments, 1);
  let info = GS__19[0];
  let obj = {
    "id": nsp,
    "meta": info
  };
  return swap_BANG(_STAR_ns_DASH_cache_STAR, function(a) {
    a.unshift(obj);
    return a;
  });
};
////////////////////////////////////////////////////////////////////////////////
//fn: [popNSP] in file: stdlib.ky, line: 1514
const popNSP = function() {
  return swap_BANG(_STAR_ns_DASH_cache_STAR, function(a) {
    a.shift();
    return a;
  });
};
////////////////////////////////////////////////////////////////////////////////
//fn: [peekNSP] in file: stdlib.ky, line: 1519
const peekNSP = function() {
  return getProp(_STAR_ns_DASH_cache_STAR.value, 0);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [*ns*] in file: stdlib.ky, line: 1522
const _STAR_ns_STAR = function() {
  return (function() {
    let GS__20 = peekNSP();
    let n = GS__20;
    return ((((typeof (GS__20) === "undefined")) || ((GS__20 === null))) ?
      null :
      n.id);
  }).call(this);
};
const ____macros = {
  "empty?": "(macro* empty? (coll) (syntax-quote (= 0 (kirbystdlibref/count (unquote coll)))))",
  "starts?": "(macro* starts? (s arg) (syntax-quote (.startsWith (unquote s) (unquote arg))))",
  "ends?": "(macro* ends? (s arg) (syntax-quote (.endsWith (unquote s) (unquote arg))))",
  "n#": "(macro* n# (coll) (syntax-quote (kirbystdlibref/count (unquote coll))))",
  "1st": "(macro* 1st (x) (syntax-quote (first (unquote x))))",
  "2nd": "(macro* 2nd (x) (syntax-quote (second (unquote x))))",
  "3rd": "(macro* 3rd (x) (syntax-quote (nth (unquote x) 2)))",
  "trap!": "(macro* trap! (& msgs) (let* [sz (count* msgs)] (if* (> sz 1) (syntax-quote (throw (join \"\" (vec (splice-unquote msgs))))) (if* (> sz 0) (syntax-quote (throw (unquote (nth* msgs 0)))) (syntax-quote (throw \"error!\"))))))",
  "merror": "(macro* merror (e) (syntax-quote (new Error (unquote e))))",
  "raise!": "(macro* raise! (& msgs) (let* [sz (count* msgs)] (if* (> sz 1) (syntax-quote (throw (merror (join \"\" (vec (splice-unquote msgs)))))) (if* (> sz 0) (syntax-quote (throw (merror (unquote (nth* msgs 0))))) (syntax-quote (throw (merror \"error!\")))))))",
  "slice": "(macro* slice (arr start end) (if* end (syntax-quote (Array.prototype.slice.call (unquote arr) (unquote start) (unquote end))) (if* start (syntax-quote (Array.prototype.slice.call (unquote arr) (unquote start))) (syntax-quote (Array.prototype.slice.call (unquote arr))))))",
  "numStr": "(macro* numStr (n) (syntax-quote (.toString (Number (unquote n)))))",
  "float": "(macro* float (x) (syntax-quote (parseFloat (unquote x))))",
  "int": "(macro* int (x) (syntax-quote (parseInt (unquote x))))",
  "delay": "(macro* delay (f t) (syntax-quote (setTimeout (unquote f) (unquote t))))",
  "break-out-of-loop!": "(macro* break-out-of-loop! () (syntax-quote (set! ____break true)))",
  "undef!": "(macro* undef! (x) (syntax-quote (set! (unquote x) undefined)))",
  "nil!": "(macro* nil! (x) (syntax-quote (set! (unquote x) null)))",
  "last-index": "(macro* last-index (coll) (syntax-quote (-1 (alen (unquote coll)))))",
  "rest": "(macro* rest (coll) (syntax-quote (.slice (unquote coll) 1)))",
  "cdr": "(macro* cdr (coll) (syntax-quote (.slice (unquote coll) 1)))",
  "second": "(macro* second (coll) (syntax-quote (nth (unquote coll) 1)))",
  "first": "(macro* first (coll) (syntax-quote (nth (unquote coll) 0)))",
  "car": "(macro* car (coll) (syntax-quote (nth (unquote coll) 0)))",
  "nexth": "(macro* nexth (coll i) (syntax-quote (nth (unquote coll) (1 (unquote i)))))",
  "nth": "(macro* nth (coll i) (syntax-quote (get (unquote coll) (unquote i))))",
  "even?": "(macro* even? (& xs) (syntax-quote (_andp_* (splice-unquote (map* (lambda* [x] (syntax-quote (= 0 (kirbystdlibref/modulo (unquote x) 2)))) xs)))))",
  "odd?": "(macro* odd? (& xs) (syntax-quote (_andp_* (splice-unquote (map* (lambda* [x] (syntax-quote (not (even? (unquote x))))) xs)))))",
  "alen": "(macro* alen (coll) (syntax-quote (.-length (unquote coll))))",
  "nzlen?": "(macro* nzlen? (coll) (syntax-quote (> (alen (unquote coll)) 0)))",
  "zlen?": "(macro* zlen? (coll) (syntax-quote (= 0 (alen (unquote coll)))))",
  "type": "(macro* type (obj) (syntax-quote (typeof (unquote obj))))",
  "whatis?": "(macro* whatis? (obj) (syntax-quote (Object.prototype.toString.call (unquote obj))))",
  "regex?": "(macro* regex? (& xs) (syntax-quote (_andp_* (splice-unquote (map* (lambda* [x] (syntax-quote (= (whatis? (unquote x)) \"[object RegExp]\"))) xs)))))",
  "array?": "(macro* array? (& xs) (syntax-quote (_andp_* (splice-unquote (map* (lambda* [x] (syntax-quote (Array.isArray (unquote x)))) xs)))))",
  "arr?": "(macro* arr? (& xs) (syntax-quote (array? (splice-unquote xs))))",
  "date?": "(macro* date? (& xs) (syntax-quote (_andp_* (splice-unquote (map* (lambda* [x] (syntax-quote (= (whatis? (unquote x)) \"[object Date]\"))) xs)))))",
  "bool?": "(macro* bool? (& xs) (syntax-quote (boolean? (splice-unquote xs))))",
  "boolean?": "(macro* boolean? (& xs) (syntax-quote (_andp_* (splice-unquote (map* (lambda* [x] (syntax-quote (= (typeof (unquote x)) \"boolean\"))) xs)))))",
  "num?": "(macro* num? (& xs) (syntax-quote (number? (splice-unquote xs))))",
  "number?": "(macro* number? (& xs) (syntax-quote (_andp_* (splice-unquote (map* (lambda* [x] (syntax-quote (= (typeof (unquote x)) \"number\"))) xs)))))",
  "str?": "(macro* str? (& xs) (syntax-quote (string? (splice-unquote xs))))",
  "string?": "(macro* string? (& xs) (syntax-quote (_andp_* (splice-unquote (map* (lambda* [x] (syntax-quote (= (typeof (unquote x)) \"string\"))) xs)))))",
  "fn?": "(macro* fn? (& xs) (syntax-quote (_andp_* (splice-unquote (map* (lambda* [x] (syntax-quote (= (typeof (unquote x)) \"function\"))) xs)))))",
  "undef?": "(macro* undef? (& xs) (syntax-quote (_andp_* (splice-unquote (map* (lambda* [x] (syntax-quote (= (typeof (unquote x)) \"undefined\"))) xs)))))",
  "def?": "(macro* def? (& xs) (syntax-quote (_andp_* (splice-unquote (map* (lambda* [x] (syntax-quote (not= (typeof (unquote x)) \"undefined\"))) xs)))))",
  "nil?": "(macro* nil? (& xs) (syntax-quote (_andp_* (splice-unquote (map* (lambda* [x] (syntax-quote (= (unquote x) null))) xs)))))",
  "zero?": "(macro* zero? (& xs) (syntax-quote (_andp_* (splice-unquote (map* (lambda* [x] (syntax-quote (= (unquote x) 0))) xs)))))",
  "one?": "(macro* one? (& xs) (syntax-quote (_andp_* (splice-unquote (map* (lambda* [x] (syntax-quote (= (unquote x) 1))) xs)))))",
  "neg?": "(macro* neg? (& xs) (syntax-quote (_andp_* (splice-unquote (map* (lambda* [x] (syntax-quote (< (unquote x) 0))) xs)))))",
  "pos?": "(macro* pos? (& xs) (syntax-quote (_andp_* (splice-unquote (map* (lambda* [x] (syntax-quote (> (unquote x) 0))) xs)))))",
  "values": "(macro* values (obj) (syntax-quote (Object.values (unquote obj))))",
  "keys": "(macro* keys (obj) (syntax-quote (Object.keys (unquote obj))))",
  "properties": "(macro* properties (obj) (syntax-quote (Object.getOwnPropertyNames (unquote obj))))",
  "assert": "(macro* assert (tst & msgs) (syntax-quote (if (unquote tst) true (raise! (splice-unquote msgs)))))",
  "false?": "(macro* false? (& xs) (syntax-quote (_andp_* (splice-unquote (map* (lambda* [x] (syntax-quote (= (unquote x) false))) xs)))))",
  "true?": "(macro* true? (& xs) (syntax-quote (_andp_* (splice-unquote (map* (lambda* [x] (syntax-quote (= (unquote x) true))) xs)))))",
  "when-not": "(macro* when-not (tst & xs) (syntax-quote (when (not (unquote tst)) (splice-unquote xs))))",
  "unless": "(macro* unless (tst & xs) (syntax-quote (when-not (unquote tst) (splice-unquote xs))))",
  "if-not": "(macro* if-not (tst then else) (syntax-quote (if (not (unquote tst)) (unquote then) (unquote else))))",
  "while": "(macro* while (tst & xs) (syntax-quote (for [:while (unquote tst)] (splice-unquote xs))))",
  "when": "(macro* when (tst & xs) (syntax-quote (if (unquote tst) (do (splice-unquote xs)))))",
  "cond": "(macro* cond (& xs) (let* [len (count* xs)] (do* (assert* (is-even? len) \"cond expects even args\") (if* (> len 0) (let* [c (nth* xs 0) e (nth* xs 1) r (rest* (rest* xs))] (if* (is-same? c \"else\") (syntax-quote (if true (unquote e))) (syntax-quote (if (unquote c) (unquote e) (cond (splice-unquote r))))))))))",
  "->": "(macro* -> (expr form & xs) (let* [x (syntax-quote ((unquote (nth* form 0)) (unquote expr) (splice-unquote (rest* form))))] (if* (> (count* xs) 0) (syntax-quote (-> (unquote x) (splice-unquote xs))) (syntax-quote (unquote x)))))",
  "->>": "(macro* ->> (expr form & xs) (let* [x (syntax-quote ((splice-unquote form) (unquote expr)))] (if* (> (count* xs) 0) (syntax-quote (->> (unquote x) (splice-unquote xs))) (syntax-quote (unquote x)))))",
  "let": "(macro* let (bindings & xs) (syntax-quote (do (var (splice-unquote bindings)) (splice-unquote xs))))",
  "single?": "(macro* single? (coll) (syntax-quote (= 1 (n# (unquote coll)))))",
  "dual?": "(macro* dual? (coll) (syntax-quote (= 2 (n# (unquote coll)))))",
  "triple?": "(macro* triple? (coll) (syntax-quote (= 3 (n# (unquote coll)))))",
  "loop": "(macro* loop (bindings & more) (let* [es (evens* bindings) os (odds* bindings)] (syntax-quote ((fn [] (var _x_ null recur null _f_ (fn [(splice-unquote es)] (splice-unquote more)) _r_ _f_) (set! recur (fn [] (set! _x_ arguments) (raw# \"if (_r_) {for(_r_=undefined;_r_===undefined;){_r_=_f_.apply(this,_x_);} return _r_;}\") undefined)) (recur (splice-unquote os))) this))))",
  "concat": "(macro* concat (coll x) (syntax-quote (.concat (unquote coll) (unquote x))))",
  "join": "(macro* join (sep coll) (syntax-quote (.join (unquote coll) (unquote sep))))",
  "do-with": "(macro* do-with (binding & xs) (let* [f (nth* binding 0)] (syntax-quote (let [(unquote f) (unquote (nth* binding 1))] (splice-unquote xs) (unquote f)))))",
  "do->false": "(macro* do->false (& xs) (let* [a (gensym*)] (syntax-quote (let [(unquote a) false] (splice-unquote xs) (unquote a)))))",
  "do->true": "(macro* do->true (& xs) (let* [a (gensym*)] (syntax-quote (let [(unquote a) true] (splice-unquote xs) (unquote a)))))",
  "do->nil": "(macro* do->nil (& xs) (let* [a (gensym*)] (syntax-quote (let [(unquote a) null] (splice-unquote xs) (unquote a)))))",
  "do->undef": "(macro* do->undef (& xs) (let* [a (gensym*)] (syntax-quote (let [(unquote a) undefined] (splice-unquote xs) (unquote a)))))",
  "do->break!": "(macro* do->break! (& xs) (syntax-quote (do (splice-unquote xs) (break-out-of-loop!))))",
  "inc": "(macro* inc (x) (syntax-quote (1 (unquote x))))",
  "dec": "(macro* dec (x) (syntax-quote (-1 (unquote x))))",
  "dotimes": "(macro* dotimes (binding & xs) (let* [_t (gensym*) b1 (first* binding)] (syntax-quote (for [(unquote b1) 0 (unquote _t) (unquote (nth* binding 1)) :while (< (unquote b1) (unquote _t)) :recur (1 (unquote b1))] (splice-unquote xs)))))",
  "range": "(macro* range (a b c) (let* [start (if* b a 0) end (if* b b a) step (if* c c 1)] (syntax-quote (do-with [ret []] (for [i (unquote start) :while (< i (unquote end)) :recur (+ i (unquote step))] (ret.push i))))))",
  "apply": "(macro* apply (f this args) (syntax-quote (.apply (unquote f) (unquote this) (unquote args))))",
  "apply*": "(macro* apply* (f this & args) (syntax-quote (.apply (unquote f) (unquote this) (vec (splice-unquote args)))))",
  "ch@": "(macro* ch@ (s pos) (syntax-quote (.charAt (unquote s) (unquote pos))))",
  "false!": "(macro* false! (x) (syntax-quote (set! (unquote x) false)))",
  "true!": "(macro* true! (x) (syntax-quote (set! (unquote x) true)))",
  "repeat": "(macro* repeat (n x) (syntax-quote (do-with [ret []] (for [i 0 :while (< i (unquote n)) :recur (1 i)] (ret.push (unquote x))))))",
  "doseq": "(macro* doseq (bindings & xs) (let* [loopExpr (gensym*) escvar (gensym*) idxvar (gensym*) _let (if* (is-eq? (nth* bindings 2) (quote :let)) (nth* bindings 3)) _while (if* (is-eq? (nth* bindings 2) (quote :while)) (nth* bindings 3) (if* (is-eq? (nth* bindings 4) (quote :while)) (nth* bindings 5) (if* (is-eq? (nth* bindings 6) (quote :while)) (nth* bindings 7) true))) _when (if* (is-eq? (nth* bindings 2) (quote :when)) (nth* bindings 3) (if* (is-eq? (nth* bindings 4) (quote :when)) (nth* bindings 5) (if* (is-eq? (nth* bindings 6) (quote :when)) (nth* bindings 7) true)))] (syntax-quote (let [(unquote loopExpr) (unquote (nth* bindings 1))] (for [(unquote idxvar) 0 (unquote escvar) false :while (and (not (unquote escvar)) (< (unquote idxvar) (alen (unquote loopExpr)))) :recur (1 (unquote idxvar))] (var (unquote (nth* bindings 0)) (nth (unquote loopExpr) (unquote idxvar))) (unquote (if* _let (syntax-quote (var (splice-unquote _let))))) (if-not (unquote _while) (set! (unquote escvar) true)) (when (and (not (unquote escvar)) (unquote _when)) (splice-unquote xs))) null))))",
  "if-some+": "(macro* if-some+ (binding then else) (let* [tst (gensym*)] (syntax-quote (let [(unquote tst) (unquote (nth* binding 1)) (unquote (first* binding)) (unquote tst)] (if (> (n# (unquote tst)) 0) (unquote then) (unquote else))))))",
  "if-some": "(macro* if-some (binding then else) (let* [tst (gensym*)] (syntax-quote (let [(unquote tst) (unquote (nth* binding 1)) (unquote (first* binding)) (unquote tst)] (if (or (undef? (unquote tst)) (nil? (unquote tst))) (unquote else) (unquote then))))))",
  "if-let": "(macro* if-let (binding then else) (let* [tst (gensym*)] (syntax-quote (let [(unquote tst) (unquote (nth* binding 1)) (unquote (first* binding)) (unquote tst)] (if (unquote tst) (unquote then) (unquote else))))))",
  "when-some+": "(macro* when-some+ (binding & xs) (let* [tst (gensym*)] (syntax-quote (let [(unquote tst) (unquote (nth* binding 1)) (unquote (first* binding)) (unquote tst)] (when (> (n# (unquote tst)) 0) (splice-unquote xs))))))",
  "when-some": "(macro* when-some (binding & xs) (let* [tst (gensym*)] (syntax-quote (let [(unquote tst) (unquote (nth* binding 1)) (unquote (first* binding)) (unquote tst)] (when-not (or (undef? (unquote tst)) (nil? (unquote tst))) (splice-unquote xs))))))",
  "when-let": "(macro* when-let (binding & xs) (let* [tst (gensym*)] (syntax-quote (let [(unquote tst) (unquote (nth* binding 1)) (unquote (first* binding)) (unquote tst)] (when (unquote tst) (splice-unquote xs))))))",
  "doto": "(macro* doto (target & xs) (let* [v (gensym*)] (syntax-quote (let [(unquote v) (unquote target)] (splice-unquote (map* (lambda* [e] (syntax-quote ((unquote (first* e)) (unquote v) (splice-unquote (rest* e))))) xs)) (unquote v)))))",
  "map": "(macro* map (f coll) (syntax-quote (.map (unquote coll) (unquote f))))",
  "filter": "(macro* filter (p coll) (syntax-quote (.filter (unquote coll) (unquote p))))",
  "some": "(macro* some (p coll) (syntax-quote (.some (unquote coll) (unquote p))))",
  "take": "(macro* take (coll cnt) (syntax-quote (slice (unquote coll) 0 (unquote cnt))))",
  "constantly": "(macro* constantly (x) (syntax-quote (fn [& xs] (unquote x))))",
  "drop": "(macro* drop (coll cnt) (syntax-quote (slice (unquote coll) (unquote cnt))))",
  "reduce2": "(macro* reduce2 (f coll) (syntax-quote (.reduce (unquote coll) (unquote f))))",
  "reduce": "(macro* reduce (f start coll) (syntax-quote (.reduce (unquote coll) (unquote f) (unquote start))))",
  "str": "(macro* str (& xs) (syntax-quote (.join (vec (splice-unquote xs)) \"\")))",
  "lambda": "(macro* lambda (code) (let* [sz (count* code) body (if* (> sz 1) code (if* (> sz 0) (nth* code 0)))] (syntax-quote (fn [] (var ____args (slice arguments)) (unquote body)))))",
  "each": "(macro* each (func coll) (syntax-quote (.forEach (unquote coll) (unquote func))))",
  "each-key": "(macro* each-key (func obj) (let* [t (gensym*)] (syntax-quote (let [(unquote t) (unquote obj)] (each (fn [e] ((unquote func) (nth e 1) (nth e 0))) (Object.entries (unquote t)))))))",
  "dosync": "(macro* dosync (& exprs) (syntax-quote (do (splice-unquote exprs))))",
  "monad": "(macro* monad (docstring operations) (syntax-quote (do (var~ bind unit zero plus) (let [(splice-unquote operations)] (hashmap :bind bind :unit unit :zero zero :plus plus)))))",
  "defmonad": "(macro* defmonad (name docs operations) (let* [ds (if* (is-str? docs) docs \"\") ps (if* (is-str? docs) operations (if* (is-array? docs) docs)) _ (assert* (is-array? ps) \"no macro operations\")] (syntax-quote (const (unquote name) (monad (unquote ds) (unquote ps))))))",
  "dobind": "(macro* dobind (mbind steps expr) (let* [mv (nth* steps 1) a1 (nth* steps 0) more (rest* (rest* steps))] (syntax-quote ((unquote mbind) (unquote mv) (fn [(unquote a1)] (unquote (if* (not-empty* more) (syntax-quote (dobind (unquote mbind) (unquote more) (unquote expr))) (syntax-quote (do (unquote expr))))))))))",
  "domonad": "(macro* domonad (monad steps body) (syntax-quote ((fn [{:keys [bind unit zero] :as mo}] (var ret (lambda (if (and (kirbystdlibref/nichts? %1) (def? zero)) zero (unit %1)))) (dobind bind (unquote steps) (ret (unquote body)))) (unquote monad))))",
  "deftest": "(macro* deftest (name & body) (syntax-quote (const (unquote name) (lambda (vec (splice-unquote body))))))",
  "ensure": "(macro* ensure (form msg) (syntax-quote (kirbystdlibref/ensureTest (unquote form) (unquote msg))))",
  "ensureThrown": "(macro* ensureThrown (expected form msg) (syntax-quote (try (unquote form) (kirbystdlibref/ensureTestThrown (unquote expected) null (unquote msg)) (catch e (kirbystdlibref/ensureTestThrown (unquote expected) e (unquote msg))))))",
  "assert*": "(macro* assert* (c msg) (syntax-quote (if* (unquote c) true (throw* (unquote msg)))))",
  "cond*": "(macro* cond* (& xs) (if* (> (count* xs) 0) (list* (quote if*) (first* xs) (nth* xs 1) (cons* (quote cond*) (rest* (rest* xs))))))",
  "_andp_*": "(macro* _andp_* (& xs) (if* (= 1 (unquote (count* xs))) (syntax-quote (unquote (first* xs))) (syntax-quote (and (splice-unquote xs)))))"
};
module.exports = {
  da57bc0172fb42438a11e6e8778f36fb: {
    ns: "czlab.kirby.stdlib",
    macros: ____macros
  },
  MODULE_NAMESPACE: MODULE_NAMESPACE,
  println: println,
  not_DASH_empty: not_DASH_empty,
  stringify: stringify,
  opt_QMRK__QMRK: opt_QMRK__QMRK,
  conj_BANG: conj_BANG,
  conj: conj,
  pop_BANG: pop_BANG,
  pop: pop,
  wrap_DASH_str: wrap_DASH_str,
  getProp: getProp,
  prn: prn,
  LambdaArg: LambdaArg,
  Primitive: Primitive,
  RegexObj: RegexObj,
  Keyword: Keyword,
  Symbol: Symbol,
  primitive_QMRK: primitive_QMRK,
  primitive: primitive,
  regexObj_QMRK: regexObj_QMRK,
  regexObj: regexObj,
  symbol_QMRK: symbol_QMRK,
  symbol: symbol,
  keyword_QMRK: keyword_QMRK,
  keyword: keyword,
  keyword_DASH__GT_symbol: keyword_DASH__GT_symbol,
  lambdaArg_QMRK: lambdaArg_QMRK,
  lambdaArg: lambdaArg,
  Atom: Atom,
  atom_QMRK: atom_QMRK,
  atom: atom,
  reset_BANG: reset_BANG,
  resetVec_BANG: resetVec_BANG,
  resetObject_BANG: resetObject_BANG,
  sort_BANG: sort_BANG,
  find: find,
  deref: deref,
  swap_BANG: swap_BANG,
  typeid: typeid,
  complex_QMRK: complex_QMRK,
  simple_QMRK: simple_QMRK,
  value_QMRK: value_QMRK,
  sequential_QMRK: sequential_QMRK,
  eq_QMRK: eq_QMRK,
  object_QMRK: object_QMRK,
  last: last,
  into_BANG: into_BANG,
  into: into,
  pairs_QMRK: pairs_QMRK,
  list_QMRK: list_QMRK,
  list: list,
  vector_QMRK: vector_QMRK,
  vector: vector,
  map_QMRK: map_QMRK,
  arraymap: arraymap,
  object: object,
  seq: seq,
  contains_QMRK: contains_QMRK,
  nichts_QMRK: nichts_QMRK,
  some_QMRK: some_QMRK,
  count: count,
  concat_STAR: concat_STAR,
  evens: evens,
  odds: odds,
  modulo: modulo,
  partition: partition,
  split_DASH_str: split_DASH_str,
  interleave: interleave,
  zipmap: zipmap,
  extendAttr: extendAttr,
  cons: cons,
  gensym: gensym,
  carve: carve,
  assoc_BANG: assoc_BANG,
  dissoc_BANG: dissoc_BANG,
  truthy_QMRK: truthy_QMRK,
  falsy_QMRK: falsy_QMRK,
  flatten: flatten,
  identity: identity,
  m_DASH_identity: m_DASH_identity,
  m_DASH_maybe: m_DASH_maybe,
  m_DASH_list: m_DASH_list,
  m_DASH_state: m_DASH_state,
  m_DASH_continuation: m_DASH_continuation,
  run_DASH_cont: run_DASH_cont,
  quote_DASH_str: quote_DASH_str,
  unquote_DASH_str: unquote_DASH_str,
  escXml: escXml,
  split_DASH_seq: split_DASH_seq,
  select_DASH_keys: select_DASH_keys,
  update_DASH_in_BANG: update_DASH_in_BANG,
  get_DASH_in: get_DASH_in,
  merge: merge,
  difference: difference,
  percent: percent,
  toFixed: toFixed,
  ensureTest: ensureTest,
  ensureTestThrown: ensureTestThrown,
  runtest: runtest,
  pushNSP: pushNSP,
  popNSP: popNSP,
  peekNSP: peekNSP,
  _STAR_ns_STAR: _STAR_ns_STAR
};