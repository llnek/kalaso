
(ns ^{:doc ""
      :author "Kenneth Leung"}
  czlab.elmo.ecs
  (:require ["kirby"
             :as K :refer [atom swap! conj! disj!]]))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn createECS "" []
  (atom {:entities #{} :registry {} :data {} :processors [] :uid 1}))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- genUid "" ^String [ecs]
  (local-vars ret 0)
  (swap! ecs
         (fn [root]
           (set! ret (get root :uid))
           (assoc! root :uid (+1 ret)))) (numStr ret))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn createEntity "" [ecs & componentIds]
  (dosync
    (local-vars entity (genUid ecs))
    (apply addToEntity this (concat [ecs entity] componentIds))
    (swap! ecs
           (fn [root]
             (conj! (get root :entities) entity) root)) entity))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn removeEntity "" [ecs entity]
  (swap! ecs
         (fn [{:keys [entities
                      data registry] :as root}]
           (each #(if-some [co (get data %)]
                    (dissoc! co entity)) (keys registry))
           (disj! entities entity)
           root)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn addComponent "" [ecs id component]
  (swap! ecs
         (fn [root]
           (assoc! (get root :registry) id component) root)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn removeComponent "" [ecs id]
  (swap! ecs
         (fn [root]
           (dissoc! (get root :registry) id)
           (dissoc! (get root :data) id)
           root)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn addToEntity "" [ecs entity & componentIds]
  (swap! ecs
         (fn [{:keys [data registry] :as root}]
           (local-vars ctor nil co nil)
           (each (fn [cid]
                   (set! ctor (get registry cid))
                   (if-not ctor (raise! "Unknown component " cid))
                   (if-not (.has data cid) (assoc! data cid {}))
                   (set! co (ctor))
                   (oset! co :____entity entity)
                   (assoc! (get data cid) entity co)) componentIds) root)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn removeFromEntity [ecs entity & componentIds]
  (swap! ecs
         (fn [{:keys [data] :as root}]
           (each #(if-some [c (get data %)]
                    (dissoc! c entity)) componentIds) root)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn getDataForEntity "" [ecs entity componentId]
  (local-vars d (get @ecs :data)
              c (get d componentId))
  (if c (get c entity)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn updateEntity "" [ecs entity componentId func]
  (if-some [c (getDataForEntity
                ecs entity componentId)] (func c)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn getComponentsData "" [ecs componentId]
  (local-vars d (get @ecs :data)
              c (get d componentId))
  (if c (Array.from (.values c)) []))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn componentInEntity? "" [ecs entity componentId]
  (local-vars d (get @ecs :data)
              c (get d componentId))
  (if c (.has c entity) #f))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn addTemplate "" [ecs id template]
  (swap! ecs
         (fn [root]
           (assoc! (get root :templates) id template) root)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn removeTemplate "" [ecs id]
  (swap! ecs
         (fn [root]
           (dissoc! (get root :templates) id) root)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn createEntityFromTemplate "" [ecs id]
  (local-vars entity nil)
  (swap! ecs
         (fn [{:keys [templates] :as root}]
           (local-vars t (get templates id))
           (set! entity
                 (apply createEntity this t.components))
           (if (fn? t.initor)
             (t.initor ecs e)) root)) entity)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn addProcessor "" [ecs processor]
  (swap! ecs
         (fn [root]
           (conj! (get root :processors) processor) root)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn removeProcessor "" [ecs processor]
  (swap! ecs
         (fn [{:keys [processors] :as root}]
           (local-vars i (.indexOf processors processor))
           (if-not (neg? i)
             (.splice processor i 1)) root)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn updateECS "" [ecs dt]
  (local-vars p (get @ecs :processors))
  (each #(.update % dt) p))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;EOF


