
(ns ^{:doc ""
      :author "Kenneth Leung"}
  czlab.elmo.ecs
  (:require ["kirby"
             :as K :refer []]))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn createECS "" []
  (atom {:entities #{} :registry {} :data {} :processors [] :uid 1}))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- genUid "" ^String [ecs]
  (local-vars ret 0)
  (swap! ecs (fn [root]
               (set! ret (get root :uid))
               (assoc! root :uid (inc ret)))) (numStr ret))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn createEntity "" [ecs & comps]
  (let [eid (nextEntityUid ecs)]
    (apply addToEntity this eid comps)
    (swap! ecs (fn [root]
                 (conj! (get root :entities) eid) root)) eid))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn removeEntity "" [ecs entity]
  (swap! ecs
         (fn [root]
           (local-vars e (get root :entities)
                       d (get root :data)
                       c (get root :registry))
           (each (fn [k]
                   (let [co (get d k)]
                     (if (and co
                              (.has co entity))
                       (dissoc! co entity)))) (keys c))
           (disj! e entity)
           root)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn addComponent "" [ecs id component]
  (swap! ecs
         (fn [root]
           (assoc! (get root :registry) id component) root)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn removeComponent "" [ecs id]
  (swap! ecs
         (fn [root]
           (dissoc! (get root :registry) id)
           (dissoc! (get root :data) id)
           root)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn addToEntity "" [ecs entity & componentIds]
  (swap! ecs
         (fn [root]
           (local-vars d (get root :data)
                       co nil
                       r (get root :registry))
           (each (fn [cid]
                   (if-not (.has r cid) (raise! "Unknown component " cid))
                   (if-not (.has d cid) (assoc! d cid {}))
                   (set! co (clone (get r cid)))
                   (oset! co :____entity entity)
                   (assoc! (get d cid) entity co)) componentIds) root)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn removeFromEntity [ecs entity & componentIds]
  (swap! ecs
         (fn [root]
           (local-vars d (get root :data))
           (each (fn [cid]
                   (if-some [c (get d cid)]
                     (dissoc! c entity))) componentIds)
           root)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn getDataForEntity "" [ecs entity componentId]
  (local-vars d (get @ecs :data)
              c (get d componentId))
  (if c (get c entity)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn updateEntity "" [ecs entity componentId func] )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn getComponentsData "" [ecs componentId]
  (local-vars d (get @ecs :data)
              c (get d componentId))
  (if c (Array.from (.values c)) []))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn componentInEntity? "" [ecs entity componentId]
  (local-vars d (get @ecs :data)
              c (get d componentId))
  (if c (.has c entity) #f))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn addTemplate "" [ecs id template]
  (swap! ecs
         (fn [root]
           (assoc! (get root :templates) id template) root)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn removeTemplate "" [ecs id]
  (swap! ecs
         (fn [root]
           (dissoc! (get root :templates) id) root)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn createEntityFromTemplate "" [ecs id]
  (swap! ecs
         (fn [root]
           (local-vars m (get t id)
                       t (get root :templates)
                       e (apply createEntity this t.components))
           root)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn addProcessor "" [ecs processor]
  (swap! ecs
         (fn [root]
           (conj! (get root :processors) processor) root)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn removeProcessor "" [ecs processor]
  (swap! ecs
         (fn [root]
           (local-vars p (get root :processors)
                       i (.indexOf p processor))
           (if-not (neg? i)
             (.splice p i 1)) root)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn updateECS "" [ecs dt]
  (local-vars p (get @ecs :processors))
  (each #(.update % dt) p))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;EOF


