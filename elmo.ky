
(ns ^{:doc ""
      :author "Kenneth Leung"}

  czlab.cocos2d.elmo)


;#include "XConfig.h"
;#include "CCSX.h"
;#include "App.h"
;NS_ALIAS(cx, fusii::ccsx)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn applicationDidFinishLaunching "" [cfg]

  (var glview (.getOpenGLView cc.director)
       sz (get @cfg :gameSize))
  (do->true
    (preLaunch sz)
    (cc.log "about to run start scene")
    (->> (.prelude @cfg)
         (.runWithScene cc.director))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- preLaunch "" [cfg sz]
  ;; device sizes 2733x1536
  ;; 1495x840 => 0.41667
  ;; 854x480 => 0.2083333
  (var {:keys [showFPS FPS]} (get-in @cfg :csts)
       glview (.getOpenGLView cc.director)
       spaths []
       fz (.getFrameSize glview))
  (var~ largeSize medSize smallSize w h)
  ;; Set the design resolution
  (cx/setDevRes dz.width dz.height (.policy @cfg))
  ;; FPS. dft is 1.0/60 if you don't call this
  (.setAnimationInterval cc.director (/ 1.0 fps))
  ;; turn on display FPS?
  (.setDisplayStats cc.director showFPS)
  ;; portrait?
  (if (.isPortrait @cfg)
    (set! largeSize (cc.Size 1536 2048)
          medSize (cc.Size 768 1024)
          smallSize (cc.Size 320 480))
    (set! largeSize (cc.Size 2048 1536)
          medSize (cc.Size 1024 768)
          smallSize (cc.Size 480 320)))
  (cond
    (> fz.height medSize.height)
    (do (set! h largeSize.height
              w largeSize.width)
        (conj! spaths :rd :hd :sd))
    (> fz.height smallSize.height)
    (do (set! h medSize.height
              w medSize.width)
        (conj! spaths :hd :sd :rd))
    :else
    (do (set! h smallSize.height
              w smallSize.width)
        (conj! spaths :sd :hd :rd)))

  (.setContentScaleFactor cc.director
                          (Math/min (/ h dz.height)
                                    (/ w dz.width)))
  ;; for win32 add Resources
  (jsb.fileUtils.setSearchPaths (conj! spaths :Resources))
  (doto @cfg
    (.setFrameSize fz) (.runOnce ))
  (initAudio cfg)

  ;; debug show...
  (var wz (.getWinSize cc.director)
       dbgs (join " -> " spaths))
  (cc.log "screen size, width=%d, height=%d" fz.width fz.height)
  (cc.log "win size, width=%d, height=%d" wz.width wz.height)
  (cc.log "game size, width=%d, height=%d" dz.width dz.height)
  (cc.log "image search path=%s" dbgs)
  (cc.log "glview::content scale factor: %f"
          (.getContentScaleFactor glview))
  (cc.log "glview::scale x: %f" (.getScaleX glview))
  (cc.log "glview::scale y: %f" (.getScaleY glview))
  (cc.log "content scale factor=%f"
          (.getContentScaleFactor cc.director))
  (cc.log "_scale =%f" (.getScale @cfg)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- initAudio "" [cfg]
  (var inst cc.audioEngine)
  (each (fn [f]
          (cc.log "loading effect: %s" f)
          (.preloadEffect inst f))
        (.getEffectFiles @cfg))
  (each (fn [f]
          (cc.log "loading music: %s" f)
          (.preloadBackgroundMusic inst f))
        (.getMusicFiles @cfg))
  (.setMusicVolume inst 0.5)
  (.setEffectsVolume inst 0.5))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn applicationDidEnterBackground

  "This function will be called when the app is inactive
  When comes a phone call,it's be invoked too"
  []

  (.stopAnimation cc.director)
  (.pauseMusic cc.audioEngine))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn applicationWillEnterForeground

  "This function will be called when the app is active again"
  []

  (.startAnimation cc.director)
  (.resumeMusic cc.audioEngine))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;EOF


