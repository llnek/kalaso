;; Copyright (c) 2013-2017, Kenneth Leung. All rights reserved.
;; The use and distribution terms for this software are covered by the
;; Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
;; which can be found in the file epl-v10.html at the root of this distribution.
;; By using this software in any fashion, you are agreeing to be bound by
;; the terms of this license.
;; You must not remove this notice, or any other, from this software.
(ns ^{:doc ""
      :author "Kenneth Leung"}
  czlab.kirby.test.stdlib)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(deftest xxx

  (ensure (not (empty? [1])))
  (ensure (empty? []))
  (ensure (starts? "abc" "a"))
  (ensure (ends? "abc" "c"))
  (ensure (= 3 (n# [1 2 3])))
  (ensure (= 1 (1st [1 2])))
  (ensure (= 2 (2nd [1 2])))
  (ensure (= 3 (3rd [1 2 3])))
  (ensure (= 1 (get (slice [1 2] 0 -1) 0)))
  (ensure (= 2 (get (slice [1 2] 1) 0)))
  (ensure (= (float "1.2") 1.2))
  (ensure (= (int "12") 12))
  (ensure (do (undef! TMPVAR)(= undefined TMPVAR)))
  (ensure (do (nil! TMPVAR)(= null TMPVAR)))
  (ensure (= 2 (last-index [1 2 3])))
  (ensure (= 2 (get (rest [1 2]) 0)))
  (ensure (= 2 (get (cdr [1 2]) 0)))
  (ensure (= 2 (second [1 2])))
  (ensure (= 1 (first [1 2])))
  (ensure (= 1 (car [1 2])))
  (ensure (= 2 (nexth [1 2] 0)))
  (ensure (= 3 (nth [1 2 3] 2)))
  (ensure (not (even? 2 3)))
  (ensure (even? 2))
  (ensure (even? 2 4))
  (ensure (not (odd? 2 3)))
  (ensure (odd? 3))
  (ensure (odd? 3 9))
  (ensure (= 3 (alen [1 2 3])))
  (ensure (nzlen? [1 2]))
  (ensure (zlen? []))
  (ensure (= "string" (type "hello")))
  (ensure (= "[object Array]" (whatis? [3])))
  (ensure (regex? #/^hello/))
  (ensure (array? [] [1] ["2"]))
  (ensure (arr? [] [1] ["2"]))
  (ensure (date? (new Date)))
  (ensure (boolean? true false))
  (ensure (bool? true false))
  (ensure (number? 4 8))
  (ensure (num? 4 8))
  (ensure (string? "a" "b"))
  (ensure (str? "a" "b"))
  (ensure (fn? (fn [] nil)))
  (ensure (do (undef! TMPVAR)(undef? TMPVAR)))
  (ensure (do (set! TMPVAR 3)(def? TMPVAR)))
  (ensure (nil? null))
  (ensure (zero? 0))
  (ensure (one? 1))
  (ensure (neg? -33))
  (ensure (pos? 45))
  (ensure (= 1 (get (values {:a 1}) 0)))
  (ensure (= :a (get (keys {:a 1}) 0)))
  (ensure (assert (= 1 1)))
  (ensure (false? (= 1 0)))
  (ensure (true? (= 0 0)))
  (ensure (= "hello" (when-not false "hello")))
  (ensure (= "hello" (unless false "hello")))
  (ensure (= "hello" (if-not (= 1 0) "hello")))
  (ensure (= "hello" (if-not (= 1 1) "boom" "hello")))
  (ensure (= 10
             (do (set! TMPVAR 0)
                 (while (not= TMPVAR 10) (++ TMPVAR)) TMPVAR)))
  (ensure (= 101 (when true
                   (set! TEMPVAR 100) (++ 100))))




  (ensureThrown "object" (raise! "hello" "world"))
  (ensureThrown "string" (trap! "hello" "world"))
  (ensure (= "hello" (.-message (merror "hello")))))





;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;EOF


