/*Auto generated by Kirby v1.0.0 - Thu Mar 29 2018 19:09:19 GMT-0700 (PDT)
  czlab.kirby.test.stdlib
{"doc" "" "author" "Kenneth Leung"}
*/

const std = require("kirby");
const conj_BANG = std["conj_BANG"];
const println = std["println"];
const inc = std["inc"];
const dec = std["dec"];
const rseq = std["rseq"];
const split_DASH_with = std["split_DASH_with"];
const take_DASH_while = std["take_DASH_while"];
const drop_DASH_while = std["drop_DASH_while"];
const kirbystdlibref = std;
const __module_namespace__ = "czlab.kirby.test.stdlib";
var s = std;
var TMPVAR = null;
////////////////////////////////////////////////////////////////////////////////
//fn: [mult3] in file: test.ky, line: 24
const mult3 = function(x) {
  return (3 * x);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [add2] in file: test.ky, line: 25
const add2 = function(x) {
  return (2 + x);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [exlog] in file: test.ky, line: 28
const exlog = function(expr, log) {
  return function(s) {
    let v = s.value;
    let v_QUOT = expr(v);
    let msg = [log, "(", v, ")"].join("");
    let log_QUOT = s.log.concat(msg);
    return [v_QUOT, {
      "value": v_QUOT,
      "log": log_QUOT
    }];
  };
};
const test_DASH_stdlib = function() {
  let ____args = Array.prototype.slice.call(arguments);
  return [kirbystdlibref.ensureTest((!(0 === kirbystdlibref.count([1]))), "not empty?"), kirbystdlibref.ensureTest((0 === kirbystdlibref.count([])), "empty?"), kirbystdlibref.ensureTest("abc".startsWith("a"), "string starts?"), kirbystdlibref.ensureTest("abc".endsWith("c"), "string ends?"), kirbystdlibref.ensureTest((3 === kirbystdlibref.count([1, 2, 3])), "n#"), kirbystdlibref.ensureTest((1 === [1, 2][0]), "1st"), kirbystdlibref.ensureTest((2 === [1, 2][1]), "2nd"), kirbystdlibref.ensureTest((3 === [1, 2, 3][2]), "3rd"), kirbystdlibref.ensureTest((1 === kirbystdlibref.getProp(Array.prototype.slice.call([1, 2], 0, -1), 0)), "slice,a,b"), kirbystdlibref.ensureTest((2 === kirbystdlibref.getProp(Array.prototype.slice.call([1, 2], 1), 0)), "slice,a"), kirbystdlibref.ensureTest((parseFloat("1.2") === 1.2), "float"), kirbystdlibref.ensureTest((parseInt("12") === 12), "int"), kirbystdlibref.ensureTest((!std.eq_QMRK(s.keyword(":aaa"), "aaa")), "!eq? keywords"), kirbystdlibref.ensureTest((s.keyword(":aaa") == "aaa"), "match keywords"), kirbystdlibref.ensureTest(("aaa" == "aaa"), "match both keywords"), kirbystdlibref.ensureTest(std.eq_QMRK("aaa", "aaa"), "eq? both keywords"), kirbystdlibref.ensureTest((1 !== 2), "not="), kirbystdlibref.ensureTest((3 != 4), "!="), kirbystdlibref.ensureTest((7 == 7), "=="), kirbystdlibref.ensureTest((8 === 8), "="), kirbystdlibref.ensureTest((4 > 3), ">"), kirbystdlibref.ensureTest((5 >= 5), ">="), kirbystdlibref.ensureTest((4 < 7), "<"), kirbystdlibref.ensureTest((9 <= 9), "<="), kirbystdlibref.ensureTest((3200 === (100 << 2 << 3)), "<<"), kirbystdlibref.ensureTest((40 === (10 << 2)), "<<"), kirbystdlibref.ensureTest((2 === (10 >> 2)), ">>"), kirbystdlibref.ensureTest((6 === (54 >>> 3)), ">>>"), kirbystdlibref.ensureTest((6 === (2 + 2 + 2)), "+"), kirbystdlibref.ensureTest((6 === (12 - 3 - 2 - 1)), "-"), kirbystdlibref.ensureTest((-1 === (-1 * 1)), "-"), kirbystdlibref.ensureTest((1 === (-1 - -2)), "-"), kirbystdlibref.ensureTest((24 === (2 * 3 * 4)), "*"), kirbystdlibref.ensureTest((2 === (12 / 3 / 2)), "/"), kirbystdlibref.ensureTest((2 === (12 / 3 / 2)), "div"), kirbystdlibref.ensureTest((2 === (kirbystdlibref.modulo(-10, 3))), "mod"), kirbystdlibref.ensureTest((1 === (kirbystdlibref.modulo(10, 3))), "mod"), kirbystdlibref.ensureTest((true === (false || false || true)), "or"), kirbystdlibref.ensureTest((false === (true && true && false)), "and"), kirbystdlibref.ensureTest((true === (true && true && true)), "and"), kirbystdlibref.ensureTest((8 === (2 ** 3)), "exp"), kirbystdlibref.ensureTest((1 === (10 % 3)), "rem"), kirbystdlibref.ensureTest((2 === (10 & 3)), "&"), kirbystdlibref.ensureTest((11 === (10 | 3)), "|"), kirbystdlibref.ensureTest((-11 === (~10)), "~"), kirbystdlibref.ensureTest((9 === (10 ^ 3)), "^"), kirbystdlibref.ensureTest(s.eq_QMRK([4, 3], (function() {
    let x = 3;
    let y = x++;
    return [x, y];
  }).call(this)), "++"), kirbystdlibref.ensureTest(s.eq_QMRK([4, 4], (function() {
    let x = 3;
    let y = ++x;
    return [x, y];
  }).call(this)), "++"), kirbystdlibref.ensureTest(s.eq_QMRK([2, 3], (function() {
    let x = 3;
    let y = x--;
    return [x, y];
  }).call(this)), "--"), kirbystdlibref.ensureTest(s.eq_QMRK([2, 2], (function() {
    let x = 3;
    let y = --x;
    return [x, y];
  }).call(this)), "--"), kirbystdlibref.ensureTest((6 === (function() {
      let x = 3;
      return (x += 3);
    }).call(this)), "+="), kirbystdlibref.ensureTest((3 === (function() {
      let x = 6;
      return (x -= 3);
    }).call(this)), "-="), kirbystdlibref.ensureTest((18 === (function() {
      let x = 6;
      return (x *= 3);
    }).call(this)), "*="), kirbystdlibref.ensureTest((2 === (function() {
      let x = 6;
      return (x /= 3);
    }).call(this)), "/="), kirbystdlibref.ensureTest((2 === (function() {
      let x = 6;
      return (x /= 3);
    }).call(this)), "div="), kirbystdlibref.ensureTest((1 === (function() {
      let x = 10;
      return (x %= 3);
    }).call(this)), "rem="), kirbystdlibref.ensureTest((8 === (function() {
      let x = 2;
      return (x **= 3);
    }).call(this)), "exp="), kirbystdlibref.ensureTest((3 === (function() {
      let x = 19;
      return (x &= 3);
    }).call(this)), "&="), kirbystdlibref.ensureTest((111 === (function() {
      let x = 109;
      return (x |= 3);
    }).call(this)), "|="), kirbystdlibref.ensureTest((110 === (function() {
      let x = 109;
      return (x ^= 3);
    }).call(this)), "^="), kirbystdlibref.ensureTest((872 === (function() {
      let x = 109;
      return (x <<= 3);
    }).call(this)), "<<="), kirbystdlibref.ensureTest((13 === (function() {
      let x = 109;
      return (x >>= 3);
    }).call(this)), ">>="), kirbystdlibref.ensureTest((18 === (function() {
      let x = 148;
      return (x >>>= 3);
    }).call(this)), ">>>="), kirbystdlibref.ensureTest((function() {
    (
    TMPVAR = undefined);
    return (undefined === TMPVAR);
  }).call(this), "undef!"), kirbystdlibref.ensureTest((function() {
    (
    TMPVAR = null);
    return (null === TMPVAR);
  }).call(this), "nil!"), kirbystdlibref.ensureTest((2 === ([1, 2, 3].length - 1)), "last-index"), kirbystdlibref.ensureTest((2 === kirbystdlibref.getProp([1, 2].slice(1), 0)), "rest"), kirbystdlibref.ensureTest((2 === kirbystdlibref.getProp([1, 2].slice(1), 0)), "cdr"), kirbystdlibref.ensureTest((2 === [1, 2][1]), "second"), kirbystdlibref.ensureTest((1 === [1, 2][0]), "first"), kirbystdlibref.ensureTest((2 === [1, 2][1]), "_2"), kirbystdlibref.ensureTest((1 === [1, 2][0]), "_1"), kirbystdlibref.ensureTest((1 === [1, 2][0]), "car"), kirbystdlibref.ensureTest((2 === [1, 2][(0 + 1)]), "nexth"), kirbystdlibref.ensureTest((3 === [1, 2, 3][2]), "nth"), kirbystdlibref.ensureTest((!((0 === kirbystdlibref.modulo(2, 2)) && (0 === kirbystdlibref.modulo(3, 2)))), "not even?"), kirbystdlibref.ensureTest(((0 === kirbystdlibref.modulo(2, 2))), "even? a"), kirbystdlibref.ensureTest(((0 === kirbystdlibref.modulo(2, 2)) && (0 === kirbystdlibref.modulo(4, 2))), "even? a,b"), kirbystdlibref.ensureTest((!((!((0 === kirbystdlibref.modulo(2, 2)))) && (!((0 === kirbystdlibref.modulo(3, 2)))))), "not odd?"), kirbystdlibref.ensureTest(((!((0 === kirbystdlibref.modulo(3, 2))))), "odd? a"), kirbystdlibref.ensureTest(((!((0 === kirbystdlibref.modulo(3, 2)))) && (!((0 === kirbystdlibref.modulo(9, 2))))), "odd? a,b"), kirbystdlibref.ensureTest((3 === [1, 2, 3].length), "alen"), kirbystdlibref.ensureTest(([1, 2].length > 0), "nzlen?"), kirbystdlibref.ensureTest(([].length === 0), "zlen?"), kirbystdlibref.ensureTest(("string" === typeof ("hello")), "type"), kirbystdlibref.ensureTest(("[object Array]" === Object.prototype.toString.call([3])), "whatis?"), kirbystdlibref.ensureTest(((Object.prototype.toString.call(/^hello/) === "[object RegExp]")), "regex?"), kirbystdlibref.ensureTest((Array.isArray([]) && Array.isArray([1]) && Array.isArray(["2"])), "array?"), kirbystdlibref.ensureTest((Array.isArray([]) && Array.isArray([1]) && Array.isArray(["2"])), "arr?"), kirbystdlibref.ensureTest(((Object.prototype.toString.call(new Date()) === "[object Date]")), "date?"), kirbystdlibref.ensureTest(((typeof (true) === "boolean") && (typeof (false) === "boolean")), "boolean?"), kirbystdlibref.ensureTest(((typeof (true) === "boolean") && (typeof (false) === "boolean")), "bool?"), kirbystdlibref.ensureTest(((typeof (4) === "number") && (typeof (8) === "number")), "number?"), kirbystdlibref.ensureTest(((typeof (4) === "number") && (typeof (8) === "number")), "num?"), kirbystdlibref.ensureTest(((typeof ("a") === "string") && (typeof ("b") === "string")), "string?"), kirbystdlibref.ensureTest(((typeof ("a") === "string") && (typeof ("b") === "string")), "str?"), kirbystdlibref.ensureTest(((typeof (function() {
      return null;
    }) === "function")), "fn?"), kirbystdlibref.ensureTest((function() {
    (
    TMPVAR = undefined);
    return ((typeof (TMPVAR) === "undefined"));
  }).call(this), "undef?"), kirbystdlibref.ensureTest((function() {
    (
    TMPVAR = 3);
    return ((typeof (TMPVAR) !== "undefined"));
  }).call(this), "def?"), kirbystdlibref.ensureTest(((null === null)), "nil?"), kirbystdlibref.ensureTest(((0 === 0)), "zero?"), kirbystdlibref.ensureTest(((1 === 1)), "one?"), kirbystdlibref.ensureTest(((-33 < 0)), "neg?"), kirbystdlibref.ensureTest(((45 > 0)), "pos?"), kirbystdlibref.ensureTest((1 === kirbystdlibref.getProp(Array.from((new Map([["a", 1]])).values()), 0)), "values"), kirbystdlibref.ensureTest(("a" === kirbystdlibref.getProp(Array.from((new Map([["a", 1]])).keys()), 0)), "keys"), kirbystdlibref.ensureTest((function() {
    let GS__2 = [3, 4];
    let a = kirbystdlibref.getIndex(GS__2, 0);
    let b = kirbystdlibref.getIndex(GS__2, 1);
    return ((3 === a) && (4 === b));
  }).call(this), "destruct vec"), kirbystdlibref.ensureTest((function() {
    let GS__3 = [3, 4, [5, 6]];
    let a = kirbystdlibref.getIndex(GS__3, 0);
    let b = kirbystdlibref.getIndex(GS__3, 1);
    let GS__4 = GS__3[2];
    let c = kirbystdlibref.getIndex(GS__4, 0);
    let d = kirbystdlibref.getIndex(GS__4, 1);
    return ((5 === c) && (6 === d));
  }).call(this), "destruct vec,2"), kirbystdlibref.ensureTest((function() {
    let GS__5 = {
      a: 3,
      b: 4
    };
    let a = kirbystdlibref.getProp(GS__5, "a");
    let b = kirbystdlibref.getProp(GS__5, "b");
    return ((3 === a) && (4 === b));
  }).call(this), "destruct obj"), kirbystdlibref.ensureTest((function() {
    let GS__6 = (new Map([["a", 3], ["b", 4]]));
    let a = kirbystdlibref.getProp(GS__6, "a");
    let b = kirbystdlibref.getProp(GS__6, "b");
    return ((3 === a) && (4 === b));
  }).call(this), "destruct map"), kirbystdlibref.ensureTest(s.eq_QMRK([1, 2, 3, 4, 5], (function(a, GS__7, GS__8) {
    let b = kirbystdlibref.getIndex(GS__7, 0);
    let c = kirbystdlibref.getIndex(GS__7, 1);
    let d = kirbystdlibref.getProp(GS__8, "d");
    let e = kirbystdlibref.getProp(GS__8, "e");
    return [a, b, c, d, e];
  })(1, [2, 3], {
    d: 4,
    e: 5
  })), "destruct fn args"), kirbystdlibref.ensureTest(((1 === 1) ?
    true :
    (function() {
      throw new Error("error!");
    }).call(this)), "assert"), kirbystdlibref.ensureTest((((1 === 0) === false)), "false?"), kirbystdlibref.ensureTest((((0 === 0) === true)), "true?"), kirbystdlibref.ensureTest(("hello" === ((!false) ?
      (function() {
        return "hello";
      }).call(this) :
      null)), "when-not"), kirbystdlibref.ensureTest(("hello" === ((!false) ?
      (function() {
        return "hello";
      }).call(this) :
      null)), "unless"), kirbystdlibref.ensureTest(("hello" === ((!(1 === 0)) ?
      "hello" :
      null)), "if-not"), kirbystdlibref.ensureTest(("hello" === ((!(1 === 1)) ?
      "boom" :
      "hello")), "if-not->else"), kirbystdlibref.ensureTest((10 === (function() {
      (
      TMPVAR = 0);
      for (let ____break = false; ((!____break) && (TMPVAR !== 10));) {
        ++TMPVAR;
      }
      return TMPVAR;
    }).call(this)), "while"), kirbystdlibref.ensureTest((101 === (true ?
      (function() {
        (
        TMPVAR = 100);
        return ++TMPVAR;
      }).call(this) :
      null)), "when"), kirbystdlibref.ensureTest(("b" === ((1 === 2) ?
      "a" :
      ((2 === 2) ?
        "b" :
        null))), "cond"), kirbystdlibref.ensureTest(("b" === ((1 === 2) ?
      "a" :
      (true ?
        "b" :
        null))), "cond->else"), kirbystdlibref.ensureTest((7 === (function() {
      let GS__9 = (1 + 2);
      return ((0 === GS__9) ?
        9 :
        (function() {
          let GS__10 = (3 === GS__9);
          let ____x = GS__10;
          return (GS__10 ?
            (function() {
              let ____args = Array.prototype.slice.call(arguments);
              return (____args[0] ?
                7 :
                5);
            })(____x) :
            (("a" === GS__9) ?
              3 :
              null));
        }).call(this));
    }).call(this)), "condp"), kirbystdlibref.ensureTest(("boom" === (function() {
      let GS__11 = (1 + 2);
      return ((0 === GS__11) ?
        9 :
        (function() {
          let GS__12 = (2 === GS__11);
          let ____x = GS__12;
          return (GS__12 ?
            (function() {
              let ____args = Array.prototype.slice.call(arguments);
              return (____args[0] ?
                7 :
                5);
            })(____x) :
            (("a" === GS__11) ?
              3 :
              (true ?
                "boom" :
                null)));
        }).call(this));
    }).call(this)), "condp->default"), kirbystdlibref.ensureTest((36 === (((1 + 2) * 3) * 4)), "->"), kirbystdlibref.ensureTest((8 === (4 + (12 / (1 + 2)))), "->>"), kirbystdlibref.ensureTest((3 === (function() {
      let a = 1;
      let b = 2;
      return (a + b);
    }).call(this)), "let"), kirbystdlibref.ensureTest((1 === kirbystdlibref.count([1])), "single?"), kirbystdlibref.ensureTest((2 === kirbystdlibref.count([1, 2])), "dual?"), kirbystdlibref.ensureTest((3 === kirbystdlibref.count([1, 2, 3])), "triple?"), kirbystdlibref.ensureTest((911 === (function() {
      let _x_ = null;
      let recur = null;
      let _f_ = function(a, b) {
        return ((a === b) ?
          911 :
          recur((a + 1), (b - 1)));
      };
      let _r_ = _f_;
      (recur = function() {
        (
        _x_ = arguments);
        if (_r_) {
          for (_r_ = undefined; _r_ === undefined;) {
            _r_ = _f_.apply(this, _x_);
          }
          return _r_;
        }
        return undefined;
      });
      return recur(0, 10);
    })(this)), "loop"), kirbystdlibref.ensureTest((4 === [1, 2].concat([3, 4]).length), "concat"), kirbystdlibref.ensureTest(("a,b" === ["a", "b"].join(",")), "join"), kirbystdlibref.ensureTest((3 === (function() {
      let a = (1 + 2);
      (a / 3);
      return a;
    }).call(this)), "do-with"), kirbystdlibref.ensureTest((false === (function() {
      (1 + 2);
      (1 === 1);
      return false;
    }).call(this)), "do->false"), kirbystdlibref.ensureTest((true === (function() {
      (1 + 2);
      (1 === 2);
      return true;
    }).call(this)), "do->true"), kirbystdlibref.ensureTest((null === (function() {
      (1 + 2);
      911;
      return null;
    }).call(this)), "do->nil"), kirbystdlibref.ensureTest((undefined === (function() {
      (1 + 2);
      911;
      return undefined;
    }).call(this)), "do->undef"), kirbystdlibref.ensureTest((4 === inc(3)), "inc"), kirbystdlibref.ensureTest((2 === dec(3)), "dec"), kirbystdlibref.ensureTest((45 === (function() {
      let outer = 0;
      for (let ____coll = null, x = 0, ____end = 10, ____break = false; ((!____break) && (x < ____end)); x = (x + 1)) {
        (
        outer += x);
      }
      return outer;
    }).call(this)), "dotimes"), kirbystdlibref.ensureTest((12 === kirbystdlibref.count((function() {
      let ret = [];
      for (let ____coll = null, i = 0, ____end = 12, ____break = false; ((!____break) && (i < ____end)); i = (i + 1)) {
        ret.push(i);
      }
      return ret;
    }).call(this))), "range,a"), kirbystdlibref.ensureTest((2 === kirbystdlibref.count((function() {
      let ret = [];
      for (let ____coll = null, i = 10, ____end = 12, ____break = false; ((!____break) && (i < ____end)); i = (i + 1)) {
        ret.push(i);
      }
      return ret;
    }).call(this))), "range,a,b"), kirbystdlibref.ensureTest((4 === kirbystdlibref.count((function() {
      let ret = [];
      for (let ____coll = null, i = 5, ____end = 12, ____break = false; ((!____break) && (i < ____end)); i = (i + 2)) {
        ret.push(i);
      }
      return ret;
    }).call(this))), "range,a,b,c"), kirbystdlibref.ensureTest((function() {
    (
    TMPVAR = (function() {
      let f = function(a, b) {
        return [b, a];
      };
      return f.apply(this, [1, 2]);
    }).call(this));
    return ((2 === TMPVAR[0]) && (1 === std.last(TMPVAR)));
  }).call(this), "apply"), kirbystdlibref.ensureTest((function() {
    (
    TMPVAR = (function() {
      let f = function(a, b) {
        return [b, a];
      };
      return f.apply(this, [1, 2]);
    }).call(this));
    return ((2 === TMPVAR[0]) && (1 === std.last(TMPVAR)));
  }).call(this), "apply+"), kirbystdlibref.ensureTest(("z" === "hellz".charAt(4)), "ch@"), kirbystdlibref.ensureTest((false === (function() {
      (
      TMPVAR = false);
      return TMPVAR;
    }).call(this)), "false!"), kirbystdlibref.ensureTest((true === (function() {
      (
      TMPVAR = true);
      return TMPVAR;
    }).call(this)), "true!"), kirbystdlibref.ensureTest((function() {
    let x = (function() {
      let ret = [];
      for (let ____coll = null, ____index = 0, ____end = 5, ____break = false; ((!____break) && (____index < ____end)); ____index = (____index + 1)) {
        ret.push("a");
      }
      return ret;
    }).call(this);
    return ((5 === kirbystdlibref.count(x)) && ("a" === std.last(x)));
  }).call(this), "repeat"), kirbystdlibref.ensureTest((28 === (function() {
      (
      TMPVAR = 0);
      for (let GS__15 = 0, GS__13 = true, GS__14 = (function() {
            let ret = [];
            for (let ____coll = null, i = 0, ____end = 10, ____break = false; ((!____break) && (i < ____end)); i = (i + 1)) {
              ret.push(i);
            }
            return ret;
          }).call(this), ____sz = kirbystdlibref.count(GS__14), ____break = false; (!____break && GS__13 && (GS__15 < ____sz)); ++GS__15) {
        let x = GS__14[GS__15];
        let y = inc(x);
        let z = y;
        if (!((x < 7))) {
          GS__13 = false;
          ____break = true;
        } else {
          (
          TMPVAR += z);
        }
      }
      return TMPVAR;
    }).call(this)), "doseq"), kirbystdlibref.ensureTest(s.eq_QMRK([[1, 3, 7], [1, 1, 7], [2, 3, 7], [2, 1, 7]], (function() {
    (
    TMPVAR = []);
    for (let GS__22 = 0, GS__16 = true, GS__21 = [1, 2], ____sz = kirbystdlibref.count(GS__21); (GS__16 && (GS__22 < ____sz)); ++GS__22) {
      let x = GS__21[GS__22];
      for (let GS__20 = 0, GS__19 = [3, 1], ____sz = kirbystdlibref.count(GS__19); (GS__16 && (GS__20 < ____sz)); ++GS__20) {
        let y = GS__19[GS__20];
        for (let GS__18 = 0, GS__17 = [7], ____sz = kirbystdlibref.count(GS__17), ____break = false; (!____break && GS__16 && (GS__18 < ____sz)); ++GS__18) {
          let z = GS__17[GS__18];
          conj_BANG(TMPVAR, [x, y, z]);
        }
      }
    }
    return TMPVAR;
  }).call(this)), "doseq, 3 levels"), kirbystdlibref.ensureTest(s.eq_QMRK([[1, 3, 7], [1, 1, 7], [2, 3, 7], [2, 1, 7]], (function() {
    let GS__23 = [];
    for (let GS__30 = 0, GS__24 = true, GS__29 = [1, 2], ____sz = kirbystdlibref.count(GS__29); (GS__24 && (GS__30 < ____sz)); ++GS__30) {
      let x = GS__29[GS__30];
      for (let GS__28 = 0, GS__27 = [3, 1], ____sz = kirbystdlibref.count(GS__27); (GS__24 && (GS__28 < ____sz)); ++GS__28) {
        let y = GS__27[GS__28];
        for (let GS__26 = 0, GS__25 = [7], ____sz = kirbystdlibref.count(GS__25), ____break = false; (!____break && GS__24 && (GS__26 < ____sz)); ++GS__26) {
          let z = GS__25[GS__26];
          GS__23.push((function() {
            return [x, y, z];
          }).call(this));
        }
      }
    }
    return GS__23;
  }).call(this)), "for"), kirbystdlibref.ensureTest(("hello!" === (function() {
      let GS__31 = "hello".slice(0);
      let s = GS__31;
      return ((kirbystdlibref.count(GS__31) > 0) ?
        [s, "!"].join("") :
        null);
    }).call(this)), "if-some+"), kirbystdlibref.ensureTest(("ab" === (function() {
      let GS__32 = "hello".slice(5);
      let s = GS__32;
      return ((kirbystdlibref.count(GS__32) > 0) ?
        [s, "!"].join("") :
        ["ab"].join(""));
    }).call(this)), "if-some+->else"), kirbystdlibref.ensureTest((10 === (function() {
      let GS__33 = (1 + 2);
      let a = GS__33;
      return ((((typeof (GS__33) === "undefined")) || ((GS__33 === null))) ?
        null :
        (a + 7));
    }).call(this)), "if-some"), kirbystdlibref.ensureTest((17 === (function() {
      let GS__34 = null;
      let a = GS__34;
      return ((((typeof (GS__34) === "undefined")) || ((GS__34 === null))) ?
        (7 + 10) :
        (a + a));
    }).call(this)), "if-some->else"), kirbystdlibref.ensureTest((7 === (function() {
      let GS__35 = (1 === 1);
      let a = GS__35;
      return (GS__35 ?
        (3 + 4) :
        null);
    }).call(this)), "if-let"), kirbystdlibref.ensureTest((15 === (function() {
      let GS__36 = (1 === 2);
      let a = GS__36;
      return (GS__36 ?
        (3 + 4) :
        (7 + 8));
    }).call(this)), "if-let->else"), kirbystdlibref.ensureTest(("hello" === (function() {
      let GS__37 = "hello".slice(2);
      let s = GS__37;
      return ((kirbystdlibref.count(GS__37) > 0) ?
        (function() {
          kirbystdlibref.count(s);
          return ["he", s].join("");
        }).call(this) :
        null);
    }).call(this)), "when-some+"), kirbystdlibref.ensureTest(("hehello" === (function() {
      let GS__38 = "hello";
      let s = GS__38;
      return ((!(((typeof (GS__38) === "undefined")) || ((GS__38 === null)))) ?
        (function() {
          kirbystdlibref.count(s);
          return ["he", s].join("");
        }).call(this) :
        null);
    }).call(this)), "when-some"), kirbystdlibref.ensureTest((7 === (function() {
      let GS__39 = (1 === 1);
      let a = GS__39;
      return (GS__39 ?
        (function() {
          (2 + 2);
          return (3 + 4);
        }).call(this) :
        null);
    }).call(this)), "when-let"), kirbystdlibref.ensureTest(s.eq_QMRK((new Set([1, 2])), (function() {
    let GS__40 = (new Set([1]));
    std.conj_BANG(GS__40, 2);
    return GS__40;
  }).call(this)), "conj!,set"), kirbystdlibref.ensureTest((2 === kirbystdlibref.count((function() {
      let GS__41 = [];
      std.conj_BANG(GS__41, 1);
      std.conj_BANG(GS__41, 2);
      return GS__41;
    }).call(this))), "doto,conj!"), kirbystdlibref.ensureTest(s.eq_QMRK((new Set([1])), (function() {
    let GS__42 = (new Set([1, 2, 3]));
    std.disj_BANG(GS__42, 2, 3);
    return GS__42;
  }).call(this)), "disj!,set"), kirbystdlibref.ensureTest((2 === ([1, 2] || []).map(function() {
      let ____args = Array.prototype.slice.call(arguments);
      return inc(____args[0]);
    })[0]), "map"), kirbystdlibref.ensureTest((2 === kirbystdlibref.count(([1, 2, 8] || []).filter(function() {
      let ____args = Array.prototype.slice.call(arguments);
      return ((0 === kirbystdlibref.modulo(____args[0], 2)));
    }))), "filter"), kirbystdlibref.ensureTest((true === ([1, 2, 8] || []).some(function() {
      let ____args = Array.prototype.slice.call(arguments);
      return ((!((0 === kirbystdlibref.modulo(____args[0], 2)))));
    })), "some"), kirbystdlibref.ensureTest((function() {
    let x = Array.prototype.slice.call([1, 2, 3, 4, 5], 0, 3);
    return ((3 === kirbystdlibref.count(x)) && (3 === std.last(x)));
  }).call(this), "take"), kirbystdlibref.ensureTest((21 === (function() {
      let f = function() {
        let xs = Array.prototype.slice.call(arguments, 0);
        return 21;
      };
      return f(1, 4, 5);
    }).call(this)), "constantly"), kirbystdlibref.ensureTest((function() {
    let x = Array.prototype.slice.call([1, 2, 3, 4, 5], 3);
    return ((2 === kirbystdlibref.count(x)) && (5 === std.last(x)));
  }).call(this), "drop"), kirbystdlibref.ensureTest((21 === ([5, 7, 9] || []).reduce(function(acc, x) {
      return (acc + x);
    })), "reduce2"), kirbystdlibref.ensureTest((31 === ([5, 7, 9] || []).reduce(function(acc, x) {
      return (acc + x);
    }, 10)), "reduce"), kirbystdlibref.ensureTest(("ab" === ["a", "b"].join("")), "str"), kirbystdlibref.ensureTest((20 === (function() {
      let f = function() {
        let ____args = Array.prototype.slice.call(arguments);
        return (____args[0] + 7);
      };
      return f(13);
    }).call(this)), "lambda"), kirbystdlibref.ensureTest((6 === (function() {
      (
      TMPVAR = 0);
      [1, 2, 3].forEach(function() {
        let ____args = Array.prototype.slice.call(arguments);
        return (TMPVAR += ____args[0]);
      });
      return TMPVAR;
    }).call(this)), "each"), kirbystdlibref.ensureTest((6 === (function() {
      (
      TMPVAR = 0);
      let GS__43 = (new Map([["a", 1], ["b", 2], ["c", 3]]));
      let GS__44 = function() {
        let ____args = Array.prototype.slice.call(arguments);
        return (TMPVAR += ____args[0]);
      };
      if (kirbystdlibref.object_QMRK(GS__43)) {
        let GS__45 = GS__43;
        Object.keys(GS__45).forEach(function(p) {
          return GS__44(kirbystdlibref.getProp(GS__45, p), p);
        });
      } else {
        GS__43.forEach(GS__44);
      }
      return TMPVAR;
    }).call(this)), "each-key"), kirbystdlibref.ensureTest(s.not_DASH_empty([2]), "not-empty"), kirbystdlibref.ensureTest((2 === s.opt_QMRK__QMRK(undefined, 2)), "opt??"), kirbystdlibref.ensureTest((function() {
    let a = [1];
    let b = s.conj(a, 2, 3);
    return ((1 === kirbystdlibref.count(a)) && (3 === kirbystdlibref.count(b)) && (3 === s.last(b)));
  }).call(this), "conj"), kirbystdlibref.ensureTest((function() {
    let c = [9, 8, 7];
    let GS__46 = s.pop_BANG(c);
    let a = kirbystdlibref.getIndex(GS__46, 0);
    let b = kirbystdlibref.getIndex(GS__46, 1);
    return ((7 === a) && (2 === kirbystdlibref.count(c)));
  }).call(this), "pop!"), kirbystdlibref.ensureTest((function() {
    let c = [9, 8, 7];
    let GS__47 = s.pop(c);
    let a = kirbystdlibref.getIndex(GS__47, 0);
    let b = kirbystdlibref.getIndex(GS__47, 1);
    return ((7 === a) && (3 === kirbystdlibref.count(c)));
  }).call(this), "pop"), kirbystdlibref.ensureTest(("xaaaz" === s.wrap_DASH_str("aaa", "x", "z")), "wrap-str"), kirbystdlibref.ensureTest(((typeof (s.getProp((new Map([["a", 1], ["z", 5]])), "x")) === "undefined")), "getProp,false"), kirbystdlibref.ensureTest((5 === s.getProp((new Map([["a", 1], ["z", 5]])), "z")), "getProp,true"), kirbystdlibref.ensureTest(((typeof (s.getProp({
      "a": 1,
      "z": 5
    }, "toString", false)) === "function")), "getProp,false"), kirbystdlibref.ensureTest(("(1 2 3)" === s.prn([1, 2, 3])), "prn"), kirbystdlibref.ensureTest((function() {
    let p = s.primitive(2);
    let v = p.value;
    return (s.primitive_QMRK(p) && (v === 2));
  }).call(this), "primitive,primitive?"), kirbystdlibref.ensureTest((function() {
    let a = s.lambdaArg("%9");
    let v = a.value;
    return (s.lambdaArg_QMRK(a) && (v === "%9"));
  }).call(this), "lambda-arg,lambda-arg?"), kirbystdlibref.ensureTest((function() {
    let a = s.lambdaArg("%");
    let v = a.value;
    return (s.lambdaArg_QMRK(a) && (v === "%1"));
  }).call(this), "lambda-arg,%,lambda-arg?"), kirbystdlibref.ensureTest((function() {
    let k = s.keyword(":hello");
    let v = k.value;
    return (s.keyword_QMRK(k) && (v === ":hello"));
  }).call(this), "keyword,keyword?"), kirbystdlibref.ensureTest((function() {
    let k = s.keyword("::hello");
    let v = [k].join("");
    return (s.keyword_QMRK(k) && v.endsWith("/hello"));
  }).call(this), "scoped,keyword,keyword?"), kirbystdlibref.ensureTest((function() {
    let s = std.symbol("hello");
    let v = s.value;
    return (std.symbol_QMRK(s) && (v === "hello"));
  }).call(this), "symbol,symbol?"), kirbystdlibref.ensureTest((function() {
    let a = s.atom("hello");
    let w = a.value;
    let v = a.value;
    return (s.atom_QMRK(a) && (w === v) && (v === "hello"));
  }).call(this), "atom,atom?,deref"), kirbystdlibref.ensureTest(s.symbol_QMRK(s.keyword_DASH__GT_symbol(s.keyword(":pooh"))), "keyword->symbol"), kirbystdlibref.ensureTest((8 === (function() {
      let a = s.atom(3);
      s.reset_BANG(a, 8);
      return a.value;
    }).call(this)), "reset!"), kirbystdlibref.ensureTest((8 === (function() {
      let a = s.atom(3);
      s.swap_BANG(a, function(old, more) {
        return (old + more);
      }, 5);
      return a.value;
    }).call(this)), "swap!"), kirbystdlibref.ensureTest(("atom" === s.typeid(s.atom(2))), "typeid"), kirbystdlibref.ensureTest((s.complex_QMRK([1]) && s.complex_QMRK((new Map([["a", 1]])))), "complex?"), kirbystdlibref.ensureTest((((s.complex_QMRK(2) === false)) && ((s.complex_QMRK("a") === false))), "not complex?"), kirbystdlibref.ensureTest((s.simple_QMRK(1) && s.simple_QMRK(null)), "simple?"), kirbystdlibref.ensureTest((((s.simple_QMRK([]) === false)) && ((s.simple_QMRK((new Map([]))) === false))), "not simple?"), kirbystdlibref.ensureTest((s.value_QMRK(3) && (!s.value_QMRK(function() {
      return null;
    }))), "value?"), kirbystdlibref.ensureTest(s.sequential_QMRK([1, 2, 3]), "sequential?"), kirbystdlibref.ensureTest(s.eq_QMRK([1, 2], [1, 2]), "eq? -> array"), kirbystdlibref.ensureTest(s.eq_QMRK({
    "a": 1,
    "b": 2
  }, {
    "b": 2,
    "a": 1
  }), "eq? -> object"), kirbystdlibref.ensureTest((!s.object_QMRK(1)), "not object?"), kirbystdlibref.ensureTest(s.object_QMRK({
    "a": 1
  }), "object?"), kirbystdlibref.ensureTest((3 === s.last([1, 2, 3])), "last"), kirbystdlibref.ensureTest(s.list_QMRK(s.into_BANG("list", [1, 2, 3])), "into!"), kirbystdlibref.ensureTest((function() {
    let x = s.list(1, 2, 3);
    let y = s.into("list", x);
    s.conj_BANG(x, 4);
    return ((4 === kirbystdlibref.count(x)) && (3 === kirbystdlibref.count(y)) && s.list_QMRK(y));
  }).call(this), "into"), kirbystdlibref.ensureTest(s.pairs_QMRK([1, 2, 3]), null), kirbystdlibref.ensureTest(s.list_QMRK(s.list(1, 2, 3)), "list,list?"), kirbystdlibref.ensureTest(s.vector_QMRK(s.vector(1, 2, 3)), "vector,vector?"), kirbystdlibref.ensureTest(s.map_QMRK(s.arraymap("a", 1, "b", 2, "c", 3)), "arraymap,map?"), kirbystdlibref.ensureTest(s.object_QMRK(s.object("a", 1, "b", 2, "c", 3)), "object,object?"), kirbystdlibref.ensureTest((3 === kirbystdlibref.count(s.seq("abc"))), "seq"), kirbystdlibref.ensureTest(s.contains_QMRK([1, 2, 3], 2), "contains?"), kirbystdlibref.ensureTest((s.nichts_QMRK(null) && s.nichts_QMRK(undefined)), "nichts?"), kirbystdlibref.ensureTest(s.some_QMRK(false), "some?"), kirbystdlibref.ensureTest((3 === s.count([1, 2, 3])), "count"), kirbystdlibref.ensureTest((4 === kirbystdlibref.count(s.concat_STAR([1, 2], 3, 4))), "concat*"), kirbystdlibref.ensureTest((3 === s.last(s.evens([1, 2, 3, 4]))), "evens"), kirbystdlibref.ensureTest((4 === s.last(s.odds([1, 2, 3, 4]))), "odds"), kirbystdlibref.ensureTest(((1 === s.modulo(10, 3)) && (2 === s.modulo(-10, 3))), "modulo"), kirbystdlibref.ensureTest(s.eq_QMRK([1, 5, 2, 6], s.interleave([1, 2, 3], [5, 6])), "interleave"), kirbystdlibref.ensureTest(s.eq_QMRK([5, 1, 6, 2], s.interleave([5, 6], [1, 2, 3])), "interleave"), kirbystdlibref.ensureTest(s.eq_QMRK((new Map([["a", 1], ["b", 2]])), s.zipmap(["a", "b"], [1, 2, 3])), "zipmap"), kirbystdlibref.ensureTest(s.eq_QMRK((new Map([["a", 5], ["b", 6]])), s.zipmap(["a", "b", "c"], [5, 6])), "zipmap"), kirbystdlibref.ensureTest((function() {
    let g = s.gensym("X");
    return (s.symbol_QMRK(g) && g.value.startsWith("X"));
  }).call(this), "gensym"), kirbystdlibref.ensureTest((1 === kirbystdlibref.getProp(s.carve([1, 2], 0, -1), 0)), "carve,a,b"), kirbystdlibref.ensureTest((2 === kirbystdlibref.getProp(s.carve([1, 2], 1), 0)), "carve,a"), kirbystdlibref.ensureTest(s.eq_QMRK((new Map([["a", 1], ["b", 2]])), s.assoc_BANG((new Map([])), "a", 1, "b", 2)), "assoc!"), kirbystdlibref.ensureTest(s.eq_QMRK((new Map([["c", 3]])), s.dissoc_BANG((new Map([["a", 1], ["b", 2], ["c", 3]])), "a", "b")), "dissoc!"), kirbystdlibref.ensureTest((s.falsy_QMRK(false) && s.falsy_QMRK(null)), "falsy?"), kirbystdlibref.ensureTest(((!s.truthy_QMRK(null)) && (!s.truthy_QMRK(false))), "truthy?"), kirbystdlibref.ensureTest((function() {
    let x = s.quote_DASH_str("abc");
    return (x.startsWith("\"") && x.endsWith("\""));
  }).call(this), "quote-str"), kirbystdlibref.ensureTest(("abc" === s.unquote_DASH_str("\"abc\"")), "unquote-str"), kirbystdlibref.ensureTest(("&lt;&gt;&amp;&quot;&apos;" === s.escXml("<>&\"'")), "escXml"), kirbystdlibref.ensureTest((function() {
    let GS__48 = s.split_DASH_seq([1, 2, 3, 4, 5], 3);
    let x = kirbystdlibref.getIndex(GS__48, 0);
    let y = kirbystdlibref.getIndex(GS__48, 1);
    return (s.eq_QMRK([1, 2, 3], x) && s.eq_QMRK([4, 5], y));
  }).call(this), "split-seq"), kirbystdlibref.ensureTest(s.eq_QMRK((new Map([["a", 1], ["c", 3]])), s.select_DASH_keys((new Map([["a", 1], ["b", 2], ["c", 3]])), ["a", "c"])), "select-keys"), kirbystdlibref.ensureTest(s.eq_QMRK((new Map([["a",(new Map([["b",(new Map([["c", 9]]))]]))]])), s.update_DASH_in_BANG((new Map([["a",(new Map([["b",(new Map([["c", 4]]))]]))]])), ["a", "b", "c"], function(old, n) {
    return (old + n);
  }, 5)), "update-in"), kirbystdlibref.ensureTest((4 === s.get_DASH_in((new Map([["a", [2, 4,(new Map([["c", 4]]))]]])), ["a", 2, "c"])), "get-in"), kirbystdlibref.ensureTest(s.eq_QMRK([7, 7, 7], s.fillArray(3, 7)), "fillArray,value"), kirbystdlibref.ensureTest(s.eq_QMRK([0, 1, 2], s.fillArray(3, function() {
    let ____args = Array.prototype.slice.call(arguments);
    return ____args[0];
  })), "fillArray,function"), kirbystdlibref.ensureTest(s.eq_QMRK([3, 4], s.copyArray([3, 4, 5, 7], [0, 0])), "copyArray,value"), kirbystdlibref.ensureTest(s.eq_QMRK([2, 5, 7, 6], s.copyArray([2, 5, 7], [3, 4, 9, 6])), "copyArray,value"), kirbystdlibref.ensureTest(s.eq_QMRK({
    "a": 1,
    "b": 7,
    "c": "gg",
    "d": 7
  }, (function() {
    let a = {
      "a": 1,
      "b": 2,
      "c": "ss"
    };
    let b = {
      "b": 7,
      "c": "gg",
      "d": 7
    };
    return s.mixin(a, b);
  }).call(this)), "mixin"), kirbystdlibref.ensureTest(s.eq_QMRK((new Map([["a", 1], ["b", 2]])), s.merge((new Map([["a", 1]])), (new Map([["b", 2]])))), "merge"), kirbystdlibref.ensureTest(s.eq_QMRK([1, 2, 4], s.difference([1, 2, 3, 4, 5], [3, 5])), "difference"), kirbystdlibref.ensureTest((50 === s.percent(20, 40)), "percent"), kirbystdlibref.ensureTest(("3.333" === s.toFixed((10 / 3), 3)), "toFixed"), kirbystdlibref.ensureTest(s.eq_QMRK(["aa", "bb", "cc", "dd", "ee", "ff"], s.mapcat(function() {
    let ____args = Array.prototype.slice.call(arguments);
    return ____args[0].split(/\d/);
  }, ["aa1bb", "cc2dd", "ee3ff"])), "mapcat"), kirbystdlibref.ensureTest(s.eq_QMRK([4, 5], (function() {
    let ret = [],
      ____args = Array.prototype.slice.call(arguments);
    let F__49 = function(a) {
      return (1 + a);
    };
    ret.push(F__49.apply(this, ____args));
    let F__50 = function(b) {
      return (2 + b);
    };
    ret.push(F__50.apply(this, ____args));
    return ret;
  })(3)), "juxt"), kirbystdlibref.ensureTest((14 === (function() {
      let ____args = Array.prototype.slice.call(arguments);
      let F__51 = function(b, c) {
        return (b + c);
      };
      let R__52 = F__51.apply(this, ____args);
      let F__53 = function(a) {
        return (1 + a);
      };
      let R__54 = F__53(R__52);
      return R__54;
    })(3, 10)), "comp"), kirbystdlibref.ensureTest(s.eq_QMRK([1, 2, "3"], [1, 2, "3"]), "quote"), kirbystdlibref.ensureTest((3 === ([2, 4, 8, 3, 6, 7] || []).find(function() {
      let ____args = Array.prototype.slice.call(arguments);
      return ((!((0 === kirbystdlibref.modulo(____args[0], 2)))));
    })), "find"), kirbystdlibref.ensureTest(s.eq_QMRK([2, 3, 4, 9], s.sort_BANG([3, 9, 4, 2])), "simple sort!"), kirbystdlibref.ensureTest(s.eq_QMRK([{
    "a": 2
  }, {
    "a": 3
  }, {
    "a": 4
  }, {
    "a": 9
  }], s.sort_BANG(function(x, y) {
    return ((x.a < y.a) ?
      -1 :
      ((x.a > y.a) ?
        1 :
        0));
  }, [{
    "a": 3
  }, {
    "a": 9
  }, {
    "a": 4
  }, {
    "a": 2
  }])), "object sort!"), kirbystdlibref.ensureTest(s.eq_QMRK([[1, 2, 3], [4, 5, 6], [7, 8]], s.partition(3, [1, 2, 3, 4, 5, 6, 7, 8])), "partition"), kirbystdlibref.ensureTest(s.eq_QMRK(["123", "456", "78"], s.split_DASH_str(3, "12345678")), "split-str"), kirbystdlibref.ensureTest((function() {
    let obj = (new Set([1, 2, 3]));
    return (((Object.prototype.toString.call(obj) === "[object Set]")) && (3 === kirbystdlibref.count(obj)));
  }).call(this), "object,Set"), kirbystdlibref.ensureTest((function() {
    let obj = (new Map([["a", 1], ["b", 2]]));
    return (((Object.prototype.toString.call(obj) === "[object Map]")) && (2 === kirbystdlibref.count(obj)) && (1 === obj.get("a")) && (2 === obj.get("b")));
  }).call(this), "object,Map"), kirbystdlibref.ensureTest((698 === s.maxBy(s.identity, [78, 7, 698, 4, 5, 2, -1])), "maxBy"), kirbystdlibref.ensureTest((-1 === s.minBy(s.identity, [78, 7, 6, 4, 5, 2, -1])), "minBy"), kirbystdlibref.ensureTest(s.eq_QMRK([-2, -1], take_DASH_while(function() {
    let ____args = Array.prototype.slice.call(arguments);
    return (____args[0] < 0);
  }, [-2, -1, 0, 1, 2, 3])), "take-while"), kirbystdlibref.ensureTest(s.eq_QMRK([], take_DASH_while(function() {
    let ____args = Array.prototype.slice.call(arguments);
    return (____args[0] < 0);
  }, [0, 1, 2, 3])), "take-while"), kirbystdlibref.ensureTest(s.eq_QMRK([3, 4, 5, 6], drop_DASH_while(function() {
    let ____args = Array.prototype.slice.call(arguments);
    return (3 > ____args[0]);
  }, [1, 2, 3, 4, 5, 6])), "drop-while"), kirbystdlibref.ensureTest(s.eq_QMRK([4, 5, 6], drop_DASH_while(function() {
    let ____args = Array.prototype.slice.call(arguments);
    return (3 >= ____args[0]);
  }, [1, 2, 3, 4, 5, 6])), "drop-while"), kirbystdlibref.ensureTest(s.eq_QMRK([[1, 2, 3], [4, 5]], split_DASH_with(function() {
    let ____args = Array.prototype.slice.call(arguments);
    return (3 >= ____args[0]);
  }, [1, 2, 3, 4, 5])), "split-with"), kirbystdlibref.ensureTest(s.eq_QMRK([[1, 2], [3, 2, 1]], split_DASH_with(function() {
    let ____args = Array.prototype.slice.call(arguments);
    return (3 > ____args[0]);
  }, [1, 2, 3, 2, 1])), "split-with"), kirbystdlibref.ensureTest(s.eq_QMRK([[1, 2, 3, 2, 1], []], split_DASH_with(function() {
    let ____args = Array.prototype.slice.call(arguments);
    return (10 > ____args[0]);
  }, [1, 2, 3, 2, 1])), "split-with"), kirbystdlibref.ensureTest(s.eq_QMRK([5, 3, 1], rseq([1, 3, 5])), "rseq,reverse"), kirbystdlibref.ensureTest((3 === (function(mo) {
      let bind = kirbystdlibref.getProp(mo, "bind");
      let unit = kirbystdlibref.getProp(mo, "unit");
      let zero = kirbystdlibref.getProp(mo, "zero");
      let ret = function() {
        let ____args = Array.prototype.slice.call(arguments);
        return ((kirbystdlibref.nichts_QMRK(____args[0]) && ((typeof (zero) !== "undefined"))) ?
          zero :
          unit(____args[0]));
      };
      return bind(1, function(a) {
        return bind(inc(a), function(b) {
          return (function() {
            return ret((a + b));
          }).call(this);
        });
      });
    })(s.m_DASH_identity)), "identity monad"), (function() {
    try {
      (function(mo) {
        let bind = kirbystdlibref.getProp(mo, "bind");
        let unit = kirbystdlibref.getProp(mo, "unit");
        let zero = kirbystdlibref.getProp(mo, "zero");
        let ret = function() {
          let ____args = Array.prototype.slice.call(arguments);
          return ((kirbystdlibref.nichts_QMRK(____args[0]) && ((typeof (zero) !== "undefined"))) ?
            zero :
            unit(____args[0]));
        };
        return bind(null, function(a) {
          return bind(a, function(b) {
            return bind(b.toString(), function(c) {
              return (function() {
                return ret((a + b + c));
              }).call(this);
            });
          });
        });
      })(s.m_DASH_identity);
      return kirbystdlibref.ensureTestThrown("any", null, "identity monad->boom");
    } catch (e) {
      return kirbystdlibref.ensureTestThrown("any", e, "identity monad->boom");
    }
  }).call(this), kirbystdlibref.ensureTest((3 === (function(mo) {
      let bind = kirbystdlibref.getProp(mo, "bind");
      let unit = kirbystdlibref.getProp(mo, "unit");
      let zero = kirbystdlibref.getProp(mo, "zero");
      let ret = function() {
        let ____args = Array.prototype.slice.call(arguments);
        return ((kirbystdlibref.nichts_QMRK(____args[0]) && ((typeof (zero) !== "undefined"))) ?
          zero :
          unit(____args[0]));
      };
      return bind(1, function(a) {
        return bind(inc(a), function(b) {
          return (function() {
            return ret((a + b));
          }).call(this);
        });
      });
    })(s.m_DASH_maybe)), "maybe monad"), kirbystdlibref.ensureTest((((function(mo) {
      let bind = kirbystdlibref.getProp(mo, "bind");
      let unit = kirbystdlibref.getProp(mo, "unit");
      let zero = kirbystdlibref.getProp(mo, "zero");
      let ret = function() {
        let ____args = Array.prototype.slice.call(arguments);
        return ((kirbystdlibref.nichts_QMRK(____args[0]) && ((typeof (zero) !== "undefined"))) ?
          zero :
          unit(____args[0]));
      };
      return bind(1, function(a) {
        return bind(inc(a), function(b) {
          return bind(null, function(c) {
            return (function() {
              return ret((a + b + c));
            }).call(this);
          });
        });
      });
    })(s.m_DASH_maybe) === null)), "maybe monad->nil"), kirbystdlibref.ensureTest(s.eq_QMRK([5, {
    "value": 5,
    "log": ["mult3(1)", "add2(3)"]
  }], (function(mo) {
    let bind = kirbystdlibref.getProp(mo, "bind");
    let unit = kirbystdlibref.getProp(mo, "unit");
    let zero = kirbystdlibref.getProp(mo, "zero");
    let ret = function() {
      let ____args = Array.prototype.slice.call(arguments);
      return ((kirbystdlibref.nichts_QMRK(____args[0]) && ((typeof (zero) !== "undefined"))) ?
        zero :
        unit(____args[0]));
    };
    return bind(exlog(mult3, "mult3"), function(c1) {
      return bind(exlog(add2, "add2"), function(c2) {
        return (function() {
          return ret(c2);
        }).call(this);
      });
    });
  })(s.m_DASH_state)({
    "value": 1,
    "log": []
  })), "state monad"), kirbystdlibref.ensureTest((3 === std.run_DASH_cont((function(mo) {
      let bind = kirbystdlibref.getProp(mo, "bind");
      let unit = kirbystdlibref.getProp(mo, "unit");
      let zero = kirbystdlibref.getProp(mo, "zero");
      let ret = function() {
        let ____args = Array.prototype.slice.call(arguments);
        return ((kirbystdlibref.nichts_QMRK(____args[0]) && ((typeof (zero) !== "undefined"))) ?
          zero :
          unit(____args[0]));
      };
      return bind((function(v) {
        return function(c) {
          return c(v);
        };
      })(1), function(x) {
        return bind((function(v) {
          return function(c) {
            return c(v);
          };
        })(2), function(y) {
          return (function() {
            return ret((x + y));
          }).call(this);
        });
      });
    })(std.m_DASH_continuation))), "continuation monad"), kirbystdlibref.ensureTest((function() {
    let f = function(v) {
      return function(s) {
        return [v, s];
      };
    };
    let lhs = s.m_DASH_state.bind(s.m_DASH_state.unit(911), f);
    let rhs = f(911);
    let lf = lhs("hello");
    let rt = rhs("hello");
    return ((lf[0] === rt[0]) && (s.last(lf) === s.last(rt)));
  }).call(this), "monad rule 1: bind(unit(x), f) ≡ f(x)"), kirbystdlibref.ensureTest((function() {
    let mv = function(s) {
      return [3, s];
    };
    let lhs = s.m_DASH_state.bind(mv, s.m_DASH_state.unit);
    let lf = lhs("hello");
    let rt = mv("hello");
    return ((lf[0] === rt[0]) && (s.last(lf) === s.last(rt)));
  }).call(this), "monad rule 2: bind(m, unit) ≡ m"), kirbystdlibref.ensureTest((function() {
    let f = function(v) {
      return function(s) {
        return [3, s];
      };
    };
    let g = function(v) {
      return function(s) {
        return [5, s];
      };
    };
    let bb = s.m_DASH_state.bind;
    let mv = function(s) {
      return [7, s];
    };
    let lhs = bb(bb(mv, f), g);
    let rhs = bb(mv, function(v) {
      return bb(f(v), g);
    });
    let lf = lhs("hello");
    let rt = rhs("hello");
    return ((lf[0] === rt[0]) && (s.last(lf) === s.last(rt)));
  }).call(this), ["monad rule 3:", " bind(bind(m, f), g)", " ≡ bind(m, v ⇒ bind(f(v), g))"].join("")), (function() {
    try {
      throw new Error(["hello", "world"].join(""));
      return kirbystdlibref.ensureTestThrown("object", null, "raise!");
    } catch (e) {
      return kirbystdlibref.ensureTestThrown("object", e, "raise!");
    }
  }).call(this), (function() {
    try {
      throw ["hello", "world"].join("");
      return kirbystdlibref.ensureTestThrown("string", null, "trap!");
    } catch (e) {
      return kirbystdlibref.ensureTestThrown("string", e, "trap!");
    }
  }).call(this), kirbystdlibref.ensureTest(("hello" === new Error("hello").message), "merror")];
};
s.println(std.runtest(test_DASH_stdlib, "Kirby stdlib test-suite"));
module.exports = {
  da57bc0172fb42438a11e6e8778f36fb: {
    ns: "czlab.kirby.test.stdlib",
    vars: ["test-stdlib"],
    macros: {}
  },
  test_DASH_stdlib: test_DASH_stdlib
};