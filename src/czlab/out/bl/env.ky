;; Copyright (c) 2013-2017, Kenneth Leung. All rights reserved.
;; The use and distribution terms for this software are covered by the
;; Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
;; which can be found in the file epl-v10.html at the root of this distribution.
;; By using this software in any fashion, you are agreeing to be bound by
;; the terms of this license.
;; You must not remove this notice, or any other, from this software.

(ns ^{:doc ""
      :author "Kenneth Leung"}

  czlab.kirby.bl.env

  (require ["./stdlib"
            :as std
            :refer [contains?
                    conj!
                    some?
                    count
                    last
                    pop!
                    opt??
                    vector
                    Symbol]]))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defmacro assertSymbol "" [k]
  `(if-not (inst? Symbol ~k)
     (raise! "env.xxx key must be a symbol")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(deftype LEXEnv [][nspaces []
                   data {} parent nil]
  "Lexical Environment"
  (constructor "Create and initialize
               a new env with these symbols,
               and optionally a parent env"
    [parent vars exprs]
    (if parent (set-in! this
                        :parent parent))
    (for [i 0 e nil ev nil
          sz (n# vars)
          :while (< i sz) :recur (+1 i)]
      (set! e (.@i vars)
            ev (.-value e))
      (cond
        (= ev "&")
        (do (set-in! this.data
                     $(.@+i vars)
                     (slice exprs i))
            (break-out-of-loop!))
        (ev.startsWith "&")
        (do (set-in! this.data
                     (rest ev)
                     (slice exprs i))
            (break-out-of-loop!))
        :else
        (set-in! this.data
                 ev (.@i exprs)))))

  (find "Find the env
        containing this symbol"
    [k]
    (assertSymbol k)
    (cond
      (contains? this.data k.value) this
      (some? this.parent) (.find this.parent k)))

  (set "Bind this symbol,
       value to this env"
    [k v]
    (assertSymbol k)
    (set-in! this.data k.value v) v)

  (get "Get value of
       this symbol"
    [k]
    (assertSymbol k)
    (var env (.find this k))
    (if-not env (raise! k.value " not found"))
    (get env.data k.value))

  (pushNSP "Add a namespace"
    [nsp]
    (conj! this.nspaces $(nsp)))

  (peekNSP "Returns the
           last added namespace"
    []
    (last this.nspaces))

  (popNSP "Return and remove
          the last added namespace"
    []
    (1st (pop! this.nspaces)))

  (firstNSP "Get the first
            added namespace"
    []
    (1st this.nspaces))

  (countNSPCache "Count n# of
                 added namespaces"
    []
    (n# this.nspaces))

  (resetNSPCache "Clear all namespaces"
    []
    (set-in! this :nspaces []) nil))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;EOF

