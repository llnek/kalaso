;; Copyright (c) 2013-2017, Kenneth Leung. All rights reserved.
;; The use and distribution terms for this software are covered by the
;; Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
;; which can be found in the file epl-v10.html at the root of this distribution.
;; By using this software in any fashion, you are agreeing to be bound by
;; the terms of this license.
;; You must not remove this notice, or any other, from this software.
(ns ^{:doc ""
      :author "Kenneth Leung"}
  czlab.kirby.engine
  (require ["readline" :as readline])
  (require ["fs" :as fs])
  (require ["./parser" :as parser]
           ["./stdlib"
            :as std
            :refer [pairs? stringify contains?
                    LambdaArg Keyword
                    not-empty object?
                    Symbol into! prn
                    Atom symbol swap!
                    atom vector vector?
                    list? map? some?
                    typeid sequential?
                    conj! count
                    last pop! opt??
                    keyword? symbol? seq]]))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- assertSymbol "" [k]
  (if-not (inst? Symbol k)
    (raise! "env.xxx key must be a symbol")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(deftype LEXEnv [][nspaces []
                   data {} parent nil]
  "Lexical Environment"
  (constructor "Create and initialize
               a new env with these symbols,
               and optionally a parent env"
    [parent vars exprs]
    (if parent (=>> this :parent parent))
    (for [i 0 e nil ev nil
          sz (n# vars)
          :while (< i sz) :recur (+1 i)]
      (=> e (.@i vars)
          ev (.-value e))
      (cond
        (= ev "&")
        (do (=>> this.data
                 $(.@+i vars) (slice exprs i))
            (break-out-of-loop!))
        (starts? ev "&")
        (do (=>> this.data
                 (rest ev) (slice exprs i))
            (break-out-of-loop!))
        :else
        (=>> this.data ev (.@i exprs)))))
  (find "Find the env
        containing this symbol"
    [k]
    (assertSymbol k)
    (cond
      (contains? this.data k.value) this
      (some? this.parent) (.find this.parent k)))
  (set "Bind this symbol,
       value to this env"
    [k v]
    (assertSymbol k)
    (=>> this.data k.value v) v)
  (get "Get value of
       this symbol"
    [k]
    (assertSymbol k)
    (var env (.find this k))
    ;(if-not env (raise! k.value " not found"))
    (if env (get env.data k.value) k.value))
  (pushNSP "Add a namespace"
    [nsp]
    (conj! this.nspaces $(nsp)))
  (peekNSP "Returns the
           last added namespace"
    []
    (last this.nspaces))
  (popNSP "Return and remove
          the last added namespace"
    []
    (1st (pop! this.nspaces)))
  (firstNSP "Get the first
            added namespace"
    []
    (1st this.nspaces))
  (countNSPCache "Count n# of
                 added namespaces"
    []
    (n# this.nspaces))
  (resetNSPCache "Clear all namespaces"
    []
    (=>> this :nspaces []) nil))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defmacro prnArr "" [arr] `(map #(prn %) ~arr))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn Function.prototype.clone "" []
  (var that this
       tmp #(apply that this ____args))
  (each-key
    (fn [v k] (=>> tmp k v)) that)
  tmp)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- prnStr
  "" [&xs] (join " " (prnArr xs)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- prnLn
  "" [&xs] (each #(println %) (prnArr xs)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- slurp
  "" [f] (fs/readFileSync f "utf-8"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- clone "" [obj]
  (var oid (typeid obj))
  (case oid
    (:vector :map :list)
    (into! oid (slice obj))
    :array
    (slice obj)
    :object
    (reduce
      (fn [acc en]
        (=>> acc (1st en) (last en)) acc)
      {}
      (seq obj))
    :function
    (obj.clone)
    ;else
    (raise! "clone of non-collection: " oid )))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- cons "" [a b] (concat [a] b))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- conj "" [arr &xs]
  (cond
    (list? arr)
    (into! :list
           (-> (xs.reverse)
               (concat arr)))
    (some? arr)
    (into! :vector
           (concat arr xs))
    :else arr))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- fapply "" [f &xs] (f.apply this xs))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- fmap "" [f arr] (map f arr))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(def- GLOBAL (if (undef? window) undefined  window))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- resolveJS "" [s]
  [(if (contains? s ".")
     (-> (.exec /^(.*)\.[^\.]*$/g s)
         (nth 1) (eval))
     GLOBAL)
   (eval s)])

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- filterJS "" [obj]
  (var s (stringify obj))
  (if (not-empty s) (JSON/parse s)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- withMeta "" [obj m]
  (var ret (clone obj))
  (=>> ret :____meta m) ret)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- meta "" [obj]
  (if-not (or (array? obj)
              (object? obj)
              (fn? obj))
    (raise! "can't get metadata from: " (typeid obj)))
  (get obj :____meta))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- evalJS "" [s]
  (filterJS (eval (s.toString))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- invokeJS "" [method &xs]
  (var [obj f] (resolveJS method))
  (filterJS (apply f obj xs)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(def- toolkit {

  "is-same?"  (fn [a b] (== a b))
  "is-nil?"  (fn [x] (nil? x))

  "obj-type*"  std/typeid
  "gensym*"  std/gensym
  "is-eq?"  std/eq?
  "is-some?"  std/some?

  "slice*"  (fn [arr & xs]
              (Array.prototype.slice.apply arr xs))

  "throw*"  (fn [&xs]
              (throw (new Error (.join xs ""))))

  "#f?"  (fn [x] (false? x))
  "#t?"  (fn [x] (true? x))
  "is-str?"  (fn [x] (string? x))

  "is-keyword?"  std/keyword?
  "is-symbol?"  std/symbol?
  "keyword*"  std/keyword
  "symbol*"  std/symbol

  "println*"  prnLn
  "prn*"  prnStr

  "slurp*"  slurp

  "<"   (fn [a b] (< a b))
  "<="  (fn [a b] (<= a b))
  ">"   (fn [a b] (> a b))
  ">="  (fn [a b] (>= a b))
  "+"   (fn [a b] (+ a b))
  "-"   (fn [a b] (- a b))
  "*"   (fn [a b] (* a b))
  "/"   (fn [a b] (div a b))

  "not=" (fn [a b] (not= a b))
  "=" (fn [a b] (= a b))

  "is-contains?" std/contains?

  "is-vector?"  std/vector?
  "is-list?"  std/list?
  "is-map?"  std/map?
  "hash-map*"  std/hashmap
  "vector*"  std/vector
  "list*"  std/list

  "values*"  (fn [x] (Object.values x))
  "keys*"  (fn [x] (Object.keys x))
  "get*"  (fn [m k] (get m k))

  "not*"  (fn [x] (if x #f #t))
  "dec*"  (fn [x] (-1 x))
  "inc*"  (fn [x] (+1 x))

  "is-even?"  (fn [n] (= 0 (std/modulo n 2)))
  "is-odd?"  (fn [n]  (= 1 (std/modulo n 2)))

  "is-sequential?"  std/sequential?
  "concat*"  std/concat*
  "count*"  std/count
  "cons*"  cons

  "rest*"  (fn [arr]
              (if arr (arr.slice 1) []))
  "nth*"  (fn [arr i] (get arr i))
  "first*"  (fn [arr] (get arr 0))

  "is-empty?" (fn [x] (= 0 (std/count x)))
  "not-empty*" std/not-empty

  "apply*"  fapply
  "map*"  fmap

  "evens" (fn [n] (= 0 (mod n 2)))
  "odds" (fn [n]  (= 1 (mod n 2)))
  "type*" (fn [x] (typeof x))

  "meta*"  meta
  "conj*"  conj
  "seq*"  std/seq

  "is-atom?"  std/atom?
  "atom*"  std/atom
  "deref*"  std/deref
  "reset*"  std/reset!
  "swap*"  std/swap!

  "with-meta*"  withMeta
  "js-eval*"  evalJS
  "js*"  invokeJS

})

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(def- loadedMacros? false)
(def- CACHE {})

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- loadMacros "" []
  (when-not loadedMacros?
    (true! loadedMacros?)
    (require "./macros.ky")) nil)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn setMacro "Register a new macro"
  [cmd func]
  (when (and cmd func)
    (=> cmd $(cmd))
    (when-not (contains? cmd "/")
      (var c (global_env.peekNSP))
      (if-not c (raise! "missing namespace"))
      (=> cmd (str c "/" cmd)))
    ;;(println "adding macro ==== " cmd)
    (=>> CACHE cmd func)) nil)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn getMacro "Get macro"
  [cmd]
  (var nsp nil ret nil)
  (=> cmd $(cmd))
  (if (contains? cmd "/")
    (=> ret (get CACHE cmd))
    (do (=> nsp (global_env.peekNSP))
        (if nsp
          (=> ret (get CACHE
                       (str nsp "/" cmd))))
        (if-not ret
          (=> ret (get CACHE
                       (str "czlab.kirby.macros/" cmd)))))) ret)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- dbg "" [obj]
  (println "DBG-RT: " (prn obj)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- readAST "Returns the AST"
  [s]
  (var ret (parser/parse s))
  (if (= 1 (n# ret))
    (=> ret (1st ret))) ret)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- isList? "Returns true
               if a non-empty list"
  [x]
  (and (sequential? x) (not-empty x)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- quasiquote "" [ast]
  (cond
    (not (isList? ast))
    [(symbol "quote") ast]
    (and (symbol? (1st ast))
         (== (1st ast) "unquote"))
    (2nd ast)
    (and (isList? (1st ast))
         (== (1st (1st ast))
             "splice-unquote"))
    [(symbol "concat*")
     (2nd (1st ast))
     (quasiquote (rest ast))]
    :else
    (let [a0 (1st ast)
          a1 (rest ast)]
      [(symbol "cons*")
       (quasiquote a0)
       (quasiquote a1)])))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- isMacroCall? "" [ast env]
  (and (pairs? ast)
       (symbol? (1st ast))
       (getMacro $(1st ast))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn expandMacro
  "" [ast env mc] (mexpand ast env))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- mexpand "" [ast env]
  (var isM? (isMacroCall? ast env)
       mac nil
       cmd (if isM? (1st ast) ""))
  (while (isMacroCall? ast env)
    (=> cmd $(1st ast)
        mac (getMacro cmd)
        ast (mac.apply mac (rest ast)))) ast)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- evalAst "" [ast env]
  (cond
    (keyword? ast)
    ;;(str "\"" ast "\"")
    (.-value ast)
    (string? ast)
    (std.unwrap-str ast)
    (symbol? ast)
    (env.get ast)
    (pairs? ast)
    (map #(compute %1 env) ast)
    (list? ast)
    (into! :list (map #(compute %1 env) ast))
    (vector? ast)
    (into! :vector (map #(compute %1 env) ast))
    (and #f (map? ast))
    (reduce
      (fn [acc en]
        (=>> acc
             (compute (1st en) env)
             (compute (last en) env)) acc)
      {}
      (seq ast))
    (map? ast)
    (do-with [m {}]
      (for [i 0 sz (n# ast)
            :while (< i sz) :recur (+2 i)]
        (=>> m
             (compute (.@i ast) env)
             (compute (.@+i ast) env))))
    :else ast))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- handleAND "" [ast env]
  (var ret #t)
  (for [i 1 sz (n# ast)
        :while (< i sz) :recur (+1 i)]
    (=> ret (compute (.@i ast) env))
    (if-not ret (break-out-of-loop!))) ret)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- handleOR "" [ast env]
  (var ret nil)
  (for [i 1 sz (n# ast)
        :while (< i sz) :recur (+1 i)]
    (=> ret (compute (.@i ast) env))
    (if ret (break-out-of-loop!))) ret)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- handleLet "" [ast env]
  (var e (new LEXEnv env)
       a1 (.@1 ast))
  (for [i 0 sz (n# a1)
        :while (< i sz) :recur (+2 i)]
    (e.set (.@i a1)
           (compute (.@+i a1) e)))
  [(.@2 ast) e])

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- handleMacro "" [ast env]
  (var rc [(1st ast)
           (2nd ast)
           (concat [(symbol "fn*")
                    (.@2 ast)] (ast.slice 3))]
       a2 (.@2 rc)
       a1 (.@1 rc)
       func (compute  a2 env))
  (=>> func :____macro #t)
  (env.set a1 func))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- handleTry "" [ast env]
  (var a1 (.@1 ast)
       a2 (.@2 ast))
  (try
    (compute a1 env)
    (catch ex
      (if (and a2 (== "catch*"
                      (1st a2)))
        (if (inst? Error ex)
          (=> ex (.-message ex)))
        (compute (.@2 a2)
                 (new LEXEnv
                      env [(.@1 a2)] [ex]))
        (throw ex)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- handleIf "" [ast env]
  (var c (compute (.@1 ast) env)
       a2 (.@2 ast)
       a3 (.@3 ast))
  (if (or (nil? c)
          (false? c))
    (if-not (undef? a3) a3) a2))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- handleForm "" [ast env]
  (var f nil
       el (evalAst ast env))
  (cond
    (or (vector? ast)
        (map? ast)
        (list? ast))
    [false el]
    (array? el)
    (do (=> f (1st el))
        (cond
          (and f (.-____ast f))
          [true (.-____ast f) (f.____genenv (rest el))]
          :else
          [false (if (fn? f)
                   (apply f f (rest el)) el) env]))
    :else [false el]))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- fn-wrap "" [run ast env params]
  (var f #(run ast
               (new LEXEnv
                    env params ____args)))
  (=>> f
       :____macro false
       :____meta nil
       :____ast ast
       :____genenv #(new LEXEnv env params %)) f)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- compute* "" [ast env]
  ;;(println "eval:" (prn ast))
  (var ok? #t ret nil)
  (for []
    (=> ast (mexpand ast env))
    (->>
      (cond
        (not (array? ast))
        (do->true
          (=> ret (evalAst ast env)))
        (empty? ast)
        (do->true
          (=> ret ast))
        (== "and*"
            (1st ast))
        (do->true
          (=> ret (handleAND ast env)))
        (== "or*"
            (1st ast))
        (do->true
          (=> ret (handleOR ast env)))
        (== "def*"
            (1st ast))
        (do->true
          (=> ret (env.set a1
                           (compute a2 env))))
        (== "let*"
            (1st ast))
        (do->false
          (var rc (handleLet ast env))
          (=> ast (1st rc)
              env (2nd rc)))
        (== "quote"
            (1st ast))
        (do->true
          (=> ret (2nd ast)))
        (== "quasiquote"
            (1st ast))
        (do->false
          (=> ast
              (quasiquote (2nd ast))))
        (== "macro*"
            (1st ast))
        (do->true
          (=> ret (handleMacro ast env)))
        (== "macroexpand"
            (1st ast))
        (do->true
          (=> ret (mexpand (2nd ast) env)))
        (== "try*"
            (1st ast))
        (do->true
          (=> ret (handleTry ast env)))
        (== "do*"
            (1st ast))
        (do->false
          (evalAst (ast.slice 1 -1) env)
          (=> ast (nth ast (last-index ast))))
        (== "if*"
            (1st ast))
        (do->false
          (=> ast (handleIf ast env)))
        (== "fn*"
            (1st ast))
        (do->true
          (=> ret
              (fn-wrap compute
                       (.@2 ast) env (.@1 ast))))
        :else
        (let [rc (handleForm ast env)
              a1 (.@1 rc)
              a2 (.@2 rc)]
          (if (1st rc)
            (do->false
              (=> ast a1 env a2))
            (do->true
              (=> ret a1)))))
      (=> ____break ))) ret)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn compute "" [ast env]
  (if-not env (=> env global_env))
  (var ret (compute* ast env))
  (if (undef? ret) nil ret))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- show "" [exp] (prn exp))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn newEnv "" []
  (var ret (new LEXEnv))
  (each-key (fn [v k]
              (ret.set (symbol k) v)) toolkit)
  (ret.set (symbol "eval")
           #(compute % ret))
  (ret.set (symbol "*ARGV*") [])
  (ret.set (symbol "*host-language*")  "javascript")
  (ret.set (symbol "*gensym-counter*") (atom 0))
  ret)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(const- prefix "kirby> ")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- run_repl "" []
  (var rl (readline.createInterface process.stdin
                                    process.stdout))
  (rl.on
    :line
    (fn [line]
      (try
        (if line (println (rep line)))
        (catch e (println e)))
      (rl.setPrompt prefix  (alen prefix))
      (rl.prompt )))
  (rl.on
    :close
    (fn []
      (println "Bye!")
      (process.exit 0)))
  (println prefix "Kirby REPL v" version)
  (rl.setPrompt prefix  (alen prefix))
  (rl.prompt ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(const- rep #(show (compute (readAST %))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(def-  global_env (new LEXEnv))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn runRepl "" [] (init) (run_repl))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(const- macro_assert ```
  (macro* assert* [c msg] (if* c true (throw* msg))) ```)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(const- macro_cond ```
  (macro* cond* [&xs]
    (if* (> (count* xs) 0)
      (list* 'if*
            (first* xs)
            (nth* xs 1)
            (cons* 'cond* (rest* (rest* xs)))))) ```)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(def- inited? false version "")
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn init "" [ver]
  (when-not inited?
    (=> version ver
        global_env (newEnv))
    (rep macro_cond)
    (rep macro_assert)
    (loadMacros)
    (true! inited? )) inited?)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn globalEnv "" [] global_env)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;EOF

