;; Copyright (c) 2013-2017, Kenneth Leung. All rights reserved.
;; The use and distribution terms for this software are covered by the
;; Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
;; which can be found in the file epl-v10.html at the root of this distribution.
;; By using this software in any fashion, you are agreeing to be bound by
;; the terms of this license.
;; You must not remove this notice, or any other, from this software.
(ns ^{:doc "Kirby's standard core library."
      :author "Kenneth Leung"}
  czlab.kirby.stdlib)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn not-empty

  "If coll is empty, returns nil, else coll"
  [coll]

  (if (empty? coll) nil coll))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn stringify

  "JSON stringify (no cyclical obj-ref)"
  ^String [obj]

  (var cache [])
  (if obj
    (JSON/stringify
      obj
      (fn [k v]
        (cond
          (fn? v)
          (set! v "native-function")
          (object? v)
          (if (contains? cache v)
            (undef! v)
            (conj! cache v))) v))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn opt??

  "If cur is not defined, returns other else cur"
  ^Any [cur other]

  (if (def? cur) cur other))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn conj!

  "conj[oin]. Returns coll with the xs
  'added'. (conj! nil item) returns [item].
  If coll is a list, prepends else appends to coll."

  ^Array [coll & xs]
  (var c (or coll []))
  (if (list? c)
    (->> (xs.reverse)
         (c.unshift.apply c)) (c.push.apply c xs)) c)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn conj "Like conj! but
           returns a new collection"
  ^Array [coll & xs]
  (var c
       (cond (vector? coll)
             (into :vector coll)
             (list? coll)
             (into :list coll)
             (map? coll)
             (into :map coll)
             (nichts? coll)
             []
             :else (slice coll)))
  (apply conj! this (concat [c] xs)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn pop!

  "Removes the first element if list,
  else removes the last element,
  returning the element
  and the altered collection"

  ^Array [coll]
  (var r (if (list? coll)
           (coll.shift) (coll.pop))) [r coll])

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn pop "Like pop! but returns a new collection"
  ^Array [coll]
  (var r (if (list? coll)
           (1st coll) (last coll)))
  [r (if (list? coll)
       (coll.slice 1) (coll.slice 0 -1))])

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- dumpObj

  "Stringify a native (js) object"
  ^String [obj]

  (str "{ "
    (reduce (fn [acc [k v]]
                  (+= acc
                      (str (prn k)
                           " : "
                           (prn v) "\n")))
              ""
              (seq obj)) " }"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn getProp

  "If prop is a string, returns the value of
  this object property, obeying the own? flag.
  Otherwise, return the value at the index of
  the array"

  ^Any
  [obj prop & [own?]]
  (set! own? (opt?? own? true))
  (if (or (string? prop)
          (number? prop))
    (if (and own?
             (string? prop)
             (not (obj.hasOwnProperty prop)))
      undefined
      (js# "obj[prop]"))
    undefined))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn prn

  "Print the input data as string"
  ^String [obj & [r?]]

  (var pa (fn [arr s e]
            (str s (join " " (map prn arr)) e)))
  (case (typeid obj)
    :lambda-arg (str "%" (+1 (int obj.value)))
    :atom (str "(atom " (prn obj.value) ")")
    :keyword (str ":" obj.value)
    :symbol obj.value
    :object (dumpObj obj)
    :vector (pa obj "[" "]")
    :map (pa obj "{" "}")
    (:array :list) (pa obj "(" ")")
    :string
    (if r? (wrap-str obj) obj)
    (:null :nil) "null"
    (obj.toString)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(deftype LambdaArg [][value ""]
  "Defining a lambda positional argument"
  (constructor "" [arg]
    (var name (if (= arg "%")
                "1" (rest arg))
         v (int name))
    (if-not (> v 0)
      (raise! "invalid lambda-arg " arg))
    ;;zero based arg so minus 1
    (-- v)
    (set! this.value $(v)))
  (toString "" [] this.value))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(deftype Primitive [][value nil]
  "Defining a primitive data type"
  (constructor "" [v]
    (set! this.value v))
  (toString "" [] this.value))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(deftype Keyword [][value ""]
  "Defining a keyword"
  (constructor "" [name]
    (set! this.value (rest name)))
  (toString "" [] this.value))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(deftype Symbol [][value ""]
  "Defining a symbol"
  (constructor "" [name]
    (set! this.value name))
  (toString "" [] this.value))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn primitive?
  "Returns true if primitive" ^Boolean [obj] (inst? Primitive obj))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn primitive
  "Create a Primitive" ^Primitive [v] (new Primitive v))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn symbol?
  "Returns true if a symbol" ^Boolean [obj] (inst? Symbol obj))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn symbol
  "Create a new Symbol" ^Symbol [name] (new Symbol name))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn keyword?
  "Returns true if a keyword" ^Boolean [obj] (inst? Keyword obj))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn keyword
  "Create a new Keyword" ^Keyword [name] (new Keyword name))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn keyword->symbol
  "Convert a Keyword to Symbol" ^Symbol [k]
  (var s (new Symbol k.value))
  (assoc! s
          :source k.source
          :line  k.line
          :column k.column) s)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn lambda-arg?
  "Returns true if a Lambda Arg" ^Boolean [obj] (inst? LambdaArg obj))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn lambda-arg
  "Create a new Lambda Arg" ^LambdaArg [name] (new LambdaArg name))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(deftype Atom [][value nil]
  "Defining a clojure-like Atom"
  (constructor "" [val] (set! this.value val)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn atom?
  "Returns true if an Atom" ^Boolean [atm] (inst? Atom atm))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn atom
  "Create a new Atom" ^Atom [val] (new Atom val))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn reset!
  "Set a new value to the Atom" [a v] (set! a.value v) nil)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn deref
  "Get value inside the Atom" ^Any [a] (.-value a))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn swap! "Change value inside the Atom,
            returning the new value"
  ^Any [a f & xs]
  (->> (concat [a.value] xs)
       (apply f this)
       (set! a.value )) (get a :value))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn typeid "Returns the type-id
             of this object"
  ^Keyword [obj]
  (cond
    (lambda-arg? obj) :lambda-arg
    (keyword? obj) :keyword
    (symbol? obj) :symbol
    (vector? obj) :vector
    (atom? obj) :atom
    (list? obj) :list
    (map? obj) :map
    (nil? obj) :null
    (true? obj) :true
    (false? obj) :false
    (fn? obj) :function
    (string? obj) :string
    (number? obj) :number
    (array? obj) :array
    (object? obj) :object
    :else
    (raise! "Unknown type [" (type obj) "]")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn value? "Returns true
             if a simple value"
  ^Boolean [obj]
  (or (nil? obj)
      (vector? obj)
      (list? obj)
      (map? obj)
      (false? obj)
      (true? obj)
      (string? obj)
      (number? obj)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn sequential? "Returns true if coll
                  implements Sequential"
  ^Boolean [arr]
  (and (array? arr) (not (map? arr))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn eq? "Tests if two things are equal"
  ^Boolean [a b]
  (var ta (typeid a)
       ok? #t
       tb (typeid b))
  (if-not (or (= ta tb)
              (and (sequential? a)
                   (sequential? b)))
    #f
    (case ta
      (:map :list :vector)
      (do (if (not= (alen a)
                    (alen b))
            (false! ok?)
            (for [i 0 sz (alen a)
                  :while (< i sz) :recur (+1 i)]
              (when-not (eq? (.@i a)
                             (.@i b))
                (false! ok?)
                (break-out-of-loop!)))) ok?)
      :object
      (do (if-not (= (count a)
                     (count b))
            (false! ok?)
            (for [i 0 k nil ks (keys a)
                  :while (< i (alen ks)) :recur (+1 i)]
              (set! k (.@i ks))
              (when-not (eq? (get a k)
                             (get b k))
                (false! ok?)
                (break-out-of-loop!)))) ok?)
      (:symbol :keyword)
      (= a.value b.value)
      ;;else
      (= a b))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn object? "Returns true
              if a js object"
  ^Boolean [obj]
  (if-not (or (nil? obj)
              (array? obj)) (= (type obj) "object")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn last "Returns the last element"
  ^Any [coll]
  (if (and (array? coll)
           (nzlen? coll)) (nth coll (last-index coll))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn into! "Assign a type to this collection"
  ^Array [type coll]
  (case type
    :vector
    (assoc! coll :____vec #t)
    :list
    (assoc! coll :____list #t)
    :map
    (assoc! coll :____map #t)) coll)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn into "Like into! but
           returning a new collection"
  ^Array [type coll]
  (into! type (coll.slice 0)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn pairs? "Returns true if
             a LISP list, not data"
  ^Boolean [obj]
  (and (array? obj)
       (not (vector? obj))
       (not (map? obj))
       (not (list? obj))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn list? "Returns true if a List"
  ^Boolean [obj] (and (array? obj) obj.____list))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn list
  "Create a List" ^Array [&xs] (assoc! xs :____list #t) xs)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn vector? "Returns true if a Vector"
  ^Boolean [obj] (and (array? obj) obj.____vec))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn vector
  "Create a Vector" ^Array [&xs] (assoc! xs :____vec #t) xs)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn map? "Returns true if a Hashmap"
  ^Boolean [obj] (and (array? obj) obj.____map))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn hashmap "Create a new Hashmap"
  ^Array [&xs]
  (if (odd? (alen xs))
    (raise! "Invalid arity for hashmap")) (assoc! xs :____map #t) xs)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn seq "Returns a sequence"
  ^Array [obj]
  (cond
    (string? obj) (obj.split "")
    (array? obj) (obj.slice 0)
    (object? obj) (Object.entries obj)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn contains? "Returns true
                if item is inside"
  ^Boolean [coll x]
  (cond
    (or (array? coll)
        (string? coll)) (coll.includes x)
    (object? coll) (coll.hasOwnProperty x)
    :else false))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn nichts? "Returns true if object is
              either null of undefined"
  ^Boolean [obj] (or (undef? obj) (nil? obj)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn some? "Returns true if object is
            defined and not null"
  ^Boolean [obj] (not (nichts? obj)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn count "Count the number of elements inside"
  ^Integer [coll]
  (if coll
    (alen (if (or (string? coll)
                  (array? coll)) coll (keys coll))) 0))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn concat* "Add many to this collection"
  ^Array [coll & xs]
  (if coll (coll.concat.apply coll xs)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- every "" ^Array [coll start step]
  (var ret [])
  (for [i start sz (alen coll)
        :while (< i sz) :recur (+ i step)]
    (conj! ret (.@i coll)))
  ret)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn evens "Collect every
            2nd item starting at 0"
  ^Array [coll] (every coll 0 2))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn odds "Collect every
           2nd item starting at 1"
  ^Array [coll] (every coll 1 2))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn modulo "Modulo"
  ^Integer [x N]
  (if (< x 0)
    (- x (* -1
            (+ N (* (Math.floor (div (- x) N)) N))))
    (rem x N)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn interleave "Returns a seq of the first item
                 in each coll, then the second, etc"
  ^Array [c1 c2]
  (var cz (if (< (alen c2)
                 (alen c1))
            (alen c2) (alen c1))
       ret [])
  (for [i 0
        :while (< i cz) :recur (+1 i)]
    (conj! ret (.@i c1) (.@i c2)))
  ret)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn zipmap "Returns a map with the
             keys mapped to the corresponding vals"
  ^Map [keys vals]
  (var cz (if (< (alen keys)
                 (alen vals))
            (alen keys) (alen vals))
       ret {})
  (for [i 0
        :while (< i cz) :recur (+1 i)]
    (assoc! ret
            $(.@i keys) (.@i vals)))
  ret)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn extendAttr "" ^Object [obj attr & [flags]]
  (set! flags (opt?? flags
                   {:enumerable #f :writable #t}))
  (Object.defineProperty obj attr flags) obj)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(const- gensym-counter (atom 0))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn gensym "Generates next random symbol"
  ^Symbol [& [pfx]]
  (symbol (str (opt?? pfx "GS__")
               (swap! gensym-counter
                      (fn [x] (+1 x))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn slice "" ^Array [coll & [start end]]
  (if (def? end)
    (Array.prototype.slice.call coll start end)
    (if (def? start)
      (Array.prototype.slice.call coll start)
      (Array.prototype.slice.call coll))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn assoc! "" ^Map [mmap & xs]
  (when mmap
    (for [i 0 sz (count xs)
          :while (< i sz) :recur (+2 i)]
      ;the following will be macro'ed out
      (assoc! mmap
           (.@i xs)
           (.@+i xs)))) mmap)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn dissoc! "" ^Map [mmap & xs]
  (when mmap
    (doseq [n xs]
      (delete! mmap n))) mmap)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn truthy? "" [a] (not (falsy? a)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn falsy? "" [a]
  (or (nil? a)(false? a)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;monads
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(def m-identity
  {:bind (fn [mv mf] (mf mv))
   :result #(%1)})

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(def m-maybe
  {:bind (fn [mv mf]
           (if (nil? mv) nil (mf mv)))
   :result #(%1)
   :zero nil})

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(def m-array
  {:bind (fn [mv mf]
           (reduce
             (fn [acc v]
               (concat acc v))
             []
             (map mf mv)))
   :result #(concat [] %)
   :zero []
   :plus #(reduce
            (fn [acc v]
              (concat acc v)) [] ____args)})

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(def m-state
  {:bind (fn [mv mf]
           (fn [s]
             (var x (mv s))
             ((mf (1st x)) (2nd x))))
   :result (fn [v]
             (fn [s]
               (concat [] [v s])))})

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(def m-continuation
  {:bind (fn [mv mf]
           (fn [c]
             (mv (fn [v] ((mf v) c)))))
   :result (fn [v] (fn [c] (c v)))})

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn wrap-str "" ^String [s]
  (var out "\"")
  (for [i 0 ch "" sz (count s)
        :while (< i sz) :recur (+1 i)]
    (set! ch (ch@ s i))
    (cond
      (= ch "\"") (+= out "\\\"")
      (= ch "\n") (+= out "\\n")
      (= ch "\t") (+= out "\\t")
      (= ch "\f") (+= out "\\f")
      (= ch "\r") (+= out "\\r")
      (= ch "\v") (+= out "\\v")
      (= ch "\\") (+= out (if (= "u" (ch@ s (+1 i))) ch "\\\\"))
      :else (+= out ch)))
  (+= out "\""))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn unwrap-str "" ^String [s]
  (if (and (starts? s "\"")
           (ends? s "\""))
    (do-with [out ""]
      (set! s (s.slice 1 -1))
      (for [i 0 nx "" ch "" sz (count s)
            :while (< i sz) :recur (+1 i)]
        (set! ch (ch@ s i))
        (if (= ch "\\")
          (do (++ i)
              (set! nx (ch@ s i))
              (cond
                (= nx "\"") (+= out "\"")
                (= nx "\\") (+= out "\\")
                (= nx "n") (+= out "\n")
                (= nx "t") (+= out "\t")
                (= nx "f") (+= out "\f")
                (= nx "v") (+= out "\v")
                (= nx "r") (+= out "\r")
                :else (do (+= out ch) (-- i))))
          (+= out ch))))
    s))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn escXml "" ^String [s]
  (var out "")
  (for [i 0 c nil sz (n# s)
        :while (< i sz) :recur (+1 i)]
    (set! c (.@i s))
    (cond
      (= c "&") (set! c "&amp;")
      (= c ">") (set! c "&gt;")
      (= c "<") (set! c "&lt;")
      (= c "\"") (set! c "&quot;")
      (= c "'") (set! c "&apos;"))
    (+= out c))
  out)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn split-seq "" ^Array [coll cnt]
  (if (< cnt (count coll))
    [(take coll cnt) (drop coll cnt)]
    [(slice coll 0) []]))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn select-keys "" ^Map [coll keys]
  (reduce
    (fn [acc n]
      (assoc! acc
           (str n)
           (get coll (str n))) acc) {} (seq keys)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- doUpdateIn! "" [coll n func args err]
  (var cur (cond
             (number? n)
             (if (and (array? coll)
                      (< n (alen coll))) (nth coll n) (err n))
             :else (get coll n))
       v (apply func this (cons cur args)))
  (assoc! coll n v))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn update-in! "" ^Any [coll keys func & xs]
  (var err (fn [k] (raise! "update-in! failed, bad nested keys: " k)))
  (var root coll
       end (last-index keys))
  (var~ m n)
  (for [i 0 :while (<= i end) :recur (+1 i)]
    (set! n (.@i keys))
    (cond
      (= i end)
      (doUpdateIn! root n func xs err)
      (number? n)
      (if-not (and (array? root)
                   (< n (alen root)))
        (err n)
        (set! root (nth root n)))
      :else
      (do (set! m (get root n))
          (when (undef? m) (set! m {}) (assoc! root n m))
          (if-not (object? m) (err n))
          (set! root m))))
  coll)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- merge! "" [base m]
  (var ret (or base {})
       src (or m {}))
  (each-key (fn [v k]
              (set-in! ret k v)) src) ret)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn merge "" [&maps]
  (reduce (fn [acc n] (merge! acc n)) {} maps))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;EOF

