/*Auto generated by Kalaso - v1.0.0 undefined Wed Oct 18 2017 18:26:18 GMT-0700 (PDT)*/

var identity;
identity = { "bind": function (mv,mf) {
  return mf(mv);
  },"result": function (v) {
  return v;
  } };
;
var maybe;
maybe = { "bind": function (mv,mf) {
  return ((mv === null) ?
    null :
    mf(mv));
  },"result": function (v) {
  return v;
  },"zero": null };
;
var array;
array = { "bind": function (mv,mf) {
  return mv.map(mf).reduce(function (acc,v) {
  return acc.concat(v);
  },[]);
  },"result": function (v) {
  return [].concat(v);
  },"zero": [],"plus": function () {
  return Array.prototype.slice.call(arguments).reduce(function (acc,v) {
  return acc.concat(v);
  },[]);
  } };
;
var state;
state = { "bind": function (mv,mf) {
  return function (s) {
  let x,v,ss;
x = mv(s);
v = 0[x];
ss = 1[x];
;
  return mf(v)(ss);
  };
  },"result": function (v) {
  return function (s) {
  return [].concat([ v,s ]);
  };
  } };
;
var continuation;
continuation = { "bind": function (mv,mf) {
  return function (c) {
  return mv(function (v) {
  return mf(v)(c);
  });
  };
  },"result": function (v) {
  return function (c) {
  return c(v);
  };
  } };
;
function resultWrapperFunc(monad) {
let body=Array.prototype.slice.call(arguments,1);
return ((monad.zero&&empty_QUERY(body)) ?
  monad.zero :
  monad.result.apply(this,body));
}

