;; Copyright (c) 2013-2017, Kenneth Leung. All rights reserved.
;; The use and distribution terms for this software are covered by the
;; Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
;; which can be found in the file epl-v10.html at the root of this distribution.
;; By using this software in any fashion, you are agreeing to be bound by
;; the terms of this license.
;; You must not remove this notice, or any other, from this software.

(ns ^{:doc ""
      :author "Kenneth Leung"}
  czlab.kirby.env
  (require ["./stdlib" :as std]))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn Env "" [outer binds exprs]
  (set! this.outer (or outer nil))
  (set! this.data {})
  (var ____break false)
  (when (and binds exprs)
    (forlet ((i 0 bv nil)
             (and (not ____break)
                  (< i (alen binds))) (i (inc i)))
      (set! bv (.-value (nth binds i)))
      (cond
        (= "&" bv)
        (do (set! this.data
                  (.-value (nth binds (inc i)))
                  (std.slice exprs i))
            (set! ____break true))
        (.startsWith bv "&")
        (do (set! this.data
                  (.slice bv 1) (std.slice exprs  i))
            (set! ____break true))
        :else
        (set! this.data bv (nth exprs i)))))
  this)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defmacro assertSymbol [x]
  `(if-not (inst? Symbol key)
     (std.raise "env.find key must be a symbol")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- Env.prototype.find "" [key]
  (assertSymbol key)
  (cond
    (std.contains? this.data key.value) this
    (std.some? this.outer) (.find this.outer key)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- Env.prototype.set "" [key value]
  (assertSymbol key)
  (set! this.data key.value value)
  value)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- Env.prototype.get "" [key]
  (assertSymbol key)
  (var env (.find this key))
  (if-not env (std.raise "'" key.value  "' not found"))
  (get env.data key.value))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;EOF

