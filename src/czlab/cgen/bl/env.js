/*Auto generated by Kirby - v1.0.0 Sun Oct 08 2017 18:51:56 GMT+0800 (HKT)*/

var std= require("./stdlib");
;
//
function Env(outer,binds,exprs) {
this.outer = (outer||null);
this.data = {};
let ____break = false;
((binds&&exprs) ?
    (function() {
  return (function () {
for (var i = 0,bv = null; ((!____break)&&(i < binds.length)); i = (i+1)) {
        bv = binds[i].value;
    (("&" === bv) ?
            (function() {
      this.data[binds[(i+1)].value] = std.slice(exprs,i);
      return ____break = true;
      }).call(this) :
      (bv.startsWith("&") ?
                (function() {
        this.data[bv.slice(1)] = std.slice(exprs,i);
        return ____break = true;
        }).call(this) :
        (true ?
          this.data[bv] = exprs[i] :
          null)));
;
  }
}).call(this);
  }).call(this) :
  null);
return this;
}

;
//
Env.prototype.find = function (key) {
((key instanceof Symbol) ?
  null :
  std.raise("env.find key must be a symbol"));
return (std.contains_QUERY(this.data,key.value) ?
  this :
  (std.some_QUERY(this.outer) ?
    this.outer.find(key) :
    null));
}

//
Env.prototype.set = function (key,value) {
((key instanceof Symbol) ?
  null :
  std.raise("env.find key must be a symbol"));
this.data[key.value] = value;
return value;
}

//
Env.prototype.get = function (key) {
((key instanceof Symbol) ?
  null :
  std.raise("env.find key must be a symbol"));
let env = this.find(key);
(env ?
  null :
  std.raise("'",key.value,"' not found"));
return env.data[key.value];
}



module.exports = {
  Env: Env
};

