/*Auto generated by Kirby - v1.0.0 Fri Oct 13 2017 01:22:00 GMT-0700 (PDT)*/

var kalaso= require("./cg/transpiler");
var macros= require("./bl/macros");
var std= require("./bl/stdlib");
var rt= require("./rt/runtime");
var gopt= require("node-getopt");
var watcher= require("watch");
var path= require("path");
var fs= require("fs");
;
var validFlag_QUERY = new RegExp("-h\\b|-r\\b|-v\\b|-b\\b|-s\\b|-t\\b");
var error = function (e) {
std.println(e);
return process.exit(1);
};
var opt = gopt.create([
  [
    "h",
    "help",
    "display this help"
  ],
  [
    "v",
    "version",
    "show version"
  ],
  [
    "r",
    "run",
    "run .kal files"
  ],
  [
    "w",
    "watch",
    "auto-compile changed files"
  ],
  [
    "b",
    "browser-bundle",
    "bundle for browser"
  ],
  [
    "m",
    "map",
    "generate source maps"
  ],
  [
    "t",
    "tree",
    "show AST"
  ],
  [
    "i",
    "include-dir=ARG+",
    "add directory to include search path"
  ]
]).setHelp(["kalaso [OPTION] [<infile>] [<outfile>]\n\n","<outfile> default to <infile> with \".js\" extension\n\n","Also compile stdin to stdout\n","eg. $ echo '(console.log \"hello\")' | kalaso\n\n","[[OPTIONS]]\n\n"].join("")).bindHelp().parseSystem();
//
function handleNoArgs() {
let pout = process.stdout,
  source = "",
  pin = process.stdin;
pin.resume();
pin.setEncoding("utf8");
pin.on("data",function (chunk) {
return source += chunk.toString();
});
pin.on("end",function () {
return (function() {
try {
return pout.write(kalaso.transpile(source,process.cwd()));

} catch (e) {
return error_BANG(e);
;
}
}).call(this);
});
pout.on("error",error);
pin.on("error",error);
return setTimeout(function () {
return ((0 === pin.bytesRead) ?
    (function() {
  pin.removeAllListeners("data");
  return runrepl();
  }).call(this) :
  null);
},20);
}

//
function compileFiles() {
let fin = null,
  fout = null;
(std.first(opt.argv()) ?
  fin = std.first(opt.argv) :
  error_BANG("No Input file"));
fout = opt.argv[1];
((!fout) ?
    (function() {
  fout = fin.replace(new RegExp("\\.kal$"()),".js");
  return (===(fout,fin) ?
    error_BANG("Input file must have extension \".kal\"") :
    null);
  }).call(this) :
  null);
return (function() {
try {
let wantMap_QUERY = opt.options["map"],
  dbgAST_QUERY = opt.options["tree"],
  source = null,
  dirs = opt.options["include-dir"];
(dbgAST_QUERY ?
  null :
  std.println("kalaso v1.0.0",": compiling: ",fin," -> ",fout));
source = fs.readFileSync(fin,"utf8");
return (dbgAST_QUERY ?
  kalaso.dbgAST(source,fin,dirs) :
  (function (out) {
  return fs.writeFileSync(fout,out,"utf8");
  })((wantMap_QUERY ?
    kalaso.transpileWithSrcMap(source,fin,dirs) :
    kalaso.transpile(source,fin,dirs))));

} catch (e) {
return error_BANG(e);
;
}
}).call(this);
}

//
function init() {
require.extensions[".kal"] = function (module,fname) {
let kb = require("./cg/transpiler"),
  code = fs.readFileSync(fname,"utf8");
return module._compile(kb.transpile(code,path.relative(process.cwd(),fname)),fname);
};
rt.init();
return macros.load();
}

//
function main() {
init();
return compileFiles();
}

main();


module.exports = {
  compileFiles: compileFiles
};

