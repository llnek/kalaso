;; Copyright (c) 2013-2017, Kenneth Leung. All rights reserved.
;; The use and distribution terms for this software are covered by the
;; Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
;; which can be found in the file epl-v10.html at the root of this distribution.
;; By using this software in any fashion, you are agreeing to be bound by
;; the terms of this license.
;; You must not remove this notice, or any other, from this software.
(ns ^{:doc ""
      :author "Kenneth Leung"}
  czlab.kirby.main
  (require ["node-getopt" :as getopt]
           ["child_process" :as cp]
           ["watch" :as watch]
           ["path" :as path]
           ["fs" :as fs])
  (require ["./compiler" :as tx]
           ["./stdlib"
            :as std
            :refer [object?]]
           ["./engine" :as rt]))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(def- error! #(do (println %) (process.exit 1)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- compileFiles "" [opt]
  (var [fin fout] opt.argv)
  (when-not fin
    (error! "No Input file"))
  (when-not fout
    (=> fout (fin.replace /\.ky$/ ".js"))
    (if (= fout fin)
      (error! "Input file must have extension \".ky\"")))
  (try
    (println (str "kirby v" (.-version tx))
             ": compiling file: " fin " -> " fout)
    (var options opt.options
         {:keys [source-map
                 format show-ast]} options
         source (fs/readFileSync fin "utf8"))
    (if show-ast
      (tx/dbgAST source fin)
      (fs/writeFileSync fout
                        (tx/transpile source fin options) "utf-8"))
    (catch e
      (error! e))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- init "" []
  (=>> require.extensions
       ".ky"
       (fn [module fname]
         (var code
              (.transpile
                (require "./compiler")
                (fs/readFileSync fname "utf8")
                (path/relative (process/cwd) fname)))
         (module._compile code fname)))
  (rt.init tx.version))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- doWatch "" [cwd]
  (println "Watching"
           cwd "for \".ky\" file changes...")
  (watch/watchTree
    cwd
    {:ignoreDirectoryPattern /node_modules/
     :ignoreDotFiles true
     :filter (fn [f stat]
               (or (ends? f ".ky")
                   (.isDirectory stat)))}
    (fn [f curr prev]
      (cond
        (and (object? f)
             (nil? prev)
             (nil? curr))
        (do->nil "finished walking the tree")
        (and curr
             (= 0 curr.nlink))
        (do->nil "f was removed")
        :else
        (do ;;(prev === null) {/*new file*/}
            ;;f is a new file or changed
          (cp/spawn "bin/boot.js"
                    [(f.slice (+1 (alen cwd)))]
                    {:stdio "inherit"}))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- pcli "" [gopt]
  (var opt (.parseSystem gopt)
       {:keys [version
               repl watch help]} opt.options)
  (cond
    version (console.info tx.version)
    watch (doWatch (process/cwd))
    repl (rt/runRepl)
    (or help
        (empty? opt.argv))
    (.showHelp gopt)
    :else (compileFiles opt)) #t)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn main "" []
  (var gopt
       (->
         (getopt/create
           [[:w "watch" "auto-compile changed files"]
            [:m "source-map" "generate source maps"]
            [:f "format" "format source code"]
            [:b "bundle" "bundle for browser"]
            [:h "help" "display this help"]
            [:v "version" "show version"]
            [:r "repl" "start a repl"]
            [:t "show-ast" "show AST"]])
         (.setHelp
            (str "kirby [OPTIONS] [<infile>] [<outfile>]\n\n"
                 "<outfile> default to <infile> with \".js\" suffix\n\n"
                 "[[OPTIONS]]\n\n"))
         (.bindHelp )))
  (and (init)
       (pcli gopt)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(main)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;EOF

