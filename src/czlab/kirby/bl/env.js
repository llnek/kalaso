/*Auto generated by Kirby - v1.0.0 czlab.kirby.bl.env Fri Nov 24 2017 21:54:10 GMT+1100 (AEDT)*/

const std = require("./stdlib");
const contains_QUERY = std["contains_QUERY"];
const conj_BANG = std["conj_BANG"];
const some_QUERY = std["some_QUERY"];
const count = std["count"];
const last = std["last"];
const pop_BANG = std["pop_BANG"];
const opt_QUERY__QUERY = std["opt_QUERY__QUERY"];
const vector = std["vector"];
const Symbol = std["Symbol"];
const kirbystdlibref = std;
//Lexical Environment
class LEXEnv {
  ////////////////////////////////////////////////////////////////////////////////
  //name: [constructor] in file: env.ky near line: 35
  //Create and initialize
  //a new env with these symbols,
  //and optionally a parent env
  constructor(parent, vars, exprs) {
    (this["nspaces"] = [], this["data"] = {}, this["parent"] = null);
    if (parent) {
      this["parent"] = parent;
    }
    for (let i = 0, e = null, ev = null, sz = kirbystdlibref.count(vars), ____break = false; ((!____break) && (i < sz)); i = (i + 1)) {
      (e = vars[i], ev = e.value);
      if ( (ev === "&") ) {
        this.data[[vars[i + 1]].join("")] = Array.prototype.slice.call(exprs, i);
        ____break = true;
      } else {
        if (ev.startsWith("&")) {
          this.data[ev.slice(1)] = Array.prototype.slice.call(exprs, i);
          ____break = true;
        } else {
          if (true) {
            this.data[ev] = exprs[i];
          }
        }
      }
    }
    return this;
  }
  ////////////////////////////////////////////////////////////////////////////////
  //name: [find] in file: env.ky near line: 61
  //Find the env
  //containing this symbol
  find(k) {
    if ( (!(k instanceof Symbol)) ) {
      throw new Error("env.xxx key must be a symbol");
    }
    return (contains_QUERY(this.data, k.value) ?
      this :
      (some_QUERY(this.parent) ?
        this.parent.find(k) :
        null));
  }
  ////////////////////////////////////////////////////////////////////////////////
  //name: [set] in file: env.ky near line: 69
  //Bind this symbol,
  //value to this env
  set(k, v) {
    if ( (!(k instanceof Symbol)) ) {
      throw new Error("env.xxx key must be a symbol");
    }
    this.data[k.value] = v;
    return v;
  }
  ////////////////////////////////////////////////////////////////////////////////
  //name: [get] in file: env.ky near line: 75
  //Get value of
  //this symbol
  get(k) {
    if ( (!(k instanceof Symbol)) ) {
      throw new Error("env.xxx key must be a symbol");
    }
    let env = this.find(k);
    if ( (!env) ) {
      throw new Error([k.value, " not found"].join(""));
    }
    return env.data[k.value];
  }
  ////////////////////////////////////////////////////////////////////////////////
  //name: [pushNSP] in file: env.ky near line: 83
  //Add a namespace
  pushNSP(nsp) {
    return conj_BANG(this.nspaces, [nsp].join(""));
  }
  ////////////////////////////////////////////////////////////////////////////////
  //name: [peekNSP] in file: env.ky near line: 87
  //Returns the
  //last added namespace
  peekNSP() {
    return last(this.nspaces);
  }
  ////////////////////////////////////////////////////////////////////////////////
  //name: [popNSP] in file: env.ky near line: 92
  //Return and remove
  //the last added namespace
  popNSP() {
    return pop_BANG(this.nspaces)[0];
  }
  ////////////////////////////////////////////////////////////////////////////////
  //name: [firstNSP] in file: env.ky near line: 97
  //Get the first
  //added namespace
  firstNSP() {
    return this.nspaces[0];
  }
  ////////////////////////////////////////////////////////////////////////////////
  //name: [countNSPCache] in file: env.ky near line: 102
  //Count n# of
  //added namespaces
  countNSPCache() {
    return kirbystdlibref.count(this.nspaces);
  }
  ////////////////////////////////////////////////////////////////////////////////
  //name: [resetNSPCache] in file: env.ky near line: 107
  //Clear all namespaces
  resetNSPCache() {
    this["nspaces"] = [];
    return null;
  }
}
module.exports = {
  LEXEnv: LEXEnv
};