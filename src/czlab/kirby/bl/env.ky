;; Copyright (c) 2013-2017, Kenneth Leung. All rights reserved.
;; The use and distribution terms for this software are covered by the
;; Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
;; which can be found in the file epl-v10.html at the root of this distribution.
;; By using this software in any fashion, you are agreeing to be bound by
;; the terms of this license.
;; You must not remove this notice, or any other, from this software.

(ns ^{:doc ""
      :author "Kenneth Leung"}

  czlab.kirby.bl.env

  (require ["./stdlib" :as std  :refer [Symbol]]))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defmacro assertSymbol "" [k]
  `(if-not (inst? Symbol ~k) (raise! "env.xxx key must be a symbol")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(deftype LEXEnv [][]
  (constructor [parent vars exprs]
    (set-in! this :data {} :parent (std/opt parent nil))
    (when (and vars exprs)
      (for [i 0 e nil ev nil
            :while (< i (alen vars)) :recur (+1 i)]
        (set! e (nth vars i) ev (.-value e))
        (cond
          (= ev "&")
          (do (set-in! this.data
                       (str (nexth vars i)) (slice exprs i))
              (break-out-of-loop!))
          (ev.startsWith "&")
          (do (set-in! this.data (rest ev) (slice exprs i))
              (break-out-of-loop!))
          :else
          (set-in! this.data ev (nth exprs i))))) this)
  (find [k]
    (assertSymbol k)
    (cond
      (std/contains? this.data key.value) this
      (std/some? this.parent) (.find this.parent k)))
  (set [k v]
    (assertSymbol k)
    (set-in! this.data k.value v) v)
  (get [k]
    (assertSymbol k)
    (var env (.find this k))
    (if-not env (raise! k.value " not found"))
    (get env.data k.value))
  (pushNSP [nsp]
    (conj! this.nspaces (str nsp)))
  (peekNSP []
    (last this.nspaces))
  (popNSP []
    (pop! this.nspaces)[0])
  (firstNSP []
    (car this.nspaces))
  (countNSPCache [] (alen this.nspaces))
  (resetNSPCache [] (set! this.nspaces (std/vector))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;EOF

