;; Copyright (c) 2013-2017, Kenneth Leung. All rights reserved.
;; The use and distribution terms for this software are covered by the
;; Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
;; which can be found in the file epl-v10.html at the root of this distribution.
;; By using this software in any fashion, you are agreeing to be bound by
;; the terms of this license.
;; You must not remove this notice, or any other, from this software.

(ns ^{:doc ""
      :author "Kenneth Leung"}

  czlab.kirby.bl.env

  (require ["./stdlib" :as std ]
           ["./types" :as types :refer [Symbol]]))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn Env "" [parent vars exprs]
  (set! this.parent (std/maybe parent nil))
  (set! this.data {})
  (when (and vars exprs)
    (forlet ((i 0 e nil)
             (< i (alen vars)) (i (inc i)))
      (set! e (.-value (nth vars i)))
      (cond
        (= "&" e)
        (do (set! this.data
                  (.-value (nth vars (+ i 1)))
                  (slice exprs i))
            (break!))
        (.startsWith e "&")
        (do (set! this.data
                  (e.slice 1)
                  (slice exprs i))
            (break!))
        :else
        (set! this.data
              e
              (nth exprs i))))) this)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defmacro assertSymbol "" [key]
  `(if-not (inst? Symbol ~key)
     (raise! "env.xxx key must be a symbol")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- Env.prototype.find "" [key]
  (assertSymbol key)
  (cond
    (std/contains? this.data key.value) this
    (std/some? this.parent) (.find this.parent key)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- Env.prototype.set "" [key value]
  (assertSymbol key)
  (set! this.data key.value value) value)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- Env.prototype.get "" [key]
  (assertSymbol key)
  (var env (.find this key))
  (if-not env (raise! key.value "' not found"))
  (get env.data key.value))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;EOF

