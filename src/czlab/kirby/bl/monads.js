/*Auto generated by Kirby - v1.0.0 czlab.kirby.bl.monads Sun Oct 29 2017 14:23:19 GMT-0700 (PDT)*/

var std= require("./stdlib");
;
let identity;
identity= { "bind": function (mv,mf) {
  return mf(mv);
  },"result": function (v) {
  return v;
  } };
;
let maybe;
maybe= { "bind": function (mv,mf) {
  return ((mv === null) ?
    null :
    mf(mv));
  },"result": function (v) {
  return v;
  },"zero": null };
;
let array;
array= { "bind": function (mv,mf) {
  return mv.map(mf).reduce(function (acc,v) {
  return acc.concat(v);
  },[]);
  },"result": function (v) {
  return [].concat(v);
  },"zero": [],"plus": function () {
  let ____args;
____args= Array.prototype.slice.call(arguments);
;
  return Array.prototype.slice.call(arguments).reduce(function (acc,v) {
  return acc.concat(v);
  },[]);
  } };
;
let state;
state= { "bind": function (mv,mf) {
  return function (s) {
  let x;
x= mv(s);
;
  return mf(x[0])(x[1]);
  };
  },"result": function (v) {
  return function (s) {
  return [].concat([ v,s ]);
  };
  } };
;
let continuation;
continuation= { "bind": function (mv,mf) {
  return function (c) {
  return mv(function (v) {
  return mf(v)(c);
  });
  };
  },"result": function (v) {
  return function (c) {
  return c(v);
  };
  } };
;


module.exports = {
  identity: identity,
  maybe: maybe,
  array: array,
  state: state,
  continuation: continuation
};

