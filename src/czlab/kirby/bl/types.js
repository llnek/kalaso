/*Auto generated by Kirby - v1.0.0 czlab.kirby.bl.types Sat Oct 28 2017 18:38:43 GMT-0700 (PDT)*/

var std= require("./stdlib");
;
//
function wrap_str(s) {
return ["\"",s.replace(/\\/g,"\\\\").replace(/"/g,"\\\"").replace(/\n/g,"\\n"),"\""].join("");
}

//
function unwrap_str(s) {
return ((s.startsWith("\"")&&s.endsWith("\"")) ?
  s.slice(1,(s.length-1)).replace(/\\"/g,"\"").replace(/\\n/g,"\n").replace(/\\\\/g,"\\") :
  s);
}

//
function pr_obj(obj) {
let G____1=Array.prototype.slice.call(arguments,1);
let G____2= G____1;
let readable_QUERY;
readable_QUERY=G____2[0];
let _r,pa;
_r= std.maybe(readable_QUERY,true);
pa= function () {
return obj.map(function () {
let ____args;
____args= Array.prototype.slice.call(arguments);
;
return pr_obj(____args[0],_r);
}).join(" ");
};
;
return (function() { let ____x;
switch (obj_type(obj)) {
case "vector":
____x= ["[",pa(),"]"].join("");
break;
case "list":
____x= ["(",pa(),")"].join("");
break;
case "map":
____x= ["{",pa(),"}"].join("");
break;
case "object":
____x= ["{",Object.keys(obj).reduce(function (acc,k) {
acc.push(pr_obj(k,_r),pr_obj(obj[k],_r));
return acc;
},[]),"}"].join("");
break;
case "atom":
____x= ["(atom ",pr_obj(obj.value,_r),")"].join("");
break;
case "keyword":
____x= [":",obj.value].join("");
break;
case "string":
____x= ((false&&_r) ?
  wrap_str(obj) :
  obj);
break;
case "null":
case "nil":
____x= "null";
break;
default:
____x= obj.toString();
break;
}
return ____x;}).call(this);
}

//
function obj_type(obj) {
return (lambda_arg_QUERY(obj) ?
  "lambda-arg" :
  (keyword_QUERY(obj) ?
    "keyword" :
    (symbol_QUERY(obj) ?
      "symbol" :
      (list_QUERY(obj) ?
        "list" :
        (vector_QUERY(obj) ?
          "vector" :
          (std.object_QUERY(obj) ?
            "object" :
            (map_QUERY(obj) ?
              "map" :
              ((obj === null) ?
                "null" :
                ((true === obj) ?
                  "true" :
                  ((false === obj) ?
                    "false" :
                    (atom_QUERY(obj) ?
                      "atom" :
                      ((typeof(obj) === "function") ?
                        "function" :
                        ((typeof(obj) === "string") ?
                          "string" :
                          ((typeof(obj) === "number") ?
                            "number" :
                            (true ?
                              (function (){ throw new Error([ "Unknown type '",typeof(obj),"'" ].join("")); }).call(this) :
                              null)))))))))))))));
}

//
function value_QUERY(obj) {
return ((obj === null)||(true === obj)||vector_QUERY(obj)||map_QUERY(obj)||(false === obj)||(typeof(obj) === "string")||(typeof(obj) === "number"));
}

//
function sequential_QUERY(arr) {
return (list_QUERY(arr)||vector_QUERY(arr));
}

//
function eq_QUERY(a,b) {
let ta,tb;
ta= obj_type(a);
tb= obj_type(b);
;
return (((ta === tb)||(sequential_QUERY(a)&&sequential_QUERY(b))) ?
  (function() { let ____x;
switch (ta) {
case "symbol":
____x= (a.value === b.value);
break;
case "map":
case "list":
case "vector":
____x=   (function() {
  let ok_QUERY;
ok_QUERY= true;
;
  ((a.length !== b.length) ?
    ok_QUERY = false :
    (function () {let ____break=false;
for (let i = 0; (!____break && (i < a.length)); i = (i+1)) {
            ((!eq_QUERY(a[i],b[i])) ?
                (function() {
        ok_QUERY = false;
        return ____break = true;
        }).call(this) :
        null);
;
    }
}).call(this));
  return ok_QUERY;
  }).call(this);
break;
case "object":
____x=   (function() {
  let ok_QUERY;
ok_QUERY= true;
;
  ((std.count(a) === std.count(b)) ?
    (function () {let ____break=false;
for (let i = 0,k = null,ks = Object.keys(a); (!____break && (i < ks.length)); i = (i+1)) {
            k = ks[i];
      ((!eq_QUERY(a[k],b[k])) ?
                (function() {
        ok_QUERY = false;
        return ____break = true;
        }).call(this) :
        null);
;
    }
}).call(this) :
    ok_QUERY = false);
  return ok_QUERY;
  }).call(this);
break;
default:
____x= (a === b);
break;
}
return ____x;}).call(this) :
  false);
}

//
function LambdaArg(arg) {
let v,name;
v= 0;
name= arg.slice(1);
;
(empty_QUERY(name) ?
  name = "1" :
  null);
v = parseInt(name);
((v > 0) ?
  null :
  (function (){ throw new Error([ "Bad lambda-arg: ",arg ].join("")); }).call(this));
--v;
this.value = v;
return this;
}

//
function Keyword(name) {
this.value = name.slice(1);
return this;
}

//
function Symbol(name) {
this.value = name;
return this;
}

//
Symbol.prototype.toString = function () {
return this.value;
}

//
function symbol(name) {
return new Symbol(name);
}

//
function symbol_QUERY(obj) {
return (obj instanceof Symbol);
}

//
function symbol_s(s) {
return (symbol_QUERY(s) ?
  s.value :
  s);
}

//
Keyword.prototype.toString = function () {
return this.value;
}

//
function keyword(name) {
return new Keyword(name);
}

//
function keyword_QUERY(obj) {
return (obj instanceof Keyword);
}

//
function keyword_s(k) {
return (keyword_QUERY(k) ?
  k.value :
  k);
}

//
LambdaArg.prototype.toString = function () {
return this.value;
}

//
function lambda_arg(name) {
return new LambdaArg(name);
}

//
function lambda_arg_QUERY(obj) {
return (obj instanceof LambdaArg);
}

//
function lambda_arg_s(k) {
return (lambda_arg_QUERY(k) ?
  k.value :
  k);
}

//
function fn_wrap(run,Env,ast,env,params) {
return (function() {
let f;
f= function () {
let ____args;
____args= Array.prototype.slice.call(arguments);
;
return run(ast,new Env(env,params,arguments));
};
;
f["____macro"] = false;
f["____meta"] = null;
f["____ast"] = ast;
f["____genenv"] = function (args) {
return new Env(env,params,args);
};
return f;
}).call(this);
}

//
Function.prototype.clone = function () {
let that;
that= this;
;
return (function() {
let tmp;
tmp= function () {
let ____args;
____args= Array.prototype.slice.call(arguments);
;
return that.apply(this,arguments);
};
;
(function() {
let G__1;
G__1= that;
;
return Object.entries(G__1).forEach(function (e) {
return (function (k) {
return tmp[k] = that[k];
})(e[1],e[0]);
});
}).call(this);
return tmp;
}).call(this);
}

//
function list() {
let xs=Array.prototype.slice.call(arguments,0);
return xs;
}

//
function list_QUERY(obj) {
return (Array.isArray(obj)&&(!obj.____vec)&&(!obj.____map));
}

//
function vector() {
let xs=Array.prototype.slice.call(arguments,0);
xs["____vec"] = true;
return xs;
}

//
function vector_QUERY(obj) {
return (Array.isArray(obj)&&(true === obj.____vec));
}

//
function hashmap() {
let xs=Array.prototype.slice.call(arguments,0);
((1 === (xs.length%2)) ?
  (function (){ throw new Error([ "Odd number of hash map arguments" ].join("")); }).call(this) :
  null);
xs["____map"] = true;
return xs;
}

//
function map_QUERY(obj) {
return (Array.isArray(obj)&&(true === obj.____map));
}

//
function jsObject_QUERY(m) {
return (std.object_QUERY(m)&&(!(m instanceof LambdaArg))&&(!(m instanceof Atom))&&(!(m instanceof Symbol))&&(!(m instanceof Keyword)));
}

//
function Atom(val) {
return this.value = val;
}

//
function atom(val) {
return new Atom(val);
}

//
function atom_QUERY(atm) {
return (atm instanceof Atom);
}



module.exports = {
  wrap_str: wrap_str,
  unwrap_str: unwrap_str,
  pr_obj: pr_obj,
  obj_type: obj_type,
  value_QUERY: value_QUERY,
  sequential_QUERY: sequential_QUERY,
  eq_QUERY: eq_QUERY,
  LambdaArg: LambdaArg,
  Keyword: Keyword,
  Symbol: Symbol,
  symbol: symbol,
  symbol_QUERY: symbol_QUERY,
  symbol_s: symbol_s,
  keyword: keyword,
  keyword_QUERY: keyword_QUERY,
  keyword_s: keyword_s,
  lambda_arg: lambda_arg,
  lambda_arg_QUERY: lambda_arg_QUERY,
  lambda_arg_s: lambda_arg_s,
  fn_wrap: fn_wrap,
  list: list,
  list_QUERY: list_QUERY,
  vector: vector,
  vector_QUERY: vector_QUERY,
  hashmap: hashmap,
  map_QUERY: map_QUERY,
  jsObject_QUERY: jsObject_QUERY,
  Atom: Atom,
  atom: atom,
  atom_QUERY: atom_QUERY
};

