/*Auto generated by Kirby - v1.0.0 czlab.kirby.bl.stdlib Sun Nov 05 2017 23:44:36 GMT-0800 (PST)*/


//
function not_empty(coll) {
return ((0 === count(coll)) ?
null :
coll);
}

//
function stringify(obj) {
let cache;
cache= [];

return (obj ?
JSON.stringify(obj,function (k,v) {
(object_QUERY(v) ?
(contains_QUERY(cache,v) ?
v=undefined :
conj_BANG(cache,v)) :
null);
return v;
}) :
null);
}

//
function opt(cur,other) {
return ((typeof(cur) !== "undefined") ?
cur :
other);
}

//
function conj_BANG(coll,x) {
coll.push(x);
return coll;
}

//
function conj(coll,x) {
return coll.concat(x);
}

//
function pop_BANG(coll) {
let r;
r= (list_QUERY(coll) ?
coll.shift() :
coll.pop());

return [ r,coll ];
}

//
function pop(coll) {
let r;
r= (list_QUERY(coll) ?
coll[0] :
last(coll));

return [ r,(list_QUERY(coll) ?
coll.slice(1) :
coll.slice(0,-1)) ];
}

//
function prn(obj) {
let G____1=Array.prototype.slice.call(arguments,1);
let G____2= G____1;
let readable_QUERY;
readable_QUERY=G____2[0];
let _r,pa;
_r= opt(readable_QUERY,true);
pa= function (arr,s,e) {
return [s,arr.map(function () {
let ____args;
____args= Array.prototype.slice.call(arguments);

return prn(____args[0],_r);
}).join(" "),e].join("");
};

return (function() { let ____x;
switch (typeid(obj)) {
case "lambda-arg":
____x= ["%",(parseInt(obj.value)+1)].join("");
break;
case "atom":
____x= ["(atom ",prn(obj.value,_r),")"].join("");
break;
case "keyword":
____x= [":",obj.value].join("");
break;
case "symbol":
____x= obj.value;
break;
case "object":
____x= stringify(obj);
break;
case "vector":
____x= pa(obj,"[","]");
break;
case "map":
____x= pa(obj,"{","}");
break;
case "list":
____x= pa(obj,"(",")");
break;
case "string":
____x= obj;
break;
case "null":
case "nil":
____x= "null";
break;
default:
____x= obj.toString();
break;
}
return ____x;}).call(this);
}

class LambdaArg {
constructor (arg) {
let name,v;
name= ((arg === "%") ?
"1" :
arg.slice(1));
v= parseInt(name);

((!(v > 0)) ?
(function (){ throw new Error([ "Bad lambda-arg: ",arg ].join("")); })(this) :
null);
--v;
this.value=v.toString();
return this;
}

toString () {
return this.value;
}

}

class Keyword {
constructor (name) {
this.value=name.slice(1);
return this;
}

toString () {
return this.value;
}

}

class Symbol {
constructor (name) {
this.value=name;
return this;
}

toString () {
return this.value;
}

}

//
function symbol(name) {
return new Symbol(name);
}

//
function symbol_QUERY(obj) {
return (obj instanceof Symbol);
}

//
function keyword(name) {
return new Keyword(name);
}

//
function keyword_QUERY(obj) {
return (obj instanceof Keyword);
}

//
function lambda_arg(name) {
return new LambdaArg(name);
}

//
function lambda_arg_QUERY(obj) {
return (obj instanceof LambdaArg);
}

class Atom {
constructor (val) {
this.value=val;
return this;
}

}

//
function atom(val) {
return new Atom(val);
}

//
function atom_QUERY(atm) {
return (atm instanceof Atom);
}

//
function deref(a) {
return a.value;
}

//
function reset_BANG(a,v) {
return a.value=v;
}

//
function swap_BANG(a,f) {
let xs=Array.prototype.slice.call(arguments,2);
a.value=f.apply(this,[ a.value ].concat(xs));
return a["value"];
}

//
function typeid(obj) {
return (lambda_arg_QUERY(obj) ?
"lambda-arg" :
(keyword_QUERY(obj) ?
"keyword" :
(symbol_QUERY(obj) ?
"symbol" :
(vector_QUERY(obj) ?
"vector" :
(atom_QUERY(obj) ?
"atom" :
(list_QUERY(obj) ?
"list" :
(map_QUERY(obj) ?
"map" :
((obj === null) ?
"null" :
((true === obj) ?
"true" :
((false === obj) ?
"false" :
((typeof(obj) === "function") ?
"function" :
((typeof(obj) === "string") ?
"string" :
((typeof(obj) === "number") ?
"number" :
(object_QUERY(obj) ?
"object" :
(true ?
(function (){ throw new Error([ "Unknown type [",typeof(obj),"]" ].join("")); })(this) :
null)))))))))))))));
}

//
function value_QUERY(obj) {
return ((obj === null)||vector_QUERY(obj)||list_QUERY(obj)||map_QUERY(obj)||(false === obj)||(true === obj)||(typeof(obj) === "string")||(typeof(obj) === "number"));
}

//
function sequential_QUERY(arr) {
return (Array.isArray(arr)&&(!map_QUERY(arr)));
}

//
function eq_QUERY(a,b) {
let ta,tb;
ta= isa(a);
tb= isa(b);

return ((!((ta === tb)||(sequential_QUERY(a)&&sequential_QUERY(b)))) ?
false :
(function() { let ____x;
switch (ta) {
case "map":
case "list":
case "vector":
____x=   (function() {
let ok_QUERY;
ok_QUERY= true;

((a.length !== b.length) ?
ok_QUERY=false :
(function() {
for (let i=0,____break=false; (!____break); i=(i+1),undefined="while",undefined=(i < a.length)){
((!eq_QUERY(a[i],b[i])) ?
(function() {
ok_QUERY=false;
return ____break=true;
}).call(this) :
null);
}
})(this)
);
return ok_QUERY;
}).call(this);
break;
case "object":
____x=   (function() {
let ok_QUERY;
ok_QUERY= true;

((!(count(a) === count(b))) ?
ok_QUERY=false :
(function() {
for (let i=0,k=null,ks=Object.keys(a),____break=false; (!____break); i=(i+1),k="while",ks=(i < ks.length)){
k=ks[i];
((!eq_QUERY(a[k],b[k])) ?
(function() {
ok_QUERY=false;
return ____break=true;
}).call(this) :
null);
}
})(this)
);
return ok_QUERY;
}).call(this);
break;
default:
____x= (a === b);
break;
}
return ____x;}).call(this));
}

//
function object_QUERY(obj) {
return ((!((obj === null)||Array.isArray(obj))) ?
(typeof(obj) === "object") :
null);
}

//
function last(coll) {
return (coll ?
coll[(coll.length-1)] :
null);
}

//
function list() {
let xs=Array.prototype.slice.call(arguments,0);
xs["____list"]=true;
return xs;
}

//
function list_QUERY(obj) {
return (Array.isArray(obj)&&(obj.____list||((!obj.____vec)&&(!obj.____map))));
}

//
function vector_QUERY(obj) {
return (Array.isArray(obj)&&obj.____vec);
}

//
function vector() {
let xs=Array.prototype.slice.call(arguments,0);
xs["____vec"]=true;
return xs;
}

//
function map_QUERY(obj) {
return (Array.isArray(obj)&&obj.____map);
}

//
function hashmap() {
let xs=Array.prototype.slice.call(arguments,0);
((1 === (xs.length%2)) ?
(function (){ throw new Error("Odd number of hash map arguments"); })(this) :
null);
xs["____map"]=true;
return xs;
}

//
function seq(obj) {
return ((typeof(obj) === "string") ?
obj.split("") :
(Array.isArray(obj) ?
obj.slice(0) :
(object_QUERY(obj) ?
Object.entries(obj) :
null)));
}

//
function contains_QUERY(obj,x) {
return ((Array.isArray(obj)||(typeof(obj) === "string")) ?
obj.includes(x) :
(object_QUERY(obj) ?
obj.hasOwnProperty(x) :
null));
}

//
function nichts_QUERY(obj) {
return ((typeof(obj) === "undefined")||(obj === null));
}

//
function some_QUERY(obj) {
return ((typeof(obj) !== "undefined")&&(null !== obj));
}

//
function count(coll) {
return (coll ?
(((typeof(coll) === "string")||Array.isArray(coll)) ?
coll :
Object.keys(coll)).length :
0);
}

//
function concat_STAR(coll) {
let xs=Array.prototype.slice.call(arguments,1);
return coll.concat.apply(coll,xs);
}

//
function every(coll,start,step) {
return (function() {
let ret;
ret= [];

(function() {
for (let i=start,____break=false; ((!____break)&&(i < coll.length)); i=(i+step)){
ret.push(arr[i]);
}
})(this)

return ret;
}).call(this);
}

//
function evens(coll) {
return every(coll,0,2);
}

//
function odds(coll) {
return every(coll,1,2);
}

//
function interleave(c1,c2) {
let cz;
cz= ((c2.length < c1.length) ?
c2.length :
c1.length);

return (function() {
let ret;
ret= [];

(function() {
for (let i=0,____break=false; (!____break); i=(i+1),undefined="while",undefined=(i < cz)){
ret.push(c1[i],c2[i]);
}
})(this)

return ret;
}).call(this);
}

let identity;
identity= { "bind": function (mv,mf) {
return mf(mv);
},"result": function (v) {
return v;
} };

let maybe;
maybe= { "bind": function (mv,mf) {
return ((mv === null) ?
null :
mf(mv));
},"result": function (v) {
return v;
},"zero": null };

let array;
array= { "bind": function (mv,mf) {
return mv.map(mf).reduce(function (acc,v) {
return acc.concat(v);
},[]);
},"result": function (v) {
return [].concat(v);
},"zero": [],"plus": function () {
let ____args;
____args= Array.prototype.slice.call(arguments);

return Array.prototype.slice.call(arguments).reduce(function (acc,v) {
return acc.concat(v);
},[]);
} };

let state;
state= { "bind": function (mv,mf) {
return function (s) {
let x;
x= mv(s);

return mf(x[0])(x[1]);
};
},"result": function (v) {
return function (s) {
return [].concat([ v,s ]);
};
} };

let continuation;
continuation= { "bind": function (mv,mf) {
return function (c) {
return mv(function (v) {
return mf(v)(c);
});
};
},"result": function (v) {
return function (c) {
return c(v);
};
} };



module.exports = {
not_empty: not_empty,
opt: opt,
conj_BANG: conj_BANG,
conj: conj,
pop_BANG: pop_BANG,
pop: pop,
prn: prn,
LambdaArg: LambdaArg,
Keyword: Keyword,
Symbol: Symbol,
symbol: symbol,
symbol_QUERY: symbol_QUERY,
keyword: keyword,
keyword_QUERY: keyword_QUERY,
lambda_arg: lambda_arg,
lambda_arg_QUERY: lambda_arg_QUERY,
Atom: Atom,
atom: atom,
atom_QUERY: atom_QUERY,
deref: deref,
reset_BANG: reset_BANG,
swap_BANG: swap_BANG,
typeid: typeid,
value_QUERY: value_QUERY,
sequential_QUERY: sequential_QUERY,
eq_QUERY: eq_QUERY,
object_QUERY: object_QUERY,
last: last,
list: list,
list_QUERY: list_QUERY,
vector_QUERY: vector_QUERY,
vector: vector,
map_QUERY: map_QUERY,
hashmap: hashmap,
seq: seq,
contains_QUERY: contains_QUERY,
nichts_QUERY: nichts_QUERY,
some_QUERY: some_QUERY,
count: count,
concat_STAR: concat_STAR,
evens: evens,
odds: odds,
interleave: interleave,
identity: identity,
maybe: maybe,
array: array,
state: state,
continuation: continuation
};

