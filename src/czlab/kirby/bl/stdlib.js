/*Auto generated by Kirby - v1.0.0 czlab.kirby.bl.stdlib Wed Nov 01 2017 17:46:34 GMT-0700 (PDT)*/


//
function object_QUERY(obj) {
  return ((!((obj === null) || Array.isArray(obj))) ?
    (typeof (obj) === "object") :
    null);
}

//
function last(coll) {
  return coll[(coll.length - 1)];
}

//
function contains_QUERY(obj, x) {
  return ((Array.isArray(obj) || (typeof (obj) === "string")) ?
    obj.includes(x) :
    (object_QUERY(obj) ?
      obj.hasOwnProperty(x) :
      null));
}

//
function nichts_QUERY(obj) {
  return ((typeof (obj) === "undefined") || (obj === null));
}

//
function some_QUERY(obj) {
  return ((typeof (obj) !== "undefined") && (null !== obj));
}

//
function empty_QUERY(coll) {
  return (0 === count(coll));
}

//
function count(coll) {
  return (coll ?
    (((typeof (coll) === "string") || Array.isArray(coll)) ?
      coll :
      Object.keys(coll)).length :
    0);
}

//
function not_empty(coll) {
  return (empty_QUERY(coll) ?
    null :
    coll);
}

//
function concat_STAR(coll) {
  let xs = Array.prototype.slice.call(arguments, 1);
  return coll.concat.apply(coll, xs);
}

//
function opt(cur, other) {
  return ((typeof (cur) !== "undefined") ?
    cur :
    other);
}

//
function every(coll, start, step) {
  return (function() {
    let ret;
    ret = [];

    (function() {
      for (let i = start, ____break = false; ((!____break) && (i < coll.length)); i = (i + step)) {
        ret.push(arr[i]);
      }
    })(this);

    return ret;
  }).call(this);
}

//
function evens(coll) {
  return every(coll, 0, 2);
}

//
function odds(coll) {
  return every(coll, 1, 2);
}

//
function interleave(c1, c2) {
  let cz;
  cz = ((c2.length < c1.length) ?
    c2.length :
    c1.length);

  return (function() {
    let ret;
    ret = [];

    (function() {
      for (let i = 0, ____break = false; (!____break); i = (i + 1), undefined = "while", undefined = (i < cz)) {
        ret.push(c1[i], c2[i]);
      }
    })(this);

    return ret;
  }).call(this);
}



module.exports = {
  object_QUERY: object_QUERY,
  last: last,
  contains_QUERY: contains_QUERY,
  nichts_QUERY: nichts_QUERY,
  some_QUERY: some_QUERY,
  empty_QUERY: empty_QUERY,
  count: count,
  not_empty: not_empty,
  concat_STAR: concat_STAR,
  opt: opt,
  evens: evens,
  odds: odds,
  interleave: interleave
};

