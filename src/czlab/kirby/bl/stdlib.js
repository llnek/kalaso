/*Auto generated by Kirby - v1.0.0 czlab.kirby.bl.stdlib Fri Oct 27 2017 18:44:29 GMT-0700 (PDT)*/

;
//
function object_QUERY(obj) {
return (((obj === null)||Array.isArray(obj)) ?
  null :
  (typeof(obj) === "object"));
}

//
function last(coll) {
return coll[(coll.length-1)];
}

//
function contains_QUERY(obj,x) {
return ((Array.isArray(obj)||(typeof(obj) === "string")) ?
  obj.includes(x) :
  (object_QUERY(obj) ?
    obj.hasOwnProperty(x) :
    null));
}

//
function nichts_QUERY(obj) {
return ((typeof(obj) === "undefined")||(obj === null));
}

//
function some_QUERY(obj) {
return ((!(typeof(obj) === "undefined"))&&(null !== obj));
}

//
function empty_QUERY(coll) {
return (0 === count(coll));
}

//
function count(coll) {
return (coll ?
  (((typeof(coll) === "string")||Array.isArray(coll)) ?
    coll :
    Object.keys(coll)).length :
  0);
}

//
function not_empty(coll) {
return (empty_QUERY(coll) ?
  null :
  coll);
}

//
function concat_STAR(coll) {
let xs=Array.prototype.slice.call(arguments,1);
return coll.concat.apply(coll,xs);
}

//
function maybe(cur,other) {
return ((!(typeof(cur) === "undefined")) ?
  cur :
  other);
}

//
function every(coll,start,step) {
return (function() {
let ret;
ret= [];
;
(function () {let ____break=false;
for (let i = start; (!____break && (i < coll.length)); i = (i+step)) {
    ret.push(arr[i]);
;
}
}).call(this);
return ret;
}).call(this);
}

//
function evens(coll) {
return every(coll,0,2);
}

//
function odds(coll) {
return every(coll,1,2);
}

//
function interleave(c1,c2) {
let cz;
cz= ((c2.length < c1.length) ?
  c2.length :
  c1.length);
;
return (function() {
let ret;
ret= [];
;
(function () {let ____break=false;
for (let i = 0; (!____break && (i < cz)); i = (i+1)) {
    ret.push(c1[i],c2[i]);
;
}
}).call(this);
return ret;
}).call(this);
}



module.exports = {
  object_QUERY: object_QUERY,
  last: last,
  contains_QUERY: contains_QUERY,
  nichts_QUERY: nichts_QUERY,
  some_QUERY: some_QUERY,
  empty_QUERY: empty_QUERY,
  count: count,
  not_empty: not_empty,
  concat_STAR: concat_STAR,
  maybe: maybe,
  evens: evens,
  odds: odds,
  interleave: interleave
};

