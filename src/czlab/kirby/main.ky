;; Copyright (c) 2013-2017, Kenneth Leung. All rights reserved.
;; The use and distribution terms for this software are covered by the
;; Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
;; which can be found in the file epl-v10.html at the root of this distribution.
;; By using this software in any fashion, you are agreeing to be bound by
;; the terms of this license.
;; You must not remove this notice, or any other, from this software.

(ns ^{:doc ""
      :author "Kenneth Leung"}

  czlab.kirby.main

  (require ["./cg/transpiler" :as kirby]
           ["./bl/macros" :as macros]
           ["./bl/stdlib" :as std]
           ["./rt/runtime" :as rt])

  (require ["node-getopt" :as gopt]
           ["watch" :as watcher]
           ["path" :as path]
           ["fs" :as fs]))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(def- validFlag? /-h\b|-r\b|-v\b|-b\b|-s\b|-t\b/)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(def- error #(do (std.println %) (process.exit 1)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(def- opt
  (-> (gopt.create
        [[:h "help" "display this help"]
         [:v "version" "show version"]
         [:r "run" "run .kl files"]
         [:w "watch" "auto-compile changed files"]
         [:b "browser-bundle" "bundle for browser"]
         [:m "map" "generate source maps"]
         [:t "tree" "show AST"]])
      (.setHelp (str "kirby [OPTION] [<infile>] [<outfile>]\n\n"
                     "<outfile> default to <infile> with \".js\" extension\n\n"
                     "Also compile stdin to stdout\n"
                     "eg. $ echo '(console.log \"hello\")' | kirby\n\n"
                     "[[OPTIONS]]\n\n"))
      (.bindHelp)
      (.parseSystem)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;when no args do stdin -> stdout compile or run repl and return null to
;;halt operations.
(defn- handleNoArgs "" []
  (var pout (.-stdout process)
       source ""
       pin (.-stdin process))
  (pin.resume)
  (pin.setEncoding "utf8")
  (pin.on :data
          #(+= source (.toString %)))
  (pin.on :end
          #(try
             (->> (process.cwd)
                  (kirby.transpile source)
                  (pout.write))
             (catch e (error! e))))
  (pout.on :error error)
  (pin.on :error error)
  (delay #(when (= 0 pin.bytesRead)
            (pin.removeAllListeners :data)
            (runrepl)) 20))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- compileFiles "" []
  (var fin nil fout nil)
  (if (first opt.argv)
    (set! fin (first opt.argv))
    (error! "No Input file"))
  (set! fout (nth opt.argv 1))
  (when-not fout
    (set! fout (fin.replace /\.kl$/ ".js"))
    (if (= fout fin)
      (error! "Input file must have extension \".kl\"")))
  (try
    (var wantMap? (get opt.options :map)
         source nil
         dbgAST? (get opt.options :tree))
    (if-not dbgAST?
      (std.println "kirby v1.0.0"
                   ": compiling: " fin " -> " fout))
    (set! source (fs.readFileSync fin "utf8"))
    (if dbgAST?
      (kirby.dbgAST source fin dirs)
      (let [out (if wantMap?
                  (kirby.transpileWithSrcMap source fin)
                  (kirby.transpile source fin))]
        (fs.writeFileSync fout out "utf8")))
    (catch e
      (error! e))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- init "" []
  (set! require.extensions
        ".kl"
        (fn [module fname]
          (var kb (require "./cg/transpiler")
               code (fs.readFileSync fname "utf8"))
          (module._compile
            (kb.transpile code
                          (path.relative
                            (process.cwd) fname))
            fname)))
  (rt.init)
  (macros.load))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn main "" []
  (init)
  (compileFiles))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(main)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;EOF


