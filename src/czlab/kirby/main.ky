;; Copyright (c) 2013-2017, Kenneth Leung. All rights reserved.
;; The use and distribution terms for this software are covered by the
;; Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
;; which can be found in the file epl-v10.html at the root of this distribution.
;; By using this software in any fashion, you are agreeing to be bound by
;; the terms of this license.
;; You must not remove this notice, or any other, from this software.
(ns ^{:doc ""
      :author "Kenneth Leung"}
  czlab.kirby.main
  (require ["node-getopt" :as gopt]
           ["watch" :as watcher]
           ["path" :as path]
           ["fs" :as fs])
  (require ["./compiler" :as tx]
           ["./stdlib" :as std]
           ["./engine" :as rt]))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(def- validFlag? /-h\b|-r\b|-v\b|-b\b|-s\b|-t\b/)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(def- error! #(do (println %) (process.exit 1)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(def- opt
  (-> (gopt/create
        [[:h "help" "display this help"]
         [:v "version" "show version"]
         [:r "run" "run .ky files"]
         [:w "watch" "auto-compile changed files"]
         [:b "browser-bundle" "bundle for browser"]
         [:m "source-map" "generate source maps"]
         [:f "format" "format source code"]
         [:t "show-ast" "show AST"]])
      (.setHelp (str "kirby [OPTION] [<infile>] [<outfile>]\n\n"
                     "<outfile> default to <infile> with \".js\" extension\n\n"
                     "Also compile stdin to stdout\n"
                     "eg. $ echo '(console.log \"hello\")' | kirby\n\n"
                     "[[OPTIONS]]\n\n"))
      (.bindHelp)
      (.parseSystem)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- handleNoArgs
  "when no args do stdin -> stdout compile or run repl and return null to
  halt operations."
  []
  (var pout (.-stdout process)
       source ""
       pin (.-stdin process))
  (pout.on :error error!)
  (doto pin
    (.setEncoding "utf8")
    (.resume)
    (.on :data #(+= source (.toString %)))
    (.on :end #(try
                 (->> (process/cwd)
                      (tx/transpile source)
                      (pout.write)) (catch e (error! e))))
    (.on :error error!))
  (delay #(when (= 0 pin.bytesRead)
            (pin.removeAllListeners :data) (runrepl)) 20))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- compileFiles "" []
  (var fin
       (if (1st opt.argv)
         (1st opt.argv)
         (error! "No Input file"))
       fout (2nd opt.argv))
  (when-not fout
    (set! fout (fin.replace /\.ky$/ ".js"))
    (if (= fout fin)
      (error! "Input file must have extension \".ky\"")))
  (try
    (var options opt.options
         {:keys [source-map
                 show-ast]} options)
    (var source nil)
    (if-not show-ast
      (println (str "kirby v"
                    (.-version tx))
               ": compiling: " fin " -> " fout))
    (set! source (fs/readFileSync fin "utf8"))
    (if show-ast
      (tx/dbgAST source fin dirs)
      (let [out (if source-map
                  (tx/transpileWithSrcMap source fin options)
                  (tx/transpile source fin options))]
        (fs/writeFileSync fout out "utf8")))
    (catch e
      (error! e))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- init "" []
  (set-in! require.extensions
           ".ky"
           (fn [module fname]
             (var code
                  (.transpile
                    (require "./compiler")
                    (fs/readFileSync fname "utf8")
                    (path/relative (process/cwd) fname)))
             (module._compile code fname)))
  (rt.init))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn main "" []
  (init)
  (compileFiles))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(main)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;EOF

