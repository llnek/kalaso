;; Copyright (c) 2013-2018, Kenneth Leung. All rights reserved.
;; The use and distribution terms for this software are covered by the
;; Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
;; which can be found in the file epl-v10.html at the root of this distribution.
;; By using this software in any fashion, you are agreeing to be bound by
;; the terms of this license.
;; You must not remove this notice, or any other, from this software.

(ns ^{:doc ""
      :author "Kenneth Leung"}

  czlab.kirby.main

  (:require ["node-getopt" :as getopt]
            ["child_process" :as cp]
            ["watch" :as watch]
            ["path" :as path]
            ["fs" :as fs])
  (:require ["./compiler" :as tx]
            ["./engine" :as rt]
            ["./stdlib"
             :as std
             :refer [object? println]]))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- error! "" [msg] (println msg) (process.exit 1))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- compileSource "" [opt]
  (var [fin fout] opt.argv
       options opt.options)
  ;need to get the absolute path of file
  (if-not fin
    (error! "No source file")
    (set! fin (path/resolve fin)))
  (if-not (ends-with? fin ".ky")
    (error! "Source file extension != '.ky'"))
  (if-not fout
    (set! fout (fin.replace #/\.ky$/g ".js")))
  (try
    (var {:keys [source-map
                 format show-ast]} options)
    (if-not show-ast
      (println (str "kirby v" (.-version tx))
               ": compiling: " fin " -> " fout))
    (var source (rt/slurp fin))
    (if show-ast
      (println (tx/dbgAST source fin))
      (let [[ret err]
            (tx/transpile source fin options)]
        (rt/spit fout ret)
        (if err (throw err))))
    nil
    (catch e (error! e))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- init "" []
  (rt.init tx.version))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- doWatch "" [cwd]
  (std/println "Watching" cwd "for file changes...")
  (watch/watchTree
    cwd
    (object :ignoreDirectoryPattern #/node_modules/
            :ignoreDotFiles true
            :filter (fn [f stat]
                      (or (ends-with? f ".ky")
                          (.isDirectory stat))))
    (fn [f curr prev]
      (cond
        (and (object? f)
             (nil? prev curr))
        (do->nil "finished walking the tree")
        (and curr
             (zero? curr.nlink))
        (do->nil "f was removed")
        :else
        (do ;;(prev === null) {/*new file*/}
            ;;f is a new file or changed
          (cp/spawn "bin/kirby.js"
                    [(f.slice (+1 (alen cwd)))]
                    (object :stdio "inherit")))))) nil)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- pcli "" ^Boolean [gopt]
  (var opt (.parseSystem gopt)
       {:keys [version
               repl watch help]} opt.options)
  (cond
    version (console.info tx.version)
    watch (doWatch (process/cwd))
    repl (rt/runRepl)
    (or help
        (empty? opt.argv))
    (.showHelp gopt)
    :else (compileSource opt)) #t)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn main "" []
  (var gopt
       (->
         (getopt/create
           [[:v "verbose" "show details of the source"]
            [:w "watch" "auto-compile changed files"]
            [:m "source-map" "generate source maps"]
            [:f "format" "format source code"]
            [:V "version" "show version"]
            [:r "repl" "start a repl"]
            [:h "help" "show help"]
            [:t "show-ast" "show AST"]])
         (.setHelp
            (str "kirby [OPTIONS] [<infile>] [<outfile>]\n\n"
                 "<outfile> defaults to <infile>.js\n\n"
                 "[[OPTIONS]]\n\n"))
         (.bindHelp )))
  (and (init)
       (pcli gopt)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(main)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;EOF

