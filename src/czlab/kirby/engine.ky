;; Copyright Â© 2013-2018, Kenneth Leung. All rights reserved.
;; The use and distribution terms for this software are covered by the
;; Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
;; which can be found in the file epl-v10.html at the root of this distribution.
;; By using this software in any fashion, you are agreeing to be bound by
;; the terms of this license.
;; You must not remove this notice, or any other, from this software.

(ns ^{:doc ""
      :author "Kenneth Leung"}

  czlab.kirby.engine

  (:require ["readline" :as readline])
  (:require ["fs" :as fs])
  (:require ["./reader" :as reader]
            ["./stdlib"
             :as std
             :refer [pairs? stringify contains?
                     atom? list? map? some?
                     LambdaArg Keyword println
                     nichts? not-empty object?
                     Symbol into! prn obj? set?
                     Atom symbol swap!
                     atom vector vector?
                     typeid sequential?
                     conj! count truthy? falsy?
                     last pop! opt??
                     keyword? symbol? seq]]))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(const EXPKEY "da57bc0172fb42438a11e6e8778f36fb")
(const KBSTDLR "kirbystdlibref")
(const KBPFX "czlab.kirby.")
(const KBSTDLIB (str KBPFX "stdlib"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;example of free-form
(const- macro_assert ```
  (macro* assert* [c msg] `(if* ~c true (throw* ~msg))) ```)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(const- GLOBAL (if (undef? window) undefined  window))
(const- prefix "kirby> ")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- expect! "" [k]
  (if-not (inst? Symbol k)
    (raise! "expecting symbol")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(deftype LEXEnv []
  "Lexical Environment"
  (constructor "Create and initialize
               a new env with these symbols,
               and optionally a parent env"
    [parent vars vals]
    (oset! this
           :data {}
           :libs {}
           :vars {}
           :par nil)
    (if parent
      (oset! this :par parent))
    (for [i 0 e nil ev nil sz (n# vars)
          :while (< i sz) :recur (+1 i)]
      (set! e (.@i vars)
            ev (.-value e))
      (cond
        (== ev "&")
        (do->break!
          (assoc! @@data
                  $(.@+i vars) (slice vals i)))
        (starts-with? ev "&")
        (do->break!
          (assoc! @@data
                  (rest ev) (slice vals i)))
        :else
        (assoc! @@data ev (.@i vals)))))
  (find "Find the env
        containing this symbol"
    ^LEXEnv [k]
    (expect! k)
    (cond
      (contains? @@data k.value) this
      (some? @@par) (.find @@par k)))
  (set "Bind this symbol,
       value to this env"
    ^Any [k v]
    (expect! k)
    (assoc! @@data k.value v) v)
  (get "Get value of
       this symbol"
    ^Any [k]
    (expect! k)
    (var env (.find this k))
    (if env (get env.data k.value) k.value))
  (select ""
    ^Map [what]
    (reduce (fn [acc [k v]]
              (if (case what
                    :fn (fn? v)
                    :var (not (fn? v)) #t)
                (assoc! acc (str k) v)) acc) {} (seq this.data)))
  (prn "Print set of vars"
    ^String []
    (std/prn @@data))

  (getLib "" [alias]
    (if @@par
      (.getLib @@par alias)
      (get @@libs alias)))

  (addVar "" [sym info]
    (if @@par
      (.addVar @@par sym info)
      (do->nil (var s (str sym)
                    m (get @@vars s))
               (if m (raise! "var: " s " already added"))
               (assoc! @@vars s info))))

  (getVar "" [sym]
    (if @@par
      (.getVar @@par sym)
      (get @@vars (str sym))))

  (hasVar? "" [sym]
    (if @@par
      (.hasVar? @@par sym)
      (contains? @@vars (str sym))))

  (addLib "" [alias lib]
    (if @@par
      (.addLib @@par alias lib)
      (do->nil
        (if (contains? @@libs alias)
          (raise! "Library alias already added: " alias))
        (assoc! @@libs alias lib)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defmacro prnArr
  "" ^:private [arr] `(map #(prn %) ~arr))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn Function.prototype.clone "" ^Function []
  ;;run the old function with the new 'this'
  (with-local-vars
   [orig this
    cloned #(apply orig this ____args)])
  (each-key
    (fn [v k] (oset! cloned k v)) orig) cloned)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- prnStr "" ^String [&xs] (join " " (prnArr xs)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- prnLn "" [&xs] (each #(println %) (prnArr xs)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn slurp "" ^String [f] (fs/readFileSync f "utf-8"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn spit "" [f s] (do->nil (fs/writeFileSync f s "utf-8")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- clone "" ^Any [obj]
  (with-local-vars [oid (typeid obj)])
  (case oid
    (:vector :map :list)
    (into! oid (slice obj))
    :array
    (slice obj)
    :object
    (reduce
      (fn [acc [k v]]
        (oset! acc k v) acc) `{} (seq obj))
    :function
    (obj.clone)
    ;;else
    (raise! "clone of non-collection: " oid)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- cons "" ^Array [a b] (concat [a] b))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- conj "" ^Array [arr & xs]
  (cond
    (list? arr)
    (into! :list
           (-> (xs.reverse)
               (concat arr)))
    (some? arr)
    (into! :vector
           (concat arr xs))
    :else arr))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- fapply "" ^Any [f & xs] (f.apply this xs))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- fmap "" ^Array [f arr] (map f arr))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- resolveJS "" ^Array [s]
  [(if (contains? s ".")
     (-> (.exec #/^(.*)\.[^\.]*$/g s)
         (nth 1) (eval))
     GLOBAL)
   (eval s)])

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- filterJS "" ^Any [obj]
  (with-local-vars [s (stringify obj)])
  (if (not-empty s) (JSON/parse s)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- withMeta "" ^Object [obj m]
  (with-local-vars [ret (clone obj)])
  (oset! ret :____meta m) ret)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- meta "" ^Map [obj]
  (if-not (or (objectMap? obj)
              (objectSet? obj)
              (object? obj)
              (array? obj)
              (fn? obj))
    (raise! "can't get meta from: " (typeid obj)))
  (get obj :____meta))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- evalJS "" ^Any [s]
  (filterJS (eval (.toString s))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- invokeJS "" ^Any [method & xs]
  (with-local-vars [[obj f] (resolveJS method)])
  (filterJS (apply f obj xs)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(const- *intrinsics* {

  "macroexpand*" #(println (std/prn (expand?? %1 (or %2 g_env))))
  "macros*" (fn [&[fout]]
              (with-local-vars [s (std/prn CACHE)])
              (if fout (spit fout s) (println s)))
  "env*" (fn [what & [env fout]]
           (with-local-vars [s (std/prn (.select (or env g_env) what))])
           (if fout (spit fout s) (println s)))
  "is-same?" #(== %1 %2)
  "is-nil?" #(nil? %)
  "obj-type*" std/typeid
  "gensym*" std/gensym
  "is-eq?" std/eq?
  "is-some?" std/some?
  "str*" (fn [&xs] (join "" xs))
  "slice*" (fn [arr & xs] (Array.prototype.slice.apply arr xs))
  "throw*" (fn [&xs] (throw (new Error (join "" xs))))
  "#f?" #(false? %)
  "#t?" #(true? %)
  "is-str?" #(string? %)
  "is-keyword?" std/keyword?
  "is-symbol?" std/symbol?
  "keyword*" std/keyword
  "symbol*" std/symbol
  "println*" prnLn
  "prn*" prnStr
  "slurp*" slurp
  "spit*" spit
  "<" #(< %1 %2)
  "<=" #(<= %1 %2)
  ">" #(> %1 %2)
  ">=" #(>= %1 %2)
  "/" (fn [a &xs] (reduce #(div %1 %2) a xs))
  "+" (fn [&xs] (reduce #(+ %1 %2) 0 xs))
  "-" (fn [a &xs] (reduce #(- %1 %2) a xs))
  "*" (fn [&xs] (reduce #(* %1 %2) 1 xs))
  "not=" #(not= %1 %2)
  "=" #(= %1 %2)
  "is-contains?" std/contains?
  "is-vector?" std/vector?
  "is-list?" std/list?
  "is-map?" std/map?
  "is-array?" #(Array/isArray %)
  "object*" std/object
  "vector*" std/vector
  "list*" std/list
  "hashmap*" (fn [&xs]
               (apply std/assoc!
                      this (std/concat [{}] xs)))
  "values*" #(Array.from (.values %))
  "keys*" #(Array.from (.keys %))
  "get*" #(get %1 %2)
  "not*" #(if % #f #t)
  "dec*" #(-1 %)
  "inc*" #(+1 %)
  "is-even?" #(= 0 (std/modulo % 2))
  "is-odd?" #(= 1 (std/modulo % 2))
  "is-sequential?" std/sequential?
  "concat*" std/concat*
  "count*" std/count
  "cons*" cons
  "rest*" #(if % (slice % 1) [])
  "nth*" #(get %1 %2)
  "first*" #(get % 0)
  "is-empty?" #(= 0 (std/count %))
  "not-empty*" std/not-empty
  "apply*" fapply
  "map*" fmap
  "evens*" std/evens
  "odds*" std/odds
  "meta*" meta
  "conj*" conj
  "seq*" std/seq
  "is-atom?" std/atom?
  "atom*" std/atom
  "deref*" std/deref
  "reset*" std/reset!
  "swap*" std/swap!
  "with-meta*" withMeta
  "js-eval*" evalJS
  "js*" invokeJS
  "type*" #(typeof %) })

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(const- CACHE {})

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn setMacro "Register a new macro"
  [cmd func]
  (do->nil
    (when (and cmd
               (fn? func))
      (set! cmd $(cmd))
      (when-not (contains? cmd "/")
        (with-local-vars [c (std/peekNSP)])
        (if-not c (raise! "missing namespace"))
        (set! cmd (str (get c :id) "/" cmd)))
      ;;(println "adding macro ==== " cmd)
      (assoc! CACHE cmd func))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn getMacro "Get macro" ^Function [cmd]
  (with-local-vars [skip ? nsp ? mname ?])
  (set! cmd $(cmd))
  (cond
    (contains? cmd "/")
    (let [[p c](.split cmd "/")
          tmp nil
          libObj (.getLib (genv) p)]
      (set! mname c)
      (cond
        (== p KBSTDLR) (set! nsp KBSTDLIB)
        (nichts? libObj) (true! skip)
        :else (if-not (get libObj EXPKEY)
                (true! skip)
                (set! nsp (get (get libObj EXPKEY) :ns)))))
    :else
    (let [m (.getVar (genv) cmd)]
      (set! mname cmd
            nsp (if m (get m :ns)))))
  (when-not skip
    (when (nil? nsp)
      (if (get CACHE (str KBSTDLIB "/" mname))
        (set! nsp KBSTDLIB)))
    (when (string? nsp)
      (get CACHE (str nsp "/" mname)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- dbg "" [x] (do->nil (println "DBG: " (prn x))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn readAST "" ^Array [s]
  (with-local-vars [ret (reader/parse s)])
  (if (single? ret)
    (set! ret (_1 ret))) ret)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- backtick "" ^Array [ast]
  (with-local-vars [lst? #(and (sequential? %)
                               (not-empty %))])
  (cond
    (not (lst? ast))
    ['quote ast]
    ;;
    (and (symbol? (_1 ast))
         (== (_1 ast) "unquote"))
    (_2 ast)
    ;;
    (and (lst? (_1 ast))
         (symbol? (_1 (_1 ast)))
         (== (_1 (_1 ast)) "splice-unquote"))
    ['concat* (_2 (_1 ast)) (backtick (rest ast))]
    ;;
    :else
    ['cons* (backtick (_1 ast))
            (backtick (rest ast))]))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- isMacroCall? "" [ast env]
  (and (pairs? ast) (symbol? (_1 ast)) (getMacro $(_1 ast))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn expand?? "" ^Any [ast env]
  (with-local-vars [cmd ? mac ?])
  (while (isMacroCall? ast env)
    (set! cmd $(_1 ast)
          mac (getMacro cmd)
          ast (apply mac this (rest ast)))) ast)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- eval* "" ^Any [ast env]
  (cond
    (string? ast) (std/unquote-str ast)
    (keyword? ast) (str ast)
    (symbol? ast) (env.get ast)
    ;complex data
    (pairs? ast)
    (map #(compute % env) ast)
    (list? ast)
    (into! :list (map #(compute % env) ast))
    (vector? ast)
    (into! :vector (map #(compute % env) ast))
    (obj? ast)
    (do-with [m `{}]
      (for [i 0 sz (n# ast)
            :while (< i sz) :recur (+2 i)]
        (assoc! m
                (compute (.@i ast) env)
                (compute (.@+i ast) env))))
    (map? ast)
    (do-with [m {}]
      (for [i 0 sz (n# ast)
            :while (< i sz) :recur (+2 i)]
        (assoc! m
                 (compute (.@i ast) env)
                 (compute (.@+i ast) env))))
    (set? ast)
    (do-with [m #{}]
      (for [i 0 sz (n# ast)
            :while (< i sz) :recur (+1 i)]
        (conj! m (compute (.@i ast) env))))
    :else ast))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- doAND "" ^Boolean [ast env]
  (with-local-vars [ret #t])
  (for [i 1 sz (n# ast)
        :while (< i sz) :recur (+1 i)]
    (set! ret (compute (.@i ast) env))
    (if-not ret (break-out-of-loop!))) ret)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- doOR "" ^Boolean [ast env]
  (with-local-vars [ret nil])
  (for [i 1 sz (n# ast)
        :while (< i sz) :recur (+1 i)]
    (set! ret (compute (.@i ast) env))
    (if ret (break-out-of-loop!))) ret)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- doLET "" ^Array [ast env]
  (with-local-vars [e (new LEXEnv env)
                    binds (_2 ast)])
  (for [i 0 sz (n# binds)
        :while (< i sz) :recur (+2 i)]
    (e.set (.@i binds)
           (compute (.@+i binds) e)))
  [(_3 ast) e])

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;(macro* name args body)
(defn- doMACRO "" [ast env]
  (with-local-vars [name $(_2 ast)
                    nsp (std/peekNSP)])
  (set! nsp (if nsp (get nsp :id) KBSTDLIB))
  (if-not (contains? name "/")
    (set! name (str nsp "/" name)))
  (do->nil (setMacro name
                     (fn->raw (_3 ast)
                              (.@3 ast) env))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- doTRY "" ^Any [ast env]
  (with-local-vars [a3 (_3 ast)])
  (try
    (compute (_2 ast) env)
    (catch e
      (if (and a3 (== "catch*"
                      (_1 a3)))
        (do (if (inst? Error e)
              (set! e (.-message e)))
            (compute (_3 a3)
                     (new LEXEnv
                          env [(_2 a3)] [e])))
        (throw e)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- doIF "" ^Any [ast env]
  (with-local-vars [kond (compute (.@1 ast) env)
                    a2 (.@2 ast)
                    a3 (.@3 ast)])
  (if (falsy? kond)
    (if-not (undef? a3) a3) a2))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- form* "" ^Any [ast env]
  (with-local-vars [el (eval* ast env)])
  (cond
    ;if a data structure just return it
    (or (vector? ast) (obj? ast)
        (set? ast)(map? ast) (list? ast)) (atom el)
    (array? el)
    (let [f (_1 el)
          c (if (fn? f) f.____code)]
      (cond
        ;is it a wrapper only, look for the wrapped sexpr
        (array? c)
        [(_2 c) (new LEXEnv (_3 c) (_1 c) (rest el))]
        ;a raw function, run it
        (fn? f)
        (atom (apply f this (rest el)))
        ;no idea
        :else (atom el)))
    ;no idea
    :else (atom el)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- fn->raw "Wrap the function body and args inside
               a native js function"
  ^Function [fargs fbody env]
  (doto #(compute fbody (new LEXEnv env fargs ____args))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(const- *spec-forms* {

  "def*" (fn [a e] (atom (e.set (.@1 a)
                                (compute (.@2 a) e))))
  "and*" #(atom (doAND %1 %2))
  "or*" #(atom (doOR %1 %2))
  "let*" #(doLET %1 %2)
  "quote" #(atom (2nd %1))
  "syntax-quote" #([(backtick (2nd %1)) %2])
  "macro*" #(atom (doMACRO %1 %2))
  "try*" #(atom (doTRY %1 %2))
  "do*" (fn [a e]
          (eval* (.slice a 1 -1) e)
          [(nth a (last-index a)) e])
  "if*" #([(doIF %1 %2) %2])
  "lambda*" #(atom (fn->raw (.@1 %1) (.@2 %1) %2)) })

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn compute "Interpret a expression" ^Any [expr cenv]
  (with-local-vars
    [g1 #(if (pairs? %) (_1 %) "")
     env (or cenv g_env)
     ret (loop [ast (expand?? expr env)]
           (with-local-vars
             [cmd $(g1 ast)
              fc (get *spec-forms* cmd)
              res (cond
                    (not (array? ast))
                    (atom (eval* ast env))
                    (empty? ast)
                    (atom ast)
                    (fn? fc)
                    (fc ast env)
                    :else
                    (form* ast env))])
           (if (atom? res)
             res
             (do (set! env (_2 res))
                 (recur (expand?? (_1 res) env)))))])
  (if (undef? @ret) nil @ret))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn newEnv "Create a new interpreter environment" ^LEXEnv []
  (do-with [ret (new LEXEnv)]
    (each-key (fn [v k]
                (.set ret (symbol k) v)) *intrinsics*)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn runRepl "Start a interactive session" []
  (with-local-vars
    [ss (readline/createInterface process.stdin
                                  process.stdout)
     z (alen prefix)
     pt #(do (ss.setPrompt prefix z)
             (ss.prompt ))
     rl (fn [line]
          (try (if line (println (reval line)))
               (catch e (println e))) (pt))
     cl #(do (println "Bye!") (process.exit 0))])
  (ss.on :close cl)
  (ss.on :line rl)
  (init)
  (println prefix "Kirby REPL v" *version*) (pt))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- reval "Eval one or more expressions" ^Any [expr & xs]
  (with-local-vars [f (comp prn compute readAST)
                    ret (f expr)])
  (each #(set! ret (f %)) xs) ret)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(def- inited? false
      *version* "" g_env nil)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn init "Set up the runtime environment" ^Boolean [ver]
  (when-not inited?
    (set! *version* ver g_env (newEnv))
    (true! inited?)) inited?)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn genv "Returns the runtime environment" [] g_env)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;EOF

