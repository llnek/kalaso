/*Auto generated by Kirby - v1.0.0 czlab.kirby.cg.transpiler Fri Nov 17 2017 14:40:44 GMT+1100 (AEDT)*/

const std = require("../bl/stdlib");
const lambda_DASH_arg_QUERY = std["lambda_DASH_arg_QUERY"];
const hashmap = std["hashmap"];
const pairs_QUERY = std["pairs_QUERY"];
const contains_QUERY = std["contains_QUERY"];
const last = std["last"];
const typeid = std["typeid"];
const prn = std["prn"];
const primitive = std["primitive"];
const map_QUERY = std["map_QUERY"];
const vector_QUERY = std["vector_QUERY"];
const opt_QUERY__QUERY = std["opt_QUERY__QUERY"];
const some_QUERY = std["some_QUERY"];
const primitive_QUERY = std["primitive_QUERY"];
const not_DASH_empty = std["not_DASH_empty"];
const conj_BANG = std["conj_BANG"];
const list_QUERY = std["list_QUERY"];
const extendAttr = std["extendAttr"];
const gensym = std["gensym"];
const count = std["count"];
const symbol = std["symbol"];
const keyword = std["keyword"];
const symbol_QUERY = std["symbol_QUERY"];
const keyword_QUERY = std["keyword_QUERY"];
const rdr = require("../bl/lexer");
const tnode = rdr["tnode"];
const tnodeEx = rdr["tnodeEx"];
const psr = require("../bl/parser");
const rt = require("../rt/runtime");
const fs = require("fs");
const path = require("path");
const esfmt = require("esformatter");
const kirbystdlibref = std;
const ERRORS_DASH_MAP = {
  "e0": "Syntax Error",
  "e1": "Empty statement",
  "e2": "Invalid characters in function name",
  "e3": "End of File encountered, unterminated string",
  "e4": "Closing square bracket, without an opening square bracket",
  "e5": "End of File encountered, unterminated array",
  "e6": "Closing curly brace, without an opening curly brace",
  "e7": "End of File encountered, unterminated javascript object '}'",
  "e8": "End of File encountered, unterminated parenthesis",
  "e9": "Invalid character in var name",
  "e10": "Extra chars at end of file. Maybe an extra ')'.",
  "e11": "Cannot Open include File",
  "e12": "Invalid no of arguments to ",
  "e13": "Invalid Argument type to ",
  "e14": "End of File encountered, unterminated regular expression",
  "e15": "Invalid vararg position, must be last argument.",
  "e16": "Invalid arity (args > expected) to ",
  "e17": "Invalid arity (args < expected) to "
};
const MODULE_DASH_VERSION = "1.0.0";
var EXTERNS = null;
var SPEC_DASH_OPS = {};
var MATH_DASH_OP_DASH_REGEX = /^[-+][0-9]+$/;
//
const simpleton_QUERY = function(ast) {
  return ((typeof (ast) === "undefined") || (typeof (ast) === "string") || (typeof (ast) === "number") || (typeof (ast) === "boolean") || (ast === null));
}
//
const exprHint = function(ast, flag) {
  let x = ast;
  if (simpleton_QUERY(ast)) {
    x = primitive(ast);
  }
  x["____expr"] = flag;
  return x;
}
//
const stmt_QUERY = function(ast) {
  if (simpleton_QUERY(ast)) {
    throw new Error("Cant test expr? on primitive");
  }
  return (false === ast.____expr);
}
//
const error_BANG = function(e) {
  let G____8 = Array.prototype.slice.call(arguments, 1);
  let G____9 = G____8;
  let line,
    file,
    msg;
  line = G____9[0];
  file = G____9[1];
  msg = G____9[2];
  return (function() {
    throw new Error([ERRORS_DASH_MAP[e],(msg ?
      [" : ", msg].join("") :
      null),(line ?
      ["\nLine no ", line].join("") :
      null),(file ?
      ["\nFile ", file].join("") :
      null)].join("")) ;
  }).call(this);
}
//
const syntax_BANG = function(ecode) {
  let G____10 = Array.prototype.slice.call(arguments, 1);
  let G____11 = G____10;
  let ast,
    cmd;
  ast = G____11[0];
  cmd = G____11[1];
  return error_BANG(ecode, (ast ?
    ast.line :
    0), (ast ?
    ast.source :
    0), cmd);
}
//
const pad = function(z) {
  return " ".repeat(z);
}
//
const testre_QUERY = function(re, x) {
  return (x ?
    re.test(x) :
    null);
}
//
const node_QTE = function(obj, src) {
  if ( (obj && src && (!simpleton_QUERY(obj))) ) {
    (obj.source = src.source, obj.column = src.column, obj.line = src.line);
  }
  return obj;
}
//
const destructVec = function(lhs, keys) {
  let as,
    e,
    ev;
  for (let i = 0, sz = kirbystdlibref.count(lhs), ____break = false; ((!____break) && (i < sz)); i = (i + 1)) {
    (e = lhs[i], ev = [e].join(""));
    if (symbol_QUERY(e)) {
      if ( (ev === "_") ) {
        null;
      } else {
        if ( (ev === "&") ) {
          keys[["&", lhs[i + 1]].join("")] = i;
          ++i;
        } else {
          if (ev.startsWith("&")) {
            keys[ev] = i;
          } else {
            if (true) {
              keys[ev] = i;
            }
          }
        }
      }
    } else {
      if (keyword_QUERY(e)) {
        if ( (ev === "as") ) {
          ++i;
          as = [lhs[i]].join("");
        } else {
          throw new Error(["bad keyword: :", ev].join(""));
        }
      } else {
        null;
      }
    }
  }
  return as;
}
//
const destructMap = function(lhs, keys) {
  let as,
    e,
    ev;
  for (let i = 0, sz = kirbystdlibref.count(lhs), ____break = false; ((!____break) && (i < sz)); i = (i + 1)) {
    (e = lhs[i], ev = [e].join(""));
    if (keyword_QUERY(e)) {
      if ( ((ev === "keys") || (ev === "strs")) ) {
        let ks = lhs[i + 1];
        ++i;
        for (let j = 0, sz = kirbystdlibref.count(ks), ____break = false; ((!____break) && (j < sz)); j = (j + 1)) {
          keys[[ks[j]].join("")] = null;
        }
      } else {
        if ( (ev === "as") ) {
          ++i;
          as = [lhs[i]].join("");
        } else {
          null;
        }
      }
    } else {
      throw new Error(["bad destruct field: ", typeid(e)].join(""));
    }
  }
  return as;
}
//
const destruct1 = function(lhs) {
  let as = null;
  let out = [];
  let keys = {};
  if (vector_QUERY(lhs)) {
    as = destructVec(lhs, keys);
  } else {
    if (map_QUERY(lhs)) {
      as = destructMap(lhs, keys);
    } else {
      if (symbol_QUERY(lhs)) {
        keys[[lhs].join("")] = null;
      } else {
        if (true) {
          throw new Error(["cant destruct with: ", typeid(lhs)].join(""));
        }
      }
    }
  }
  return [as, keys];
}
//
const destruct0 = function(cmd, lhs, rhs, env) {
  let G____12 = destruct1(lhs);
  let as,
    keys;
  as = G____12[0];
  keys = G____12[1];
  let kdefs = [];
  let ka = null;
  let kvals = tnode();
  if ( (0 === kirbystdlibref.count(as)) ) {
    as = gensym("A____");
  }
  as = rdr.jsid(as);
  let G__1 = keys;
  Object.entries(G__1).forEach(function(e) {
    return (function(v, k) {
      let rest_QUERY = false;
      if (k.startsWith("&")) {
        (rest_QUERY = true, k = k.slice(1));
      }
      k = rdr.jsid(k);
      conj_BANG(kdefs, k);
      return kvals.add([k, "=", as,((v === null) ?
        ["[\"", k, "\"];\n"].join("") :
        (rest_QUERY ?
          [".slice(", v, ");\n"].join("") :
          (true ?
            ["[", v, "];\n"].join("") :
            null)))].join(""));
    })(e[1], e[0]);
  });
  kvals.prepend([cmd, " ", kdefs.join(","), ";\n"].join(""));
  return [[tnodeEx([cmd, " ", rdr.jsid(as), "= ", tx_STAR(rhs, env), ";\n"]), kvals], kdefs];
}
//
const txTree = function(root, env) {
  let ret = node_QTE(tnode(), root);
  let G__2 = root;
  for (let G__4 = 0, G__3 = false, ____break = false; ((!____break) && ((!G__3) && (G__4 < G__2.length))); G__4 = (G__4 + 1)) {
    let r = G__2[G__4];
    let tmp = tx_STAR(r, env);
    if ( (!true) ) {
      G__3 = true;
    }
    if ( ((!G__3) && some_QUERY(tmp)) ) {
      ret.add([tmp, "\n"]);
    }
  }
  null;
  return ret;
}
//
const txExpr = function(atoms, env) {
  return atoms.forEach(function(a, i, arr) {
    return arr[i] = tx_STAR(a, env);
  });
}
//
const txAtom = function(a) {
  let s = [a].join("");
  return (lambda_DASH_arg_QUERY(a) ?
    ["____args[", s, "]"].join("") :
    (keyword_QUERY(a) ?
      ["\"", s, "\""].join("") :
      (symbol_QUERY(a) ?
        rdr.jsid(s) :
        ((a === null) ?
          "null" :
          (primitive_QUERY(a) ?
            (function() {
              a = a.value;
              return ((typeof (a) === "string") ?
                a :
                ((a === null) ?
                  "null" :
                  (true ?
                    [a].join("") :
                    null)));
            }).call(this) :
            (true ?
              s :
              null))))));
}
//
const tx_STAR = function(x, env) {
  return (Array.isArray(x) ?
    txPairs(x, env) :
    txAtom(x));
}
//
const findCmd = function(ast) {
  return (vector_QUERY(ast) ?
    "vec" :
    (map_QUERY(ast) ?
      "hashmap" :
      (list_QUERY(ast) ?
        "list" :
        (Array.isArray(ast) ?
          [ast[0]].join("") :
          (true ?
            "" :
            null)))));
}
//
const quoteSingle = function(a) {
  return (keyword_QUERY(a) ?
    ["keyword(\":", a, "\")"].join("") :
    (symbol_QUERY(a) ?
      ["symbol(\"", a, "\")"].join("") :
      (primitive_QUERY(a) ?
        (function() {
          a = a.value;
          return ((typeof (a) === "string") ?
            a :
            ((a === null) ?
              "null" :
              (true ?
                [a].join("") :
                null)));
        }).call(this) :
        (true ?
          [a].join("") :
          null))));
}
//
const quote_BANG = function(a, env) {
  return (Array.isArray(a) ?
    (map_QUERY(a) ?
      quoteMap(a, env) :
      quoteBlock(a, env)) :
    quoteSingle(a));
}
//
const quoteMap = function(a, env) {
  let ret = tnode();
  let comma = "";
  for (let i = 0, sz = kirbystdlibref.count(a), ____break = false; ((!____break) && (i < sz)); i = (i + 2)) {
    if ( (i > 0) ) {
      ret.add(",");
    }
    ret.add([quote_BANG(a[i], env), " : ", quote_BANG(a[i + 1], env)]);
  }
  if ( (!(0 === kirbystdlibref.count(a))) ) {
    comma = ",";
  }
  ret.prepend(["[", "symbol(\"hashmap\")", comma]);
  ret.add("]");
  return ret;
}
//
const quoteBlock = function(a, env) {
  let ret = tnode();
  for (let i = 0, sz = kirbystdlibref.count(a), ____break = false; ((!____break) && (i < sz)); i = (i + 1)) {
    if ( (i > 0) ) {
      ret.add(",");
    }
    ret.add(quote_BANG(a[i], env));
  }
  ret.prepend("[");
  ret.add("]");
  return ret;
}
//
const sf_DASH_quote = function(ast, env) {
  let ret = node_QTE(tnode(), ast);
  ret.add(quote_BANG(ast[1], env));
  return ret;
}
SPEC_DASH_OPS["quote"] = sf_DASH_quote;
//
const txPairs = function(ast, env) {
  let stmtQ = stmt_QUERY(ast);
  let cmd = findCmd(ast);
  let ret = tnode();
  let specop = null;
  let tmp = null;
  let mc = rt.getMacro(cmd);
  if (mc) {
    (ast = rt.expandMacro(ast, env, mc), ast = exprHint(ast, (!stmtQ)), cmd = findCmd(ast));
  }
  if (rdr.REGEX.int.test(cmd)) {
    let c0 = cmd.charAt(0);
    if ( ((c0 !== "-") && (c0 !== "+")) ) {
      cmd = ["+", cmd].join("");
    }
    (ast = [symbol(cmd.charAt(0)), ast[1], parseInt(cmd.slice(1))], cmd = [ast[0]].join(""));
  }
  specop = SPEC_DASH_OPS[cmd];
  if ( (cmd == "with-meta") ) {
    tmp = ast[1];
    if ( (!simpleton_QUERY(tmp)) ) {
      tmp["____meta"] = evalMeta(ast[2], env);
      ret.add(tx_STAR(tmp, env));
    } else {
      throw new Error("cant with-meta simple value");
    }
  } else {
    if (cmd.startsWith(".-")) {
      ret.add([tx_STAR(ast[1], env), ".", txAtom(symbol(cmd.slice(2)))]);
    } else {
      if (cmd.startsWith(".@")) {
        let onemore_QUERY = false;
        let pos = 2;
        if (cmd.startsWith(".@+")) {
          ++pos;
          onemore_QUERY = true;
        }
        ret.add([tx_STAR(ast[1], env), "[", cmd.slice(pos)]);
        if (onemore_QUERY) {
          ret.add("+1]");
        } else {
          ret.add("]");
        }
      } else {
        if ( ("." === cmd.charAt(0)) ) {
          ret.add([tx_STAR(ast[1], env), cmd, "("]);
          for (let n = 2, sz = kirbystdlibref.count(ast), ____break = false; ((!____break) && (n < sz)); n = (n + 1)) {
            if ( (n !== 2) ) {
              ret.add(",");
            }
            ret.add(tx_STAR(ast[n], env));
          }
          ret.add(")");
        } else {
          if (some_QUERY(specop)) {
            ret = specop(ast, env);
          } else {
            if (true) {
              if (pairs_QUERY(ast)) {
                txExpr(ast, env);
                cmd = ast[0];
              } else {
                cmd = txAtom(ast);
              }
              if ( (!cmd) ) {
                syntax_BANG("e1", ast);
              }
              cmd = maybeStripStdlib(cmd);
              if (pairs_QUERY(ast)) {
                if (testre_QUERY(rdr.REGEX.func, cmd)) {
                  cmd = tnodeEx(["(", cmd, ")"]);
                }
                ret.add([cmd, "(", tnodeEx(ast.slice(1)).join(","), ")"]);
              } else {
                ret.add(cmd);
              }
            }
          }
        }
      }
    }
  }
  return node_QTE(ret, ast);
}
//Convert to jsdoc
const writeDoc = function(doc) {
  return (doc ?
    doc.replace(rdr.REGEX.dquoteHat, "").replace(rdr.REGEX.dquoteEnd, "").split("\\n").map(function() {
      let ____args = Array.prototype.slice.call(arguments);
      return ["//", [____args[0]].join("").trim(), "\n"].join("");
    }) :
    "");
}
//Define a JS Class
const sf_DASH_deftype = function(ast, env) {
  let private_QUERY = [ast[0]].join("").endsWith("-");
  let ret = node_QTE(tnode(), ast);
  let cz = tx_STAR(ast[1], env);
  let par = ast[2][0];
  let args = ast[3];
  let n,
    m,
    doc,
    mtds;
  if ( (typeof (ast[4]) === "string") ) {
    (doc = ast[4], mtds = ast.slice(5));
  } else {
    mtds = ast.slice(4);
  }
  ret.add(["class ", cz]);
  if (par) {
    ret.add([" extends ", tx_STAR(par, env)]);
  }
  ret.add(" {\n");
  for (let i = 0, pos = 0, sz = kirbystdlibref.count(mtds), ____break = false; ((!____break) && (i < sz)); i = (i + 1)) {
    m = mtds[i];
    pos = ((typeof (m[1]) === "string") ?
      3 :
      2);
    if ( ((m[0] == "constructor") && (!(0 === kirbystdlibref.count(args)))) ) {
      txExpr(args, env);
      for (let x = 0, sz = kirbystdlibref.count(args), ____break = false; ((!____break) && (x < sz)); x = (x + 2)) {
        args[x] = ["\"", args[x], "\""].join("");
      }
      m.splice(pos, 0, [symbol("set-in!"), symbol("this")].concat(args));
    }
    m.unshift(symbol("method"));
    ret.add(sf_DASH_func(m, env, false));
    ret.add("\n");
  }
  ret.add("}\n");
  if (doc) {
    ret.prepend(writeDoc(doc));
  }
  if ( ((!private_QUERY) && (1 === rt.globalEnv().countNSPCache())) ) {
    EXTERNS[cz] = cz;
  }
  return ret;
}
SPEC_DASH_OPS["deftype"] = sf_DASH_deftype;
SPEC_DASH_OPS["deftype-"] = sf_DASH_deftype;
//
const sf_DASH_compOp = function(ast, env) {
  let ret = node_QTE(tnode(), ast);
  let cmd = ast[0];
  if ( ((cmd == "not=") || (cmd == "!=")) ) {
    ast[0] = symbol("!==");
  }
  if ( (cmd == "=") ) {
    ast[0] = symbol("===");
  }
  txExpr(ast, env);
  for (let i = 0, op = ast.shift(), ____break = false; ((!____break) && (i < (ast.length - 1))); i = (i + 1)) {
    ret.add(tnodeEx([ast[i], " ", op, " ", ast[i + 1]]));
  }
  ret.join(" && ");
  ret.prepend("(");
  ret.add(")");
  return ret;
}
SPEC_DASH_OPS["not="] = sf_DASH_compOp;
SPEC_DASH_OPS["!="] = sf_DASH_compOp;
SPEC_DASH_OPS["=="] = sf_DASH_compOp;
SPEC_DASH_OPS["="] = sf_DASH_compOp;
SPEC_DASH_OPS[">"] = sf_DASH_compOp;
SPEC_DASH_OPS[">="] = sf_DASH_compOp;
SPEC_DASH_OPS["<"] = sf_DASH_compOp;
SPEC_DASH_OPS["<="] = sf_DASH_compOp;
//
const sf_DASH_arithOp = function(ast, env) {
  let op = tnode();
  let ret = node_QTE(tnode(), ast);
  txExpr(ast, env);
  let e1 = ast.shift();
  let cmd = [e1].join("");
  if ( (cmd == "mod") ) {
    cmd = "%";
  }
  if ( (cmd == "div") ) {
    cmd = "/";
  }
  if ( (1 === kirbystdlibref.count(ast)) ) {
    if ( ("-" == cmd) ) {
      ret.add("-");
    }
  } else {
    op.add(["", cmd, ""]);
  }
  ret.add(ast);
  if ( (kirbystdlibref.count(ast) > 1) ) {
    ret.join(op);
  }
  ret.prepend("(");
  ret.add(")");
  return ret;
}
SPEC_DASH_OPS["+"] = sf_DASH_arithOp;
SPEC_DASH_OPS["-"] = sf_DASH_arithOp;
SPEC_DASH_OPS["*"] = sf_DASH_arithOp;
SPEC_DASH_OPS["div"] = sf_DASH_arithOp;
SPEC_DASH_OPS["%"] = sf_DASH_arithOp;
SPEC_DASH_OPS["mod"] = sf_DASH_arithOp;
SPEC_DASH_OPS["||"] = sf_DASH_arithOp;
SPEC_DASH_OPS["&&"] = sf_DASH_arithOp;
SPEC_DASH_OPS["^"] = sf_DASH_arithOp;
SPEC_DASH_OPS["&"] = sf_DASH_arithOp;
SPEC_DASH_OPS["|"] = sf_DASH_arithOp;
SPEC_DASH_OPS["<<"] = sf_DASH_arithOp;
SPEC_DASH_OPS[">>"] = sf_DASH_arithOp;
SPEC_DASH_OPS[">>>"] = sf_DASH_arithOp;
//
const txDo = function(ast, env) {
  let G____13 = Array.prototype.slice.call(arguments, 2);
  let G____14 = G____13;
  let return_QUERY;
  return_QUERY = G____14[0];
  let ret = node_QTE(tnode(), ast);
  let stmtQ = stmt_QUERY(ast);
  let e = null;
  let end = (ast.length - 1);
  return_QUERY = (stmtQ ?
    false :
    opt_QUERY__QUERY(return_QUERY, true));
  for (let i = 0, ____break = false; ((!____break) && (i < end)); i = (i + 1)) {
    e = exprHint(ast[i], false);
    ret.add([txPairs(e, env), ";\n"]);
  }
  if ( (end >= 0) ) {
    (e = exprHint(ast[end], (!stmtQ)), e = tx_STAR(e, env));
    if ( (!return_QUERY) ) {
      ret.add([e, ";\n"]);
    } else {
      ret.add(["return ", e, ";\n"]);
    }
  }
  return ret;
}
//
const sf_DASH_do = function(ast, env) {
  let ret = node_QTE(tnode(), ast);
  let stmtQ = stmt_QUERY(ast);
  let body = exprHint(ast.slice(1), (!stmtQ));
  ret.add(txDo(body, env, (!stmtQ)));
  if (stmtQ) {
    ret.prepend("{\n");
  } else {
    ret.prepend("(function() {\n");
  }
  if (stmtQ) {
    ret.add("}");
  } else {
    ret.add("}).call(this)");
  }
  return ret;
}
SPEC_DASH_OPS["do"] = sf_DASH_do;
//
const sf_DASH_case = function(ast, env) {
  let ret = node_QTE(tnode(), ast);
  let stmtQ = stmt_QUERY(ast);
  let brk = ";\nbreak;\n";
  let tst = ast[1];
  let _x = [gensym("C____")].join("");
  let e,
    t,
    c,
    dft;
  if ( (!(0 === (kirbystdlibref.count(ast) % 2))) ) {
    dft = ast.pop();
  }
  for (let i = 2, sz = kirbystdlibref.count(ast), ____break = false; ((!____break) && (i < sz)); i = (i + 2)) {
    (e = ast[i], c = ast[i + 1]);
    if (pairs_QUERY(e)) {
      for (let j = 0, sz = kirbystdlibref.count(e), ____break = false; ((!____break) && (j < sz)); j = (i + 1)) {
        ret.add(["case ", txAtom(e[j]), ":\n"]);
        if ( (j === (e.length - 1)) ) {
          ret.add([_x, "=", tx_STAR(c, env), brk]);
        }
      }
    } else {
      ret.add(["case ", txAtom(e), ":\n", _x, "=", tx_STAR(c, env), brk]);
    }
  }
  if (dft) {
    ret.add(["default:\n", _x, "=", tx_STAR(dft, env), brk]);
  }
  ret.prepend(["switch (", tx_STAR(tst, env), ") {\n"]);
  ret.add("}");
  if (stmtQ) {
    ret.prepend(["{ let ", _x, ";\n"]);
  } else {
    ret.prepend(["(function() { let ", _x, ";\n"]);
  }
  if (stmtQ) {
    ret.add("}");
  } else {
    ret.add(["return ", _x, ";}).call(this)"]);
  }
  return ret;
}
SPEC_DASH_OPS["case"] = sf_DASH_case;
//
const sf_DASH_vardefs = function(ast, env) {
  let ret = node_QTE(tnode(), ast);
  let cmd = [ast[0]].join("");
  let kks = {};
  let private_QUERY = cmd.endsWith("-");
  if ( (!("let" == cmd)) ) {
    cmd = "var";
  }
  for (let i = 1, s = null, sz = kirbystdlibref.count(ast), ____break = false; ((!____break) && (i < sz)); i = (i + 1)) {
    s = txAtom(ast[i]);
    ret.add(s);
    kks[s] = null;
  }
  ret.join(",");
  ret.prepend([cmd, " "].join(""));
  ret.add(";\n");
  if ( ((!private_QUERY) && (1 === rt.globalEnv().countNSPCache())) ) {
    let G__5 = kks;
    Object.entries(G__5).forEach(function(e) {
      return (function(v, k) {
        return EXTERNS[k] = k;
      })(e[1], e[0]);
    });
  }
  return ret;
}
SPEC_DASH_OPS["def~-"] = sf_DASH_vardefs;
SPEC_DASH_OPS["def~"] = sf_DASH_vardefs;
SPEC_DASH_OPS["var~"] = sf_DASH_vardefs;
//
const sf_DASH_const = function(ast, env) {
  let ret = node_QTE(tnode(), ast);
  let cmd = [ast[0]].join("");
  let kks = {};
  let keys = [];
  let vname = null;
  let private_QUERY = cmd.endsWith("-");
  let rc,
    lhs,
    rhs;
  (ast = ast.slice(1), cmd = "const");
  for (let i = 0, sz = kirbystdlibref.count(ast), ____break = false; ((!____break) && (i < sz)); i = (i + 2)) {
    (lhs = ast[i], rhs = ast[i + 1]);
    if (symbol_QUERY(lhs)) {
      lhs = txAtom(lhs);
      kks[lhs] = null;
      ret.add([cmd, " ", lhs, "= ", tx_STAR(rhs, env), ";\n"]);
    } else {
      rc = destruct0(cmd, lhs, rhs, env);
      ret.add(rc[0]);
      rc[1].forEach(function() {
        let ____args = Array.prototype.slice.call(arguments);
        return kks[rdr.jsid(____args[0])] = null;
      });
    }
  }
  if ( ((!private_QUERY) && (1 === rt.globalEnv().countNSPCache())) ) {
    Object.keys(kks).forEach(function() {
      let ____args = Array.prototype.slice.call(arguments);
      return EXTERNS[____args[0]] = ____args[0];
    });
  }
  return ret;
}
SPEC_DASH_OPS["const"] = sf_DASH_const;
SPEC_DASH_OPS["const-"] = sf_DASH_const;
//
const sf_DASH_var = function(ast, env) {
  let ret = node_QTE(tnode(), ast);
  let tmp = null;
  let vname = null;
  let cmd = [ast[0]].join("");
  let keys = [];
  let kks = {};
  let private_QUERY = (cmd !== "def");
  let rc,
    lhs,
    rhs;
  (ast = ast.slice(1), cmd = ((cmd == "var") ?
    "let" :
    "var"));
  for (let i = 0, sz = kirbystdlibref.count(ast), ____break = false; ((!____break) && (i < sz)); i = (i + 2)) {
    (lhs = ast[i], rhs = ast[i + 1]);
    if (symbol_QUERY(lhs)) {
      (lhs = txAtom(lhs), tmp = [lhs, "= ", tx_STAR(rhs, env), ";\n"]);
      if ( (!contains_QUERY(kks, lhs)) ) {
        kks[lhs] = null;
        tmp.unshift(cmd, " ");
      }
      ret.add(tmp);
    } else {
      rc = destruct0(cmd, lhs, rhs, env);
      ret.add(rc[0]);
      rc[1].map(function() {
        let ____args = Array.prototype.slice.call(arguments);
        return kks[rdr.jsid(____args[0])] = null;
      });
    }
  }
  if ( ((!private_QUERY) && (1 === rt.globalEnv().countNSPCache())) ) {
    let G__6 = kks;
    Object.entries(G__6).forEach(function(e) {
      return (function(v, k) {
        return EXTERNS[k] = k;
      })(e[1], e[0]);
    });
  }
  return ret;
}
SPEC_DASH_OPS["def"] = sf_DASH_var;
SPEC_DASH_OPS["def-"] = sf_DASH_var;
SPEC_DASH_OPS["var"] = sf_DASH_var;
//
const sf_DASH_inst_QUERY = function(ast, env) {
  let ret = node_QTE(tnode(), ast);
  ret.add(["(", tx_STAR(ast[2], env), " instanceof ", tx_STAR(ast[1], env), ")"]);
  return ret;
}
SPEC_DASH_OPS["inst?"] = sf_DASH_inst_QUERY;
//
const sf_DASH_delete = function(ast, env) {
  let ret = node_QTE(tnode(), ast);
  ret.add(["delete ", tx_STAR(ast[1], env)]);
  if ( (kirbystdlibref.count(ast) > 2) ) {
    ret.add(["[", tx_STAR(ast[2]), "]"]);
  }
  return ret;
}
SPEC_DASH_OPS["delete!"] = sf_DASH_delete;
//
const sf_DASH_new = function(ast, env) {
  let ret = node_QTE(tnode(), ast);
  ret.add(txPairs(ast.slice(1), env));
  ret.prepend("new ");
  return ret;
}
SPEC_DASH_OPS["new"] = sf_DASH_new;
//
const sf_DASH_throw = function(ast, env) {
  let ret = node_QTE(tnode(), ast);
  let stmtQ = stmt_QUERY(ast);
  ret.add(["throw ", tx_STAR(ast[1], env)]);
  if ( (!stmtQ) ) {
    ret.prepend("(function (){ ");
    ret.add(" }).call(this)");
  }
  return ret;
}
SPEC_DASH_OPS["throw"] = sf_DASH_throw;
//
const sf_DASH_x_DASH_opop = function(ast, env) {
  txExpr(ast, env);
  return node_QTE(tnodeEx([ast[0], ast[1]]), ast);
}
SPEC_DASH_OPS["++"] = sf_DASH_x_DASH_opop;
SPEC_DASH_OPS["--"] = sf_DASH_x_DASH_opop;
//
const sf_DASH_x_DASH_eq = function(ast, env) {
  txExpr(ast, env);
  return node_QTE(tnodeEx([ast[1], " ", ast[0], " ", ast[2]]));
}
SPEC_DASH_OPS["+="] = sf_DASH_x_DASH_eq;
SPEC_DASH_OPS["-="] = sf_DASH_x_DASH_eq;
SPEC_DASH_OPS["*="] = sf_DASH_x_DASH_eq;
SPEC_DASH_OPS["/="] = sf_DASH_x_DASH_eq;
SPEC_DASH_OPS["%="] = sf_DASH_x_DASH_eq;
SPEC_DASH_OPS["<<="] = sf_DASH_x_DASH_eq;
SPEC_DASH_OPS[">>="] = sf_DASH_x_DASH_eq;
SPEC_DASH_OPS[">>>="] = sf_DASH_x_DASH_eq;
SPEC_DASH_OPS["&="] = sf_DASH_x_DASH_eq;
SPEC_DASH_OPS["|="] = sf_DASH_x_DASH_eq;
SPEC_DASH_OPS["^="] = sf_DASH_x_DASH_eq;
//
const sf_DASH_set_DASH_in = function(ast, env) {
  if ( (0 === (kirbystdlibref.count(ast) % 2)) ) {
    true;
  } else {
    throw new Error("set-in: bad arg count");
  }
  let ret = node_QTE(tnode(), ast);
  let more = false;
  let obj = tx_STAR(ast[1], env);
  for (let i = 2, sz = kirbystdlibref.count(ast), ____break = false; ((!____break) && (i < sz)); i = (i + 2)) {
    if ( (i > 2) ) {
      ret.add(",");
      more = true;
    }
    ret.add([obj, "[", tx_STAR(ast[i], env), "]", "=", tx_STAR(ast[i + 1], env)]);
  }
  if (more) {
    ret.prepend("(");
    ret.add(")");
  }
  return ret;
}
SPEC_DASH_OPS["set-in!"] = sf_DASH_set_DASH_in;
//
const sf_DASH_set = function(ast, env) {
  if ( (!(0 === (kirbystdlibref.count(ast) % 2))) ) {
    true;
  } else {
    throw new Error("set: bad arg count");
  }
  let more = false;
  let ret = node_QTE(tnode(), ast);
  for (let i = 1, sz = kirbystdlibref.count(ast), ____break = false; ((!____break) && (i < sz)); i = (i + 2)) {
    if ( (i > 1) ) {
      ret.add(",");
      more = true;
    }
    ret.add([tx_STAR(ast[i], env), "=", tx_STAR(ast[i + 1], env)]);
  }
  if (more) {
    ret.prepend("(");
    ret.add(")");
  }
  return ret;
}
SPEC_DASH_OPS["set!"] = sf_DASH_set;
//
const parseFuncArgs = function(args) {
  let ret = [];
  let e,
    ev;
  for (let i = 0, sz = kirbystdlibref.count(args), ____break = false; ((!____break) && (i < sz)); i = (i + 1)) {
    (e = args[i], ev = [e].join(""));
    if (symbol_QUERY(e)) {
      if ( (ev === "_") ) {
        conj_BANG(ret, gensym("_"));
      } else {
        if ( (ev === "&") ) {
          e = args[i + 1];
          if (symbol_QUERY(e)) {
            conj_BANG(ret, [e, i, e]);
          } else {
            conj_BANG(ret, [symbol(["&", [gensym("A____")].join("")].join("")), i, e]);
          }
          ++i;
        } else {
          if (ev.startsWith("&")) {
            e = symbol(ev.slice(1));
            conj_BANG(ret, [e, i, e]);
          } else {
            if (true) {
              conj_BANG(ret, e);
            }
          }
        }
      }
    } else {
      if (keyword_QUERY(e)) {
        throw new Error(["bad function args destructure: ", typeid(e)].join(""));
      } else {
        if (Array.isArray(e)) {
          conj_BANG(ret, [gensym(), i, e]);
        } else {
          if (true) {
            throw new Error(["bad function args destructure: ", typeid(e)].join(""));
          }
        }
      }
    }
  }
  return ret;
}
//
const handleFuncArgs = function(fargs, env) {
  let out = [];
  let misc = [];
  let keys = [];
  let ret = tnode();
  let knode = tnode();
  fargs.forEach(function(arg) {
    return (symbol_QUERY(arg) ?
      conj_BANG(keys, arg) :
      ((symbol_QUERY(arg[0]) && (![arg[0]].join("").startsWith("&")) && Array.isArray(arg[2])) ?
        (function() {
          conj_BANG(keys, arg[0]);
          return conj_BANG(misc, arg);
        }).call(this) :
        (true ?
          conj_BANG(misc, arg) :
          null)));
  });
  misc.forEach(function(arr) {
    let a0 = arr[0];
    let name = [a0].join("");
    let varg_QUERY = name.startsWith("&");
    let pos = [arr[1]].join("");
    let a2 = arr[2];
    if (varg_QUERY) {
      name = name.slice(1);
    }
    name = rdr.jsid(name);
    return ((symbol_QUERY(a0) && symbol_QUERY(a2)) ?
      ret.add(["let ", name, "=Array.prototype.slice.call(arguments,", pos, ");\n"]) :
      (Array.isArray(a2) ?
        (function() {
          if (varg_QUERY) {
            ret.add(["let ", name, "=Array.prototype.slice.call(arguments,", pos, ");\n"]);
          }
          return ret.add(destruct0("let", a2, name, env)[0]);
        }).call(this) :
        null));
  });
  knode.add(keys.map(function() {
    let ____args = Array.prototype.slice.call(arguments);
    return rdr.jsid([____args[0]].join(""));
  }).join(","));
  return conj_BANG(out, knode, ret);
}
//
const sf_DASH_fn = function(ast, env) {
  let ret = node_QTE(tnode(), ast);
  let args = ast[1];
  let fargs = null;
  let hints = {};
  let body = ast.slice(2);
  if ( ((3 === kirbystdlibref.count(args)) && ("with-meta" == args[0]) && Array.isArray(args[1])) ) {
    (hints = evalMeta(args[2], env), args = args[1]);
  }
  fargs = handleFuncArgs(parseFuncArgs(args), env);
  ret.add(["function (", fargs[0], ") {\n", fargs[1], txDo(body, env, true), "}"]);
  return ret;
}
SPEC_DASH_OPS["fn"] = sf_DASH_fn;
//
const fmtRegoSpecOps = function(alias, fname) {
  return [rdr.jsid("SPEC-OPS"), "[\"", alias, "\"] = ", fname].join("");
}
//
const fmtSpecOps = function(fname, attrs) {
  let ks = (attrs["opcode"] || []);
  let out = ks.map(function() {
    let ____args = Array.prototype.slice.call(arguments);
    return fmtRegoSpecOps([____args[0]].join(""), fname);
  }).join(";\n");
  return ((!(0 === kirbystdlibref.count(ks))) ?
    [out, ";\n"].join("") :
    out);
}
//
const sf_DASH_func = function(ast, env) {
  let mtd_QUERY = (ast[0] == "method");
  let fname = tx_STAR(ast[1], env);
  let dot_QUERY = contains_QUERY(fname, ".");
  let ret = node_QTE(tnode(), ast);
  let hints = {};
  let fargs = null;
  let e2 = ast[2];
  let doc = null;
  let args = 2;
  let body = 3;
  let private_QUERY = [ast[0]].join("").endsWith("-");
  if ( (typeof (e2) === "string") ) {
    (doc = 2, args = 3);
  }
  body = (args + 1);
  if (doc) {
    doc = ast[doc];
  }
  (args = ast[args], body = ast.slice(body));
  if ( ((3 === kirbystdlibref.count(args)) && ("with-meta" == args[0]) && Array.isArray(args[1])) ) {
    (hints = evalMeta(args[2], env), args = args[1]);
  }
  fargs = handleFuncArgs(parseFuncArgs(args), env);
  if (mtd_QUERY) {
    if (hints.static) {
      ret.add("static ");
    }
    ret.add([fname, " ("]);
    if ( (fname == "constructor") ) {
      body.push(symbol("this"));
    }
  } else {
    if (dot_QUERY) {
      ret.add([fname, " = function ("]);
    } else {
      if (true) {
        ret.add(["const ", fname, " = function ("]);
      }
    }
  }
  ret.add([fargs[0], ") {\n", fargs[1], txDo(body, env, true), "};\n"]);
  if ( (!(0 === kirbystdlibref.count(hints))) ) {
    ret.add(fmtSpecOps(fname, hints));
  }
  if (doc) {
    ret.prepend(writeDoc(doc));
  }
  if ( ((!private_QUERY) && (!dot_QUERY) && (!mtd_QUERY) && (1 === rt.globalEnv().countNSPCache())) ) {
    EXTERNS[fname] = fname;
  }
  return ret;
}
SPEC_DASH_OPS["defn"] = sf_DASH_func;
SPEC_DASH_OPS["defn-"] = sf_DASH_func;
//
const sf_DASH_try = function(ast, env) {
  let stmtQ = stmt_QUERY(ast);
  let sz = kirbystdlibref.count(ast);
  let ret = node_QTE(tnode(), ast);
  let t,
    f,
    c;
  f = last(ast);
  if ( (Array.isArray(f) && ("finally" == f[0])) ) {
    (f = ast.pop(), sz = kirbystdlibref.count(ast));
  } else {
    f = null;
  }
  c = null;
  if ( (sz > 1) ) {
    c = ast[(sz - 1)];
  }
  if ( (Array.isArray(c) && ("catch" == c[0])) ) {
    if ( ((kirbystdlibref.count(c) < 2) || (!symbol_QUERY(c[1]))) ) {
      syntax_BANG("e0", ast);
    }
    c = ast.pop();
  } else {
    c = null;
  }
  if ( ((f === null) && (c === null)) ) {
    syntax_BANG("e0", ast);
  }
  ret.add(["try {\n", txDo(exprHint(ast.slice(1), (!stmtQ)), env), "\n}"]);
  if (c) {
    t = c[1];
    ret.add([["catch (", t, ") {\n"].join(""), txDo(exprHint(c.slice(2), (!stmtQ)), env), ";\n}\n"]);
  }
  if (f) {
    ret.add(["finally {\n", txDo(exprHint(f.slice(1), false), env, false), ";\n}\n"]);
  }
  if ( (!stmtQ) ) {
    ret.prepend("(function(){\n");
    ret.add("}).call(this)");
  }
  return ret;
}
SPEC_DASH_OPS["try"] = sf_DASH_try;
//
const sf_DASH_if = function(ast, env) {
  let ret = node_QTE(tnode(), ast);
  let stmtQ = stmt_QUERY(ast);
  let a1 = exprHint(ast[1], (!stmtQ));
  let a2 = exprHint(ast[2], (!stmtQ));
  let a3 = ((kirbystdlibref.count(ast) > 3) ?
    ast[3] :
    null);
  let elze = (a3 ?
    exprHint(a3, (!stmtQ)) :
    null);
  (a1 = tx_STAR(a1, env), a2 = tx_STAR(a2, env), elze = tx_STAR(elze, env));
  if (stmtQ) {
    ret.add(["if (", a1, ") {\n", a2, ";\n}"]);
    if (a3) {
      ret.add([" else { \n", elze, ";\n}"]);
    }
  } else {
    ret.add(["(", a1, " ?\n", a2, " :\n",(elze || "null"), ")"]);
  }
  return ret;
}
SPEC_DASH_OPS["if"] = sf_DASH_if;
//
const sf_DASH_nth = function(ast, env) {
  let ret = node_QTE(tnode(), ast);
  txExpr(ast, env);
  ret.add([ast[1], "[", ast[2], "]"]);
  return ret;
}
SPEC_DASH_OPS["nth"] = sf_DASH_nth;
//
const sf_DASH_get = function(ast, env) {
  let ret = node_QTE(tnode(), ast);
  txExpr(ast, env);
  ret.add([ast[1], "[", ast[2], "]"]);
  return ret;
}
SPEC_DASH_OPS["aget"] = sf_DASH_get;
SPEC_DASH_OPS["get"] = sf_DASH_get;
//
const sf_DASH_array = function(ast, env) {
  let ret = node_QTE(tnode(), ast);
  if ( (0 === kirbystdlibref.count(ast)) ) {
    ret.add("[]");
  } else {
    if ( (!vector_QUERY(ast)) ) {
      ast.splice(0, 1);
    }
    txExpr(ast, env);
    ret.add("[\n");
    for (let i = 0, sz = kirbystdlibref.count(ast), ____break = false; ((!____break) && (i < sz)); i = (i + 1)) {
      if ( (i > 0) ) {
        ret.add(",\n");
      }
      ret.add(ast[i]);
    }
    ret.add("\n]");
  }
  return ret;
}
SPEC_DASH_OPS["vec"] = sf_DASH_array;
//
const sf_DASH_object = function(ast, env) {
  let ret = node_QTE(tnode(), ast);
  if ( (0 === kirbystdlibref.count(ast)) ) {
    ret.add("{}");
  } else {
    if ( (!map_QUERY(ast)) ) {
      ast.splice(0, 1);
    }
    txExpr(ast, env);
    ret.add("{\n");
    for (let i = 0, sz = kirbystdlibref.count(ast), ____break = false; ((!____break) && (i < sz)); i = (i + 2)) {
      if ( (i > 0) ) {
        ret.add(",\n");
      }
      ret.add([ast[i], ": ", ast[i + 1]]);
    }
    ret.add("\n}");
  }
  return ret;
}
SPEC_DASH_OPS["hashmap"] = sf_DASH_object;
var icache = [];
const includeFile = function(fname) {
  return (contains_QUERY(icache, fname) ?
    tnode() :
    (function() {
      let src = fs.readFileSync(fname, "utf-8");
      conj_BANG(icache, fname);
      return txTree(psr.parser(src, fname), rt.globalEnv());
    }).call(this));
}
//
const sf_DASH_include = function(ast, env) {
  let ret = [];
  let dir = path.dirname(ast.source);
  let fname,
    e;
  for (let i = 1, sz = kirbystdlibref.count(ast), ____break = false; ((!____break) && (i < sz)); i = (i + 1)) {
    e = ast[i];
    if ( ((!Array.isArray(e)) || (1 !== kirbystdlibref.count(e))) ) {
      syntax_BANG("e0", ast);
    }
    fname = e[0];
    if (fname) {
      fname = fname.replace(/[\"]/g, "");
    }
    try {
      fname = fs.realpathSync([dir, "/", fname].join(""));
    } catch (e) {
      syntax_BANG("e11", ast);
    }
    try {
      conj_BANG(ret, includeFile(fname));
    } finally {
      rt.globalEnv().popNSP();
    }
  }
  return ((0 === kirbystdlibref.count(ret)) ?
    tnode() :
    ret);
}
//
const sf_DASH_require = function(ast, env) {
  let as,
    path,
    v,
    e,
    refers,
    renames;
  let ret = node_QTE(tnode(), ast);
  for (let i = 1, sz = kirbystdlibref.count(ast), ____break = false; ((!____break) && (i < sz)); i = (i + 1)) {
    (e = ast[i], as = [gensym("R____")].join(""), refers = null, renames = null);
    if ( ((!Array.isArray(e)) || (kirbystdlibref.count(e) < 3)) ) {
      syntax_BANG("e0", ast);
    }
    path = e[0];
    for (let j = 1, sz = kirbystdlibref.count(e), ____break = false; ((!____break) && (j < sz)); j = (j + 1)) {
      v = e[j];
      if ( (v == "as") ) {
        as = [e[j + 1]].join("");
        ++j;
      } else {
        if ( (v == "refer") ) {
          refers = e[j + 1];
          ++j;
        } else {
          if ( (v == "rename") ) {
            renames = e[j + 1];
            ++j;
          } else {
            null;
          }
        }
      }
    }
    ret.add(["const ", rdr.jsid(as), "= require(", txAtom(path), ");\n"]);
    for (let i = 0, sz = kirbystdlibref.count(refers), ____break = false; ((!____break) && (refers && (i < sz))); i = (i + 1)) {
      v = txAtom(refers[i]);
      ret.add(["const ", v, "=", as, "[\"", v, "\"];\n"]);
    }
    for (let i = 0, sz = kirbystdlibref.count(renames), ____break = false; ((!____break) && (renames && (i < sz))); i = (i + 2)) {
      (e = txAtom(renames[i]), v = txAtom(renames[i + 1]));
      ret.add(["const ", v, "=", as, "[\"", e, "\"];\n"]);
    }
  }
  return ret;
}
//
const evalMeta = function(ast, env) {
  return (Array.isArray(ast) ?
    JSON.parse([tx_STAR(ast, env)].join("")) :
    (keyword_QUERY(ast) ?
      JSON.parse([tx_STAR([ast, true], env)].join("")) :
      (symbol_QUERY(ast) ?
        JSON.parse([tx_STAR([symbol("tag"), ast], env)].join("")) :
        (true ?
          (function() {
            throw new Error(["Bad meta value", prn(ast)].join("")) ;
          }).call(this) :
          null))));
}
//
const sf_DASH_ns = function(ast, env) {
  let ret = [];
  let e = null;
  let hints = {};
  let nsp = ast[1];
  if ( (Array.isArray(nsp) && (3 === kirbystdlibref.count(nsp)) && ("with-meta" == nsp[0]) && symbol_QUERY(nsp[1])) ) {
    (hints = evalMeta(nsp[2], env), nsp = nsp[1]);
  }
  rt.globalEnv().pushNSP([nsp].join(""));
  ast = ast.slice(2);
  for (let i = 0, sz = kirbystdlibref.count(ast), ____break = false; ((!____break) && (i < sz)); i = (i + 1)) {
    e = ast[i];
    if ( (pairs_QUERY(e) && ("include" == e[0])) ) {
      conj_BANG(ret, sf_DASH_include(e));
    } else {
      if ( (pairs_QUERY(e) && ("require" == e[0])) ) {
        conj_BANG(ret, sf_DASH_require(e));
      } else {
        null;
      }
    }
  }
  nsp = rt.globalEnv().peekNSP();
  if ( ((nsp === "czlab.kirby.bl.macros") || (nsp === "czlab.kirby.bl.stdlib")) ) {
    null;
  } else {
    if (nsp.startsWith("czlab.kirby.")) {
      conj_BANG(ret, tnodeEx("const kirbystdlibref=std;\n"));
    } else {
      if (true) {
        conj_BANG(ret, sf_DASH_require([kirbystdlibref.symbol("require"), ["kirby", kirbystdlibref.keyword(":as"), kirbystdlibref.symbol("kirbystdlibref")]]));
      }
    }
  }
  return ret;
}
SPEC_DASH_OPS["ns"] = sf_DASH_ns;
//
const maybeStripStdlib = function(cmd) {
  let lib = "kirbystdlibref.";
  let nsp = rt.globalEnv().peekNSP();
  cmd = [cmd].join("");
  return ((cmd.startsWith(lib) && (nsp === "czlab.kirby.bl.stdlib")) ?
    cmd.slice(kirbystdlibref.count(lib)) :
    cmd);
}
//
const sf_DASH_comment = function(ast, env) {
  return node_QTE(tnode(), ast);
}
SPEC_DASH_OPS["comment"] = sf_DASH_comment;
//
const sf_DASH_for = function(ast, env) {
  let ret = node_QTE(tnode(), ast);
  let stmtQ = stmt_QUERY(ast);
  let body = exprHint(ast.slice(2), false);
  if ( (0 === kirbystdlibref.count(body)) ) {
    tnode();
  } else {
    sf_DASH_floop(ret, ast[1], body, env, stmtQ);
  }
  return ret;
}
SPEC_DASH_OPS["for"] = sf_DASH_for;
//
const sf_DASH_floop = function(ret, args, body, env, stmtQ) {
  let vars = [];
  let recurs = [];
  let tst,
    nb,
    e;
  for (let i = 0, sz = kirbystdlibref.count(args), ____break = false; ((!____break) && (i < sz)); i = (i + 1)) {
    e = args[i];
    if ( (e == "while") ) {
      tst = args[i + 1];
      ++i;
    } else {
      if ( (e == "recur") ) {
        recurs = args.slice((i + 1));
        ____break = true;
      } else {
        if (symbol_QUERY(e)) {
          conj_BANG(vars, e, args[i + 1]);
          ++i;
        } else {
          null;
        }
      }
    }
  }
  ret.add("for (");
  for (let i = 0, sz = kirbystdlibref.count(vars), ____break = false; ((!____break) && (i < sz)); i = (i + 2)) {
    if ( (i === 0) ) {
      ret.add("let ");
    }
    if ( (i !== 0) ) {
      ret.add(",");
    }
    ret.add([txAtom(vars[i]), "=", tx_STAR(vars[i + 1], env)]);
  }
  if ( (0 === kirbystdlibref.count(vars)) ) {
    ret.add("let ____break=false;");
  } else {
    ret.add(",____break=false;");
  }
  nb = [kirbystdlibref.symbol("not"), kirbystdlibref.symbol("____break")];
  if (tst) {
    tst = [symbol("and"), nb, tst];
  } else {
    tst = nb;
  }
  ret.add(tx_STAR(tst, env));
  ret.add("; ");
  for (let i = 0, k = 0, sz = kirbystdlibref.count(recurs), ____break = false; ((!____break) && (i < sz)); i = (i + 1), k = (k + 2)) {
    if ( (i !== 0) ) {
      ret.add(",");
    }
    ret.add([txAtom(vars[k]), "=", tx_STAR(recurs[i], env)]);
  }
  ret.add("){\n");
  ret.add(txDo(body, env, false));
  ret.add("}\n");
  if ( (!stmtQ) ) {
    ret.prepend("(function() {\n");
    ret.add("}).call(this)");
  }
  return ret;
}
//
const sf_DASH_jscode = function(ast, env) {
  return node_QTE(tnodeEx([ast[1]].join("").replace(rdr.REGEX.dquoteHat, "").replace(rdr.REGEX.dquoteEnd, "")), ast);
}
SPEC_DASH_OPS["js#"] = sf_DASH_jscode;
//
const sf_DASH_macro = function(ast, env) {
  let pms = [];
  let args = ast[2];
  let body = ast.slice(3);
  let x,
    e,
    ev;
  if ( (typeof (args) === "string") ) {
    (doc = args, args = ast[3], body = ast.slice(4));
  }
  for (let i = 0, sz = kirbystdlibref.count(args), ____break = false; ((!____break) && (i < sz)); i = (i + 1)) {
    (e = args[i], ev = [e].join(""));
    if ( (ev === "&") ) {
      if (Array.isArray(args[i + 1])) {
        e = args[i + 1];
        ++i;
        for (let j = 0, sz = kirbystdlibref.count(e), ____break = false; ((!____break) && (j < sz)); j = (j + 1)) {
          x = e[j];
          if ( (!symbol_QUERY(x)) ) {
            throw new Error("Bad optional arg for macro");
          }
          conj_BANG(pms, x);
        }
      } else {
        conj_BANG(pms, e, args[i + 1]);
        ++i;
      }
    } else {
      if ( (!symbol_QUERY(e)) ) {
        throw new Error("Bad optional arg for macro");
      } else {
        if (true) {
          conj_BANG(pms, e);
        }
      }
    }
  }
  ast = [ast[0], ast[1], [symbol("fn*"), pms].concat(body)];
  let a1 = [ast[1]].join("");
  let a2 = ast[2];
  let func = rt.compute(a2, env);
  func["____macro"] = true;
  if (doc) {
    func["____doc"] = doc;
  }
  rt.setMacro(a1, func);
  return node_QTE(tnode(), ast);
}
SPEC_DASH_OPS["defmacro"] = sf_DASH_macro;
//
const sf_DASH_unary = function(ast, env) {
  let ret = node_QTE(tnode(), ast);
  let G____15 = ast;
  let a0,
    a1;
  a0 = G____15[0];
  a1 = G____15[1];
  if ( (a0 == "not") ) {
    a0 = symbol("!");
  }
  ret.add(["(", tx_STAR(a0, env), tx_STAR(a1, env), ")"]);
  return ret;
}
SPEC_DASH_OPS["not"] = sf_DASH_unary;
SPEC_DASH_OPS["~"] = sf_DASH_unary;
SPEC_DASH_OPS["!"] = sf_DASH_unary;
//
const spitExterns = function() {
  let s = "";
  let ks = Object.keys(EXTERNS);
  if ( (!(0 === kirbystdlibref.count(ks))) ) {
    (s = ks.map(function() {
      let ____args = Array.prototype.slice.call(arguments);
      return [____args[0], ": ", ____args[0]].join("");
    }).join(",\n"), s = ["\n\nmodule.exports = {\n", s, "\n};\n\n"].join(""));
  }
  return s;
}
//
const banner = function() {
  return ["/*", "Auto generated by Kirby - v", MODULE_DASH_VERSION, " ", rt.globalEnv().firstNSP(), " - ", new Date(), "*/\n\n"].join("");
}
//
const cleanCode = function(code) {
  let tmp = null;
  let arr = [];
  let G__7 = code.split("\n");
  for (let G__9 = 0, G__8 = false, ____break = false; ((!____break) && ((!G__8) && (G__9 < G__7.length))); G__9 = (G__9 + 1)) {
    let s = G__7[G__9];
    null;
    if ( (!true) ) {
      G__8 = true;
    }
    if ( ((!G__8) && true) ) {
      tmp = s.trim();
      if ( ((!(0 === kirbystdlibref.count(tmp))) && (tmp !== ";")) ) {
        conj_BANG(arr, s);
      }
    }
  }
  null;
  return arr.join("\n");
}
//
const transpileCode = function(codeStr, fname, options) {
  rt.globalEnv().resetNSPCache();
  EXTERNS = {};
  let outNode = txTree(psr.parser(codeStr, fname), rt.globalEnv());
  let G____16 = options;
  let source_DASH_map,
    format;
  source_DASH_map = G____16["source-map"];
  format = G____16["format"];
  let cstr = "";
  let fopts = {};
  let extra = spitExterns();
  format = true;
  cstr = (source_DASH_map ?
    (function() {
      let outFile = [path.basename(fname, ".ky"), ".js"].join("");
      let srcMap = [outFile, ".map"].join("");
      let output = outNode.toStringWithSourceMap({
        "file": outFile
      });
      fs.writeFileSync(srcMap, output.map);
      return [output.code, extra, "\n//# sourceMappingURL=", path.relative(path.dirname(fname), srcMap)].join("");
    }).call(this) :
    [outNode, extra].join(""));
  if (format) {
    cstr = esfmt.format(cstr, fopts);
  }
  cstr = cleanCode(cstr);
  return ((0 === kirbystdlibref.count(cstr)) ?
    "" :
    [banner(), cstr].join(""));
}
//
const transpileXXX = function(code, file, options) {
  return (function() {
    try {
      return transpileCode(code, file, options);
    } catch (e) {
      return (e ?
        (function() {
          if (console) {
            console.log([e.stack].join(""));
          }
          return (function() {
            throw e ;
          }).call(this);
        }).call(this) :
        null);
    }
  }).call(this);
}
//
const transpileWithSrcMap = function(code, file) {
  let G____17 = Array.prototype.slice.call(arguments, 2);
  let G____18 = G____17;
  let options;
  options = G____18[0];
  return transpileXXX(code, file, opt_QUERY__QUERY(options, {}));
}
//
const transpile = function(code, file) {
  let G____19 = Array.prototype.slice.call(arguments, 2);
  let G____20 = G____19;
  let options;
  options = G____20[0];
  return transpileXXX(code, file, opt_QUERY__QUERY(options, {}));
}
//
const parseWithSourceMap = function(codeStr, fname) {
  let outNode = txTree(psr.parser(codeStr, fname));
  outNode.prepend(banner());
  return outNode.toStringWithSourceMap();
}
var version = MODULE_DASH_VERSION;
module.exports = {
  transpileWithSrcMap: transpileWithSrcMap,
  transpile: transpile,
  parseWithSourceMap: parseWithSourceMap,
  version: version
};