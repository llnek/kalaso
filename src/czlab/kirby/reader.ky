;; Copyright Â© 2013-2018, Kenneth Leung. All rights reserved.
;; The use and distribution terms for this software are covered by the
;; Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
;; which can be found in the file epl-v10.html at the root of this distribution.
;; By using this software in any fashion, you are agreeing to be bound by
;; the terms of this license.
;; You must not remove this notice, or any other, from this software.

(ns ^{:doc "Tokenizes the input stream, and build a Abstract Syntax Tree."
      :author "Kenneth Leung"}

  czlab.kirby.reader

  (:require
    ["./stdlib"
     :as std
     :refer [lambdaArg object? nichts? count
             into! vector conj! prn quote-str
             list? vector? map? escXml println
             regexObj regexObj? set?
             symbol? keyword? lambdaArg?
             carve opt?? symbol primitive?
             keyword contains? list not-empty]]))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(deftype Token []
  ""
  (constructor "" [source line column value]
    (oset! this
           :source source
           :value value
           :line line
           :column column))
  (toString "" [] @@value))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- mkToken "Create a token"
  ^Token [source line col chunk] (new Token source line col chunk))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(const REGEX (object
  id #/^[a-zA-Z_$][\/.?\-*!0-9a-zA-Z_'<>%#@$\+]*$/
  id2 #/^[*\-][\/.?\-*!0-9a-zA-Z_'<>%#@$\+]+$/
  float #/^[-+]?[0-9]+\.[0-9]+$/
  int #/^[-+]?[0-9]+$/
  hex #/^[-+]?0x/
  dquoteHat #/^"/
  dquoteEnd #/"$/
  func #/^function\b/
  slash #/\//g
  query #/\?/g
  perc #/%/g
  bang #/!/g
  plus #/\+/g
  dash #/-/g
  quote #/'/g
  hash #/#/g
  at #/@/g
  less #/</g
  greater #/>/g
  star #/\*/g
  wspace #/\s/ ))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(const- REPLACERS
  [[REGEX.query "_QMRK_"]
   [REGEX.bang "_BANG_"]
   [REGEX.dash "_DASH_"]
   [REGEX.quote "_QUOT_"]
   [REGEX.hash "_HASH_"]
   [REGEX.plus "_PLUS_"]
   [REGEX.perc "_PERC_"]
   [REGEX.at "_AT_"]
   [REGEX.less "_LT_"]
   [REGEX.greater "_GT_"]
   [REGEX.star "_STAR_"]])

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn testid? "Returns true
              if a valid js identifier"
  [name] (or (REGEX.id.test name)
             (REGEX.id2.test name)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn jsid "Escape to
           compliant js identifier"
  ^String [input]
  (with-local-vars [pfx "" name $(input)])
  (when (and name
             (starts-with? name "-"))
    (set! pfx "-" name (rest name)))
  (if (testid? name)
    (reduce
      (fn [acc x]
        (set! acc
              (.replace acc (_1 x) (_2 x)))
        (if (ends-with? acc (_2 x)) (.slice acc 0 -1) acc))
      (.replace (str pfx name)
                REGEX.slash ".") REPLACERS)
    (if (= pfx "") name (str pfx name))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- lexer "Lexical analyzer" ^Array [source fname]
  (with-local-vars
    [len (n# source)
     comment? #f
     fform? #f
     esc? #f
     str? #f
     regex? #f
     token ""
     line 1
     ch nil
     nx nil
     col 0
     pos 0
     tree []
     tcol col
     tline line
     toke
     (fn [ln col s s?]
       (when (opt?? s? (not-empty s))
         (cond
           (and (starts-with? s "&")
                (not= s "&&")
                (> (alen s) 1))
           (do ;split a &more token into
               ;2 tokens & and more
               (conj! tree (mkToken fname ln col "&"))
               (set! s (rest s)))
           (== s "?")
           (set! s "undefined")
           (starts-with? s "@@")
           (set! s (str "this." (.slice s 2))))
         (conj! tree (mkToken fname ln col s))) "")])
  ;scan through the entire source string
  (while (< pos len)
    ;read the current char and peek the next char, moving
    ;the reader pointer to next
    (set! ch (ch@ source pos))
    (++ col)
    (++ pos)
    (set! nx (ch@ source pos))
    ;1. handle a newline, newline always turns off a comment
    (when (== ch "\n")
      (set! col 0)
      (++ line)
      (if comment? (false! comment?)))
    ;big switch, order is IMPORTANT
    (cond
      comment?
      nil
      esc?
      (do (false! esc?)
          (+= token ch))
      regex?
      (do (if (== ch "\\")
            (true! esc?))
          (+= token ch)
          (when (== ch "/")
            (false! regex?)
            (when (contains? "gimuy" nx)
              (+= token nx)
              (++ pos))
            (set! token (toke tline tcol token))))
      fform?
      (if (and (== ch "`")
               (== nx "`")
               (== (ch@ source (+1 pos)) "`"))
        (do (false! fform?)
            (+= pos 2)
            (+= token "\"")
            (set! token (toke tline tcol token #t)))
        (cond (== ch "\"") (+= token "\\\"")
              (== ch "\n") (+= token "\\n")
              (== ch "\\")
              (if (or (== nx "n")(== nx "r")(== nx "u")
                      (== nx "t")(== nx "f")(== nx "v"))
                (+= token ch)
                (+= token "\\\\"))
              :else (+= token ch)))
      (and (== ch "`")
           (== nx "`")
           (== (ch@ source (+1 pos)) "`")
           (empty?  token))
      (do (set! tline line tcol col)
          (+= pos 2)
          (true! fform?)
          (+= token "\""))
      (== ch "\"")
      (if-not str?
        (do (set! tline line tcol col)
            (true! str?)
            (+= token ch))
        (do (false! str?)
            (+= token ch)
            (set! token
                  (toke tline tcol token #t))))
      ;;must be after the check for string
      str?
      (do (if (== ch "\n") (set! ch "\\n"))
          (if (== ch "\\") (set! esc? #t))
          (+= token ch))
      (and (== ch "@")
           (== nx "@")(empty? token))
      (do (set! tline line tcol col)
          (+= token "@@") (++ pos))
      (and (== ch "`") (== nx "{"))
      (do (set! token (toke tline tcol token)
                tline line tcol col)
          (++ pos) (toke tline tcol "`{"))
      (or (== ch "'") (== ch "`")
          (== ch "$") (== ch "@") (== ch "^"))
      (if (and (empty? token)
               (not (REGEX.wspace.test nx)))
        (do (set! tline line tcol col)
            (toke tline tcol ch))
        (+= token ch))
      (and (== ch "&")
           (== nx "&"))
      (do (if (empty? token)
            (set! tline line tcol col))
          (+= token "&&")
          (++ pos))
      (== ch "~")
      (if (and (empty? token)
               (not (REGEX.wspace.test nx)))
        (do (set! tline line tcol col)
            (if (== nx "@")
              (do (++ pos)
                  (toke tline tcol "~@"))
              (toke tline tcol ch)))
        (+= token ch))
      (and (== ch "#")
           (== nx "/")
           (empty? token))
      (do (true! regex?)
          (set! tline line tcol col)
          (++ pos)
          (+= token "#/"))
      (and (== ch "#")
           (== nx "{"))
      (do (set! token (toke tline tcol token)
                tline line tcol col)
          (++ pos)
          (toke tline tcol "#{"))
      (or (== ch "[")(== ch "]")
          (== ch "{")(== ch "}")
          (== ch "(")(== ch ")"))
      (do (set! token (toke tline tcol token)
                tline line tcol col)
          (toke tline tcol ch))
      (== ch ";")
      (set! token (toke tline tcol token)
            tline line tcol col comment? #t)
      (or (== ch ",")
          (REGEX.wspace.test ch))
      (set! token
            (-> (if (== ch "\n")
                  (-1 tline) tline)
                (toke tcol token)))
      :else
      (do (if (empty? token)
            (set! tline line tcol col))
          (+= token ch))))
  ;;check for errors
  (with-local-vars [tmp {:source fname :line tline :column col}])
  (if fform? (throwE tmp "unterminated free-form"))
  (if esc? (throwE tmp "incomplete escape"))
  (if str? (throwE tmp "unterminated string"))
  (if regex? (throwE tmp "unterminated regex definition"))
  tree)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- throwE "Raise an error"
  [token & msgs]
  (with-local-vars [s (join "" msgs)])
  (if token
    (raise! s
            "\nnear line: "
            token.line "\nin file: " token.source)
    (raise! s "\nnear EOF")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- popToken "Returns the next token,
                 updates the token index"
  ^Token [tokens]
  (with-local-vars [t (peekToken tokens)]) (++ tokens.pos) t)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- peekToken "Returns the next token,
                 without moving the token index"
  ^Token [tokens] (nth tokens tokens.pos))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- prevToken "Returns the previous token"
  ^Token [tokens] (nth tokens (-1 tokens.pos)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- copyTokenData "Attach source level information
                     to the node"
  ^Any [token node]
  (if (or (object? node)
          (objectMap? node)
          (objectSet? node)(array? node))
    (oset! node
           :source token.source
           :line token.line
           :column token.column)) node)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- readAtom "Process an atom"
  ^Any [tokens]
  (with-local-vars [token (popToken tokens)
                    ret nil
                    tn token.value])
  (cond
    (empty? tn)
    (undef! ret)
    (REGEX.float.test tn)
    (set! ret (float tn))
    (or (REGEX.hex.test tn)
        (REGEX.int.test tn))
    (set! ret (int tn))
    (and (starts-with? tn "\"")
         (ends-with? tn "\""))
    (set! ret (std/unquote-str tn))
    (starts-with? tn ":")
    (set! ret (keyword tn))
    (starts-with? tn "%")
    (set! ret (lambdaArg tn))
    (and (starts-with? tn "#/")
         (or (ends-with? tn "/")
             (ends-with? (.slice tn 0 -1) "/")))
    (set! ret (regexObj tn))
    (or (== tn "nil")
        (== tn "null"))
    (nil! ret)
    (or (== tn "#t")
        (== tn "true"))
    (true! ret)
    (or (== tn "#f")
        (== tn "false"))
    (false! ret)
    :else (set! ret (symbol tn)))
  (copyTokenData token ret))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- readBlock "Process a LISP form"
  ^Array [tokens head tail]
  (with-local-vars [token (popToken tokens)
                    ast []
                    cur ?
                    ok? #t
                    start token])
  (if (not= token.value head)
    (throwE token "expected '" head "'"))
  (while #t
    (set! cur (peekToken tokens))
    (cond
      (nichts? cur)
      (throwE start "expected '" tail "', got EOF")
      (== tail cur.value)
      (break-out-of-loop!)
      :else
      (addAst ast (read* tokens))))
  ;;skip the tail token
  (popToken tokens)
  (copyTokenData start ast))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- readList "Process an expression"
  ^Array [tokens] (readBlock tokens "(" ")"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- readVector "Process a Vector"
  ^Array [tokens]
  (into! :vector (readBlock tokens "[" "]")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- readObjectMap "Process a ObjectMap"
  ^Array [tokens]
  (into! :map (readBlock tokens "{" "}")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- readObject "Process a Object"
  ^Array [tokens]
  (into! :obj (readBlock tokens "`{" "}")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- readObjectSet "Process a ObjectSet"
  ^Array [tokens]
  (into! :set (readBlock tokens "#{" "}")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- skipParse "Advance the token index,
                  then continue to parse"
  ^Any [tokens func]
  (with-local-vars [t (popToken tokens)
                    ret (func tokens)
                    a1 (_1 ret)])
  (copyTokenData t a1)
  (copyTokenData t ret))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(const- *spec-tokens*
        { "'" #(['quote (read* %)])
          "`" #(['syntax-quote (read* %)])
          "~" #(['unquote (read* %)])
          "~@" #(['splice-unquote (read* %)])
          "^" #(let [tmp (read* %)]
                 ['with-meta (read* %) tmp])
          "@" #(['deref (read* %)])
          "$" #(do-with [y (read* %)]
                 (with-local-vars [x 'str])
                 (if (> (alen y) 1)
                   (set! y [x y]) (y.unshift x)))
          "#" #(['lambda (read* %)])
          "[" [#(readVector %)]
          "(" [#(readList %)]
          "#{" [#(readObjectSet %)]
          "`{" [#(readObject %)]
          "{" [#(readObjectMap %)]})

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- read* "Inner parser routine"
  ^Any [tokens]
  (with-local-vars [token (peekToken tokens)
                    tval (if token token.value "")
                    func (get *spec-tokens* tval)])
  (cond
    (array? func) (apply (_1 func) this [tokens])
    (fn? func) (skipParse tokens func)
    (nichts? token) undefined
    (or (== tval ";")(== tval ","))
    (do->undef (popToken tokens))
    :else
    (readAtom tokens)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- addAst
  "" ^Array [ast f]
  (if-not (undef? f) (conj! ast f)) ast)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn parse "Main parser routine"
  ^Array [source & [fname]]
  (with-local-vars
    [tokens (lexer source
                   (opt?? fname "*adhoc*"))
     f nil
     ast []
     tlen (n# tokens)])
  (set! tokens.pos 0)
  (if false
    (each #(println "token=" (.-name %)) tokens))
  (while (< tokens.pos tlen)
    (addAst ast (read* tokens))) ast)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- dumpInfo "" ^String [tag ast]
  (if (and ast
           (number? ast.line))
    (str "<"
         tag
         " line=" "\"" ast.line "\""
         " column=" "\"" ast.column "\"" ">")
    (str "<" tag ">")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- dump* "Debug and dump the AST"
  ^String [tree]
  (with-local-vars [s ""])
  (if (primitive? tree)
    (set! tree (.-value tree)))
  (cond
    (vector? tree)
    (str (dumpInfo "vector" tree)
         (join "" (map #(dump* %) tree))
         "</vector>")
    (set? tree)
    (str (dumpInfo "set" tree)
         (join "" (map #(dump* %) tree))
         "</set>")
    (map? tree)
    (str (dumpInfo "map" tree)
         (join "" (map #(dump* %) tree))
         "</map>")
    (list? tree)
    (str (dumpInfo "list" tree)
         (join "" (map #(dump* %) tree))
         "</list>")
    (array? tree)
    (str (dumpInfo "sexpr" tree)
         (join "" (map #(dump* %) tree))
         "</sexpr>")
    (lambdaArg? tree)
    (str (dumpInfo "lambda-arg" tree)
         (.-value tree) "</lambda-arg>")
    (keyword? tree)
    (str (dumpInfo "keyword" tree)
         (escXml (.-value tree)) "</keyword>")
    (symbol? tree)
    (str (dumpInfo "symbol" tree)
         (escXml (.-value tree)) "</symbol>")
    (regexObj? tree)
    (str (dumpInfo "regex" tree)
         (escXml (.-value tree)) "</regex>")
    (string? tree)
    (str "<string>" (escXml (quote-str tree)) "</string>")
    (number? tree)
    (str "<number>" tree "</number>")
    (nil? tree)
    (str "<reserved>" "null" "</reserved>")
    (true? tree)
    (str "<boolean>" true "</boolean>")
    (false? tree)
    (str "<boolean>" false  "</boolean>")
    (undef? tree)
    (str "<reserved>" "undefined" "</reserved>")
    :else (throwE tree "Bad AST")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn dumpTree "Debug and dump the AST"
  ^String [tree fname]
  (str "<AbstractSyntaxTree file=\""
       (escXml fname)
       "\">"
       (dump* tree)
       "</AbstractSyntaxTree>"))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;EOF

