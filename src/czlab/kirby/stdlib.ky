;; Copyright (c) 2013-2018, Kenneth Leung. All rights reserved.
;; The use and distribution terms for this software are covered by the
;; Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
;; which can be found in the file epl-v10.html at the root of this distribution.
;; By using this software in any fashion, you are agreeing to be bound by
;; the terms of this license.
;; You must not remove this notice, or any other, from this software.

(ns ^{:doc "Kirby's standard core library."
      :author "Kenneth Leung"}

  czlab.kirby.stdlib

  (:require ["./macros" :refer :none]))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn println "" [&msgs]
  (if console (console.log (join "" msgs))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn not-empty

  "If coll is empty, returns nil, else coll"
  [coll]

  (if (empty? coll) nil coll))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- noCRef
  "Use a cache to store already referenced objects
  to prevent circular references" []
  (var cache [])
  (fn [k v]
    (cond (fn? v)
          (set! v "native-fn")
          (object? v)
          (if (contains? cache v)
            (undef! v)
            (conj! cache v))) v))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn stringify

  "JSON stringify (no cyclical obj-ref)"
  ^String [obj]

  (if obj (JSON/stringify obj (noCRef))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn opt??

  "If cur is not defined, returns other else cur"
  ^Any [cur other]

  (if (def? cur) cur other))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn conj!

  "conj[oin]. Returns coll with the xs
  'added'. (conj! nil item) returns [item].
  If coll is a list, prepends else appends to coll."

  ^Array [coll & xs]
  (var c (or coll []))
  (if (list? c)
    (->> (xs.reverse)
         (c.unshift.apply c)) (c.push.apply c xs)) c)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn conj "Like conj! but
           returns a new collection"
  ^Array [coll & xs]
  (var c
       (cond (vector? coll)
             (into :vector coll)
             (list? coll)
             (into :list coll)
             (map? coll)
             (into :map coll)
             (nichts? coll)
             []
             :else (slice coll)))
  (apply conj! this (concat [c] xs)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn pop!

  "Removes the first element if list,
  else removes the last element,
  returning the element
  and the altered collection"

  ^Array [coll]
  (var r (if (list? coll)
           (coll.shift) (coll.pop))) [r coll])

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn pop "Like pop! but returns a new collection"
  ^Array [coll]
  (var r (if (list? coll)
           (1st coll) (last coll)))
  [r (if (list? coll)
       (coll.slice 1) (coll.slice 0 -1))])

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn wrap-str
  "Prepend and append
  strings to the object." [obj start end] (str start obj end))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn getProp

  "If prop is a string, returns the value of
  this object property, obeying the own? flag.
  Otherwise, return the value at the index of
  the array"

  ^Any
  [obj prop & [own?]]
  (set! own? (opt?? own? true))
  (if (or (string? prop)
          (number? prop))
    (if (and own?
             (string? prop)
             (not (obj.hasOwnProperty prop)))
      undefined
      (raw# "obj[prop]"))
    undefined))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn prn

  "Print data as string - use to dump an AST node"
  ^String [obj & [r?]]

  (var f (noCRef))
  (if (complex? obj)
    (set! obj (f nil obj)))
  (if obj (prn* obj r? f) ""))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- prnArr* "Print an array" [obj r? f]
  (join " "
        (map (fn [v i]
               (var x (f i v))
               (-> (opt?? x null)
                   (prn* r? f))) obj)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- prn*

  "" [obj r? func]

  (var pfx #(prn* % r? func)
       parr (if (arr? obj)
              #(wrap-str
                 (prnArr* obj
                          r? func) %1 %2)))
  (case (typeid obj)
    :atom
    (wrap-str (func nil obj.value) "(atom" ")")
    :lambda-arg
    (str "%" (+1 (int obj.value)))
    :keyword
    (str (if obj.pfx "::" ":") obj.value)
    :symbol
    obj.value
    :object
    (-> (reduce (fn [acc [k v]]
                  (var x (func k v))
                  (if-not (undef? x)
                    (conj! acc
                           (str (pfx k)
                                ":" (pfx x)))) acc)
                [] (seq obj))
        (.join  ",")
        (wrap-str "{" "}"))
    :vector
    (parr "[" "]")
    :map
    (parr "{" "}")
    :list
    (parr "'(" ")")
    :string
    (if r? (quote-str obj) obj)
    (:null :nil)
    "null"
    (if (array? obj)
      (parr "(" ")") (obj.toString))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(deftype Atom [][value nil]
  "Defining a clojure-like Atom"
  (constructor "" [val] (set! this.value val)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn atom?
  "Returns true if an Atom" [atm] (inst? Atom atm))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn atom
  "Create a new Atom" ^Atom [val] (new Atom val))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn reset!
  "Set a new value to the Atom" [a v] (do->nil (set! a.value v)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn resetVec! "" [v]
  (do->nil (if (array? v) (.splice v 0))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn resetObject! "" [obj]
  (do->nil
    (if (object? obj)
      (each #(delete! obj %) (keys obj)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn sort!
  "Returns a sorted sequence of the items in coll.
  If no comparator is supplied, uses compare"
  [comp coll]
  (if (fn? comp) (.sort coll comp) (.sort comp)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn find

  "Returns the value of the first element
  in the collection that satisfies the
  provided predicate function"
  [coll pred]

  (var ret nil c nil)
  (for [i 0 sz (n# coll)
        :while (< i sz) :recur (+1 i)]
    (set! c (.@i coll))
    (when (pred c)
      (set! ret c)
      (break-out-of-loop!))) ret)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn deref
  "Get value inside the Atom" ^Any [a] (.-value a))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn swap! "Change value inside the Atom,
            returning the new value"
  ^Any [a f & xs]
  (->> (concat [a.value] xs)
       (apply f this)
       (set! a.value )) (get a :value))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn typeid "Returns the type-id
             of this object"
  [obj]
  (cond
    (lambda-arg? obj) :lambda-arg
    (keyword? obj) :keyword
    (symbol? obj) :symbol
    (vector? obj) :vector
    (atom? obj) :atom
    (list? obj) :list
    (map? obj) :map
    (nil? obj) :null
    (true? obj) :true
    (false? obj) :false
    (fn? obj) :function
    (string? obj) :string
    (number? obj) :number
    (array? obj) :array
    (object? obj) :object
    :else
    (raise! "Unknown type [" (type obj) "]")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn complex?
  "True if x is an array
  or js object." [x] (or (array? x) (object? x)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn simple? "True if x is a
              primitive value type" [obj]
  (or (undef? obj)
      (nil? obj) (false? obj) (true? obj) (string? obj) (number? obj)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn value? "Returns true
             if a simple LISP value"
  [obj]
  (or (nil? obj)
      (vector? obj)
      (list? obj)
      (map? obj)
      (false? obj)
      (true? obj)
      (string? obj)
      (number? obj)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn sequential? "True if coll
                  implements Sequential"
  [arr] (and (array? arr) (not (map? arr))))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- map2Obj "" [m]
  (var ret {})
  (var~ k v)
  (for [i 0 sz (n# m)
        :while (< i sz) :recur (+2 i)]
    (set! k (.@i m)
          v (.@+i m))
    (assoc! ret (str k) v)) ret)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn eq? "True if both are equal" [a b]
  (var k nil ok? true)
  (cond
    (and (map? a) (map? b)
         (= (alen a) (alen b)))
    (eq? (map2Obj a) (map2Obj b))
    (and (array? a) (array? b)
         (= (alen a) (alen b)))
    (do (for [i 0 sz (alen a)
              :while (and ok? (< i sz)) :recur (+1 i)]
          (when-not (eq? (.@i a)
                         (.@i b)) (false! ok?))) ok?)
    (and (inst? LambdaArg a)
         (inst? LambdaArg b))
    (= a.value b.value)
    (and (inst? Symbol a)
         (inst? Symbol b))
    (= a.value b.value)
    (and (inst? Keyword a)
         (inst? Keyword b))
    (and (= a.pfx b.pfx)
         (= a.value b.value))
    (and (object? a)
         (object? b)
         (= (n# a) (n# b)))
    (do (for [i 0 ks (keys a) sz (n# ks)
              :while (and ok? (< i sz)) :recur (+1 i)]
          (set! k (.@i ks))
          (when-not (eq? (get a k)
                         (get b k)) (false! ok?))) ok?)
    :else
    (= a b)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn object? "Returns true
              if a js object" [obj]
  (if-not (or (nil? obj)
              (array? obj)) (= (type obj) "object")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn last "Returns the last element"
  ^Any [coll]
  (if (and (array? coll)
           (nzlen? coll)) (nth coll (last-index coll))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn into! "Assign a type to this collection"
  ^Array [type coll]
  (case type
    :vector
    (assoc! coll :____vec #t)
    :list
    (assoc! coll :____list #t)
    :map
    (assoc! coll :____map #t)) coll)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn into "Like into! but
           returning a new collection"
  ^Array [type coll]
  (into! type (coll.slice 0)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn pairs? "Returns true if
             a LISP list, not data" [obj]
  (and (array? obj)
       (not (vector? obj)) (not (map? obj)) (not (list? obj))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn list? "Returns true if a List"
  [obj] (and (array? obj) obj.____list))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn list
  "Create a List" ^Array [&xs] (assoc! xs :____list #t) xs)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn vector? "Returns true if a Vector"
  [obj] (and (array? obj) obj.____vec))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn vector
  "Create a Vector" ^Array [&xs] (assoc! xs :____vec #t) xs)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn map? "Returns true if a Hashmap"
  [obj] (and (array? obj) obj.____map))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn arraymap "Create a new array map"
  ^Array [&xs]
  (if (odd? (alen xs))
    (raise! "Invalid arity for arraymap"))
  (assoc! xs :____map #t) xs)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn object "Create a new js object"
  ^Object [&xs]
  (if (odd? (alen xs))
    (raise! "Invalid arity for object"))
  (zipmap (evens xs) (odds xs)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn seq "Returns a sequence"
  ^Array [obj]
  (cond
    (string? obj) (obj.split "")
    (array? obj) (obj.slice 0)
    (object? obj) (Object.entries obj)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn contains? "True if item is inside" [coll x]
  (cond
    (or (array? coll)
        (string? coll)) (coll.includes x)
    (object? coll) (coll.hasOwnProperty x) :else false))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn nichts? "True if object is
              either null of undefined" [obj] (or (undef? obj) (nil? obj)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn some? "True if object is
            defined and not null" [obj] (not (nichts? obj)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn count "Count the number of elements inside"
  ^Integer [coll]
  (if coll
    (alen (if (or (string? coll)
                  (array? coll)) coll (keys coll))) 0))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn concat* "Add many to this collection"
  ^Array [coll & xs]
  (if coll (coll.concat.apply coll xs)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- every "" ^Array [coll start step]
  (var ret [])
  (for [i start sz (n# coll)
        :while (< i sz) :recur (+ i step)] (conj! ret (.@i coll))) ret)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn copyVector "" [from to]
  (when (and (array? from)
             (array? to))
    (var fc (n# from) tc (n# to))
    (if-not (< fc tc)
      (each (fn [v i]
              (set-in! to i (get from i))) to))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn evens "Collect every
            2nd item starting at 0" ^Array [coll] (every coll 0 2))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn odds "Collect every
           2nd item starting at 1" ^Array [coll] (every coll 1 2))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn modulo "Modulo"
  ^Integer [x N]
  (if (< x 0)
    (- x (* -1
            (+ N (* (Math.floor (div (- x) N)) N))))
    (rem x N)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn partition

  "Returns a sequence of lists of n items each."

  ^Array [n coll]
  (loop [ret []
         [x y] (split-seq coll n)]
    (if (not-empty x) (conj! ret x))
    (if (empty? y)
      ret
      (recur ret (split-seq y n)))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn split-str

 "Returns a sequence of strings of n characters each."
  [n string]

  (var ret [])
  (for [i 0 sz (n# string) :while (< i sz)]
    (conj! ret (.substr string i n))
    (set! i (+ i n))) ret)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn interleave "Returns a seq of the first item
                 in each coll, then the second, etc"
  ^Array [c1 c2]
  (var cz (if (< (alen c2)
                 (alen c1))
            (alen c2) (alen c1))
       ret [])
  (for [i 0
        :while (< i cz) :recur (+1 i)] (conj! ret (.@i c1) (.@i c2))) ret)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn zipmap "Returns an object with the
             keys mapped to the corresponding vals"
  ^Object [keys vals]
  (var cz (if (< (alen keys)
                 (alen vals))
            (alen keys) (alen vals))
       ret {})
  (for [i 0
        :while (< i cz) :recur (+1 i)]
    (assoc! ret $(.@i keys) (.@i vals))) ret)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn extendAttr "" ^Object [obj attr & [flags]]
  (set! flags (opt?? flags
                   {:enumerable #f :writable #t}))
  (Object.defineProperty obj attr flags) obj)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn cons
  "Returns a new seq where x is the first element and seq is
  the rest." [x coll] (.concat [x] coll))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(const- gensym-counter (atom 0))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn gensym "Generates next random symbol"
  ^Symbol [& [pfx]]
  (symbol (str (opt?? pfx "GS__")
               (swap! gensym-counter
                      (fn [x] (+1 x))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn carve "" ^Array [coll & [start end]]
  (if (def? end)
    (Array.prototype.slice.call coll start end)
    (if (def? start)
      (Array.prototype.slice.call coll start)
      (Array.prototype.slice.call coll))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn assoc! "" ^Object [mmap & xs]
  (when mmap
    (for [i 0 sz (n# xs)
          :while (< i sz) :recur (+2 i)]
      ;the following assoc!
      ;will be compiled out
      (assoc! mmap (.@i xs) (.@+i xs)))) mmap)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn dissoc! "" ^Object [mmap & xs]
  (when mmap
    (doseq [n xs]
      (delete! mmap n))) mmap)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn truthy? "LISP truthy" [a] (not (falsy? a)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn falsy? "LISP falsy" [a] (or (nil? a)(false? a)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn flatten
  "Flatten an array" [xs]
  (reduce (fn [acc v] (concat acc v)) [] xs))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn identity "Returns its argument." [x] x)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;namespace
(def- *ns* (atom nil))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn setnsp! "" [p] (reset! *ns* p))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn getnsp "" []
  (var p (deref *ns*))
  (if (empty? p) "user" p))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;monads
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defmonad m-identity

  "Monad describing plain computations. This monad does in fact nothing
  at all. It is useful for testing, for combination with monad
  transformers, and for code that is parameterized with a monad."

  [ bind (fn [mv mf] (mf mv)) unit #(%1)] )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defmonad m-maybe

  "Monad describing computations with possible failures. Failure is
  represented by nil, any other value is considered valid. As soon as
  a step returns nil, the whole computation will yield nil as well."

  [bind (fn [mv mf]
          (if-not (nil? mv) (mf mv))) unit #(%1) zero nil] )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defmonad m-list

  "Monad describing multi-valued computations, i.e. computations
  that can yield multiple values. Any object implementing the seq
  protocol can be used as a monadic value."

  [bind (fn [mv mf] (flatten (map mf mv)))
   unit #(concat [] %)
   zero []
   plus #(flatten ____args) ])


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defmonad m-state

  "Monad describing stateful computations. The monadic values have the
  structure (fn [old-state] [result new-state])."

  [bind (fn [mv mf]
          (fn [state]
            (let [[value newState] (mv state)]
              ((mf value) newState))))
   unit (fn [v] #([v %1])) ])

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defmonad m-continuation

  "Monad describing computations in continuation-passing style. The monadic
  values are functions that are called with a single argument representing
  the continuation of the computation, to which they pass their result."

  [bind (fn [mv mf]
          (fn [cont]
            (mv (fn [value] ((mf value) cont)))))
   unit (fn [value] (fn [cont] (cont value))) ])

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn run-cont
  "Execute the computation cont
  in the cont monad and return its result."
  [cont]
  (cont identity))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn quote-str "Add quotes around a string" ^String [s]
  (var out "\"")
  (for [i 0 ch "" sz (count s)
        :while (< i sz) :recur (+1 i)]
    (set! ch (ch@ s i))
    (cond
      (= ch "\"") (+= out "\\\"")
      (= ch "\n") (+= out "\\n")
      (= ch "\t") (+= out "\\t")
      (= ch "\f") (+= out "\\f")
      (= ch "\r") (+= out "\\r")
      (= ch "\v") (+= out "\\v")
      (= ch "\\") (+= out (if (= "u" (ch@ s (+1 i))) ch "\\\\"))
      :else (+= out ch)))
  (+= out "\""))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn unquote-str "Removes quotes around a string" ^String [s]
  (if (and (starts? s "\"")
           (ends? s "\""))
    (do-with [out ""]
      (set! s (s.slice 1 -1))
      (for [i 0 nx "" ch "" sz (count s)
            :while (< i sz) :recur (+1 i)]
        (set! ch (ch@ s i))
        (if (= ch "\\")
          (do (++ i)
              (set! nx (ch@ s i))
              (cond
                (= nx "\"") (+= out "\"")
                (= nx "\\") (+= out "\\")
                (= nx "n") (+= out "\n")
                (= nx "t") (+= out "\t")
                (= nx "f") (+= out "\f")
                (= nx "v") (+= out "\v")
                (= nx "r") (+= out "\r")
                :else (do (+= out ch) (-- i))))
          (+= out ch))))
    s))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn escXml "Escape XML special chars" ^String [s]
  (var out "")
  (for [i 0 c nil sz (n# s)
        :while (< i sz) :recur (+1 i)]
    (set! c (.@i s))
    (cond
      (= c "&") (set! c "&amp;")
      (= c ">") (set! c "&gt;")
      (= c "<") (set! c "&lt;")
      (= c "\"") (set! c "&quot;")
      (= c "'") (set! c "&apos;"))
    (+= out c))
  out)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn split-seq "Split a collection into 2 parts" ^Array [coll cnt]
  (if (< cnt (count coll))
    [(take coll cnt) (drop coll cnt)]
    [(slice coll 0) []]))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn select-keys "Get a subset of keys" ^Object [coll keys]
  (reduce
    (fn [acc n]
      (assoc! acc
           (str n)
           (get coll (str n))) acc) {} (seq keys)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- doUpdateIn! "" [coll n func args err]
  (var cur (cond
             (number? n)
             (if (and (array? coll)
                      (< n (alen coll))) (nth coll n) (err n))
             :else (get coll n))
       v (apply func this (cons cur args)))
  (assoc! coll n v))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn update-in!

  "'Updates' a value in a nested associative structure, where ks is a
sequence of keys and f is a function that will take the old value
and any supplied args and return the new value, and returns a new
nested structure.  If any levels do not exist, hash-maps will be
created."

  ^Any [coll keys func & xs]

  (var err #(raise! "update-in! failed, bad nested keys: " %))
  (var root coll
       end (last-index keys))
  (var~ m n)
  (for [i 0 :while (<= i end) :recur (+1 i)]
    (set! n (.@i keys))
    (cond
      (= i end)
      (doUpdateIn! root n func xs err)
      (number? n)
      (if-not (and (array? root)
                   (< n (alen root)))
        (err n)
        (set! root (nth root n)))
      :else
      (do (set! m (get root n))
          (when (undef? m) (set! m {}) (assoc! root n m))
          (if-not (object? m) (err n))
          (set! root m))))
  coll)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn get-in
  "Returns the value in a nested associative structure,
  where ks is a sequence of keys. Returns nil if the key
  is not present, or the not-found value if supplied."
  ^Any [coll keys]

  (var root coll
       ret nil
       end (last-index keys))
  (var~ m n)
  (for [i 0 :while (<= i end) :recur (+1 i)]
    (set! n (.@i keys))
    (cond
      (number? n)
      (if-not (and (array? root)
                   (< n (alen root)))
        (do (set! ret nil)
            (console.log "sdfdsgfdsgdsgd")
            (break-out-of-loop!))
        (set! root (nth root n)
              ret root))
      :else
      (do (set! root (get root n)
                ret root)))) ret)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn- merge! "" [base m]
  (var ret (or base {})
       src (or m {}))
  (each-key (fn [v k]
              (set-in! ret k v)) src) ret)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn merge

  "Returns a map that consists of the rest of the maps conj-ed onto
the first.  If a key occurs in more than one map, the mapping from
the latter (left-to-right) will be the mapping in the result."

  [&maps] (reduce (fn [acc n] (merge! acc n)) {} maps))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn difference
  "Return a set that is the first set
  without elements of the other set."
  [a b]

  (var ret [] z nil)
  (for [i 0 sz (n# a)
        :while (< i sz) :recur (+1 i)]
    (set! z (.@i a))
    (if-not (contains? b z) (conj! ret z)))
  ret)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn percent "" ^Number [numerator denominator]
  (* 100 (div numerator denominator)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn toFixed "" ^String [num digits]
  (set! digits (opt?? digits 2))
  (.toFixed (Number num) digits))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;testing stuff
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn ensureTest "" [cnd msg]
  (set! msg (or msg "test"))
  (try (str (if cnd "passed:" "FAILED:") " " msg)
       (catch e (str "FAILED: " msg))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn ensureTestThrown "" [expected error msg]
  (if (nil? error)
    (str "FAILED: " msg)
    (if (or (= expected (type error))
            (= expected "any"))
      (str "passed: " msg)
      (str "FAILED: " msg))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defn runtest "" [test & [title]]
  (set! title (opt?? title "test"))
  (var now (new Date)
       results (test)
       sum (n# results)
       ok (n# (filter #(starts? % "p") results))
       ps (toFixed (percent ok sum)))
  (->> [(.repeat "+" 78)
        title now
        (.repeat "+" 78)
        (join "\n" results)
        (.repeat "=" 78)
        (str "Passed: " ok "/" sum " [" ps "%]")
        (str "Failed: " (- sum ok))
        (str "CPU Time: " (- (new Date) now) "ms")]
       (join "\n")))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;EOF

