/*Auto generated by Kirby v1.0.0 - Fri Mar 23 2018 02:58:21 GMT-0700 (PDT)
  czlab.kirby.compiler
{"doc" "Transpiles kirby code to js code." "author" "Kenneth Leung"}
*/

const smap = require("source-map");
const std = require("./stdlib");
const lambdaArg_QMRK = std["lambdaArg_QMRK"];
const pairs_QMRK = std["pairs_QMRK"];
const into_BANG = std["into_BANG"];
const println = std["println"];
const seq = std["seq"];
const merge = std["merge"];
const contains_QMRK = std["contains_QMRK"];
const last = std["last"];
const typeid = std["typeid"];
const prn = std["prn"];
const primitive = std["primitive"];
const set_QMRK = std["set_QMRK"];
const map_QMRK = std["map_QMRK"];
const vector_QMRK = std["vector_QMRK"];
const opt_QMRK__QMRK = std["opt_QMRK__QMRK"];
const some_QMRK = std["some_QMRK"];
const primitive_QMRK = std["primitive_QMRK"];
const regexObj_QMRK = std["regexObj_QMRK"];
const unquote_DASH_str = std["unquote_DASH_str"];
const quote_DASH_str = std["quote_DASH_str"];
const rseq = std["rseq"];
const cons = std["cons"];
const not_DASH_empty = std["not_DASH_empty"];
const conj_BANG = std["conj_BANG"];
const list_QMRK = std["list_QMRK"];
const obj_QMRK = std["obj_QMRK"];
const gensym = std["gensym"];
const count = std["count"];
const pop_BANG = std["pop_BANG"];
const partition = std["partition"];
const difference = std["difference"];
const carve = std["carve"];
const split_DASH_with = std["split_DASH_with"];
const symbol = std["symbol"];
const keyword = std["keyword"];
const symbol_QMRK = std["symbol_QMRK"];
const keyword_QMRK = std["keyword_QMRK"];
const rt = require("./engine");
const KBSTDLR = rt["KBSTDLR"];
const KBSTDLIB = rt["KBSTDLIB"];
const KBPFX = rt["KBPFX"];
const EXPKEY = rt["EXPKEY"];
const reader = require("./reader");
const jsid = reader["jsid"];
const fs = require("fs");
const path = require("path");
const esfmt = require("esformatter");
const kirbystdlibref = std;
const __module_namespace__ = "czlab.kirby.compiler";
const ERRORS_DASH_MAP = (new Map([["no-sourcemap-info", "Expected source map info"], ["invalid-fargs", "Invalid function args"], ["invalid-catch", "Invalid catch clause"], ["invalid-try", "Invalid try clause"], ["invalid-require", "Invalid require clause"], ["invalid-namespace", "Invalid namespace clause"], ["destruct-args", "Bad destructure args"], ["outside-macro", "Invalid clause outside of macro"], ["file-access", "Failed file access"], ["file-read", "Failed file read"], ["file-open", "Failed to open file"], ["unknown-keyword", "Unknown keyword"], ["invalid-arity", "Invalid function arity"], ["invalid-meta", "Invalid meta data"], ["syntax-error", "Syntax error"], ["empty-form", "Invalid form (empty)"]]));
const ARRSLICE = "Array.prototype.slice.call";
const JSARGS = "arguments";
const LARGS = "____args";
const BREAK = "____break";
const MOD_DASH_VER = "1.0.0";
var _STAR_externs_STAR = null;
var _STAR_macros_STAR = null;
var _STAR_last_DASH_line_STAR = 0;
var _STAR_last_DASH_col_STAR = 0;
var SPEC_DASH_OPS = {};
var MATH_DASH_OP_DASH_REGEX = /^[-+][0-9]+$/;
////////////////////////////////////////////////////////////////////////////////
//fn: [unmangle] in file: compiler.ky, line: 67
const unmangle = function(s) {
  return s.split(".").map(function() {
    let ____args = Array.prototype.slice.call(arguments);
    return reader.jsid(____args[0]);
  }).join(".");
};
////////////////////////////////////////////////////////////////////////////////
//fn: [tnodeEx] in file: compiler.ky, line: 71
//Create a node
const tnodeEx = function(name) {
  let GS__8 = Array.prototype.slice.call(arguments, 1);
  let chunk = kirbystdlibref.getIndex(GS__8, 0);
  return tnode(null, null, null, chunk, name);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [tnode] in file: compiler.ky, line: 75
//Create a token
//with source information
const tnode = function() {
  let GS__9 = Array.prototype.slice.call(arguments, 0);
  let source = kirbystdlibref.getIndex(GS__9, 0);
  let line = kirbystdlibref.getIndex(GS__9, 1);
  let col = kirbystdlibref.getIndex(GS__9, 2);
  let chunk = kirbystdlibref.getIndex(GS__9, 3);
  let name = kirbystdlibref.getIndex(GS__9, 4);
  return new smap.SourceNode(opt_QMRK__QMRK(line, null), opt_QMRK__QMRK(col, null), opt_QMRK__QMRK(source, null), opt_QMRK__QMRK(chunk, null), opt_QMRK__QMRK(name, null));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [doFuncArgs] in file: compiler.ky, line: 85
//Deal with possible destructuring
//of args in function definition
const doFuncArgs = function(args, env) {
  let ev = undefined;
  let rval = undefined;
  let out = undefined;
  let pms = [];
  let ret = [node_QUOT(args), node_QUOT(args)];
  let fargs = kirbystdlibref.getIndex(ret, 0);
  let fdefs = kirbystdlibref.getIndex(ret, 1);
  for (let ____coll = args, i = 0, ____end = kirbystdlibref.count(____coll), ____break = false; ((!____break) && (i < ____end)); i = (i + 1)) {
    let e = ____coll[i];
    if (symbol_QMRK(e)) {
      if ( (e == "&") ) {
        (rval = node_QUOT(args), e = args[(i + 1)]);
        rval.add([ARRSLICE, "(", JSARGS, ",", Number(i).toString(), ")"]);
        if (symbol_QMRK(e)) {
          fdefs.add(["let ", tx_STAR(e, env), "=", rval, ";\n"]);
        } else {
          (out = node_QUOT(args), e = destruct_STAR(e, out, env));
          fdefs.add(["let ", tx_STAR(e, env), "=", rval, ";\n", out]);
        }
        (____break = true);
      } else {
        if ( (e == "_") ) {
          (
          e = xfi(e, gensym("U__")));
        }
        conj_BANG(pms, e);
      }
    } else {
      if ( (Array.isArray(e)) ) {
        (rval = node_QUOT(args), out = node_QUOT(args), e = destruct_STAR(e, out, env));
        rval.add([JSARGS, "[", Number(i).toString(), "]"]);
        conj_BANG(pms, e);
        fdefs.add(out);
      } else {
        if (true) {
          error_BANG("destruct-args", args);
        }
      }
    }
  }
  pms.forEach(function() {
    let ____args = Array.prototype.slice.call(arguments);
    return fargs.add(tx_STAR(____args[0], env));
  });
  fargs.join(",");
  return ret;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [destruct*] in file: compiler.ky, line: 128
//Decide on what the
//rhs should be referred to 'as'
const destruct_STAR = function(coll, out, env) {
  let e = undefined;
  let rhs = gensym();
  for (let ____coll = coll, i = 0, ____end = kirbystdlibref.count(____coll), ____break = false; ((!____break) && (i < ____end)); i = (i + 1)) {
    let e = ____coll[i];
    if ( (keyword_QMRK(e) && (e == "as")) ) {
      (
      rhs = symbol([coll[(i + 1)]].join("")));
      (
      ____break = true);
    }
  }
  (rhs = xfi(coll, rhs));
  if (map_QMRK(coll)) {
    out.add(destructMap(rhs, coll, env));
  } else {
    if (vector_QMRK(coll)) {
      out.add(destructVec(rhs, coll, env));
    } else {
      null;
    }
  }
  return rhs;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [destructVec] in file: compiler.ky, line: 146
const destructVec = function(src, coll, env) {
  let ret = node_QUOT(coll);
  let e = undefined;
  let rval = undefined;
  let out = undefined;
  let as = tx_STAR(src, env);
  for (let ____coll = coll, i = 0, ____end = kirbystdlibref.count(____coll), ____break = false; ((!____break) && (i < ____end)); i = (i + 1)) {
    let e = ____coll[i];
    if (symbol_QMRK(e)) {
      if ( (e == "_") ) {
        null;
      } else {
        if ( (e == "&") ) {
          (rval = node_QUOT(coll), out = node_QUOT(coll), e = coll[(i + 1)]);
          rval.add([ARRSLICE, "(", as, ",", Number(i).toString(), ")"]);
          if ( (!symbol_QMRK(e)) ) {
            (
            e = destruct_STAR(e, out, env));
          } else {
            null;
          }
          ret.add(["let ", tx_STAR(e, env), "=", rval, ";\n", out]);
          (
          ____break = true);
        } else {
          if (true) {
            ret.add(["let ", tx_STAR(e, env), "=", stripStd([KBSTDLR, ".getIndex"].join("")), "(", as, ",", Number(i).toString(), ");\n"]);
          }
        }
      }
    } else {
      if ( (Array.isArray(e)) ) {
        (rval = node_QUOT(coll), out = node_QUOT(coll), e = destruct_STAR(e, out, env));
        rval.add([as, "[", Number(i).toString(), "]"]);
        ret.add(["let ", tx_STAR(e, env), "=", rval, ";\n", out]);
      } else {
        if (keyword_QMRK(e)) {
          if ( (e == "as") ) {
            ++i;
          } else {
            error_BANG("unknown-keyword", coll);
          }
        } else {
          if (true) {
            error_BANG("syntax-error", coll);
          }
        }
      }
    }
  }
  return ret;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [destructMap] in file: compiler.ky, line: 183
const destructMap = function(src, coll, env) {
  let ret = node_QUOT(coll);
  let e = undefined;
  let arr = undefined;
  let as = tx_STAR(src, env);
  for (let ____coll = coll, i = 0, ____end = kirbystdlibref.count(____coll), ____break = false; ((!____break) && (i < ____end)); i = (i + 1)) {
    let e = ____coll[i];
    if (keyword_QMRK(e)) {
      if ( ((e == "keys") || (e == "strs")) ) {
        (
        arr = coll[(i + 1)]);
        ++i;
        for (let GS__13 = 0, GS__11 = true, GS__12 = arr, ____sz = kirbystdlibref.count(GS__12), ____break = false; (!____break && GS__11 && (GS__13 < ____sz)); ++GS__13) {
          let a_QUOT = GS__12[GS__13];
          ret.add(["let ", tx_STAR(a_QUOT, env), "=", stripStd([KBSTDLR, ".getProp"].join("")), "(", as, ",", std.quote_DASH_str([a_QUOT].join("")), ");\n"]);
        }
      } else {
        if ( (e == "as") ) {
          ++i;
        } else {
          if (true) {
            error_BANG("unknown-keyword", coll);
          }
        }
      }
    } else {
      error_BANG("syntax-error", coll);
    }
  }
  return ret;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [simple?] in file: compiler.ky, line: 206
const simple_QMRK = function(ast) {
  return (((typeof (ast) === "undefined")) || ((ast === null)) || ((typeof (ast) === "string")) || ((typeof (ast) === "number")) || ((typeof (ast) === "boolean")));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [wrap] in file: compiler.ky, line: 210
const wrap = function(ret, head, tail) {
  if (head) {
    ret.prepend(head);
  }
  if (tail) {
    ret.add(tail);
  }
  return ret;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [exprHint] in file: compiler.ky, line: 215
const exprHint = function(ast, flag) {
  if (simple_QMRK(ast)) {
    (
    ast = primitive(ast));
  }
  (ast["____expr"] = flag);
  return ast;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [stmt?] in file: compiler.ky, line: 221
const stmt_QMRK = function(ast) {
  if (simple_QMRK(ast)) {
    error_BANG("syntax-error", ast);
  }
  return ((ast.____expr === false));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [error!] in file: compiler.ky, line: 225
const error_BANG = function(e) {
  let GS__14 = Array.prototype.slice.call(arguments, 1);
  let ast = kirbystdlibref.getIndex(GS__14, 0);
  let msg = kirbystdlibref.getIndex(GS__14, 1);
  return (function() {
    throw new Error([kirbystdlibref.getProp(ERRORS_DASH_MAP, e), (msg ?
      [" : ", msg].join("") :
      null), ((ast && ast.line) ?
      ["\nline: ", ast.line].join("") :
      null), ((ast && ast.source) ?
      ["\nfile: ", ast.source].join("") :
      null)].join(""));
  }).call(this);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [testre?] in file: compiler.ky, line: 232
const testre_QMRK = function(re, x) {
  return (x ?
    re.test(x) :
    false);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [pad] in file: compiler.ky, line: 235
const pad = function(n) {
  return " ".repeat(n);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [node'] in file: compiler.ky, line: 238
const node_QUOT = function(ast) {
  let GS__15 = Array.prototype.slice.call(arguments, 1);
  let obj = kirbystdlibref.getIndex(GS__15, 0);
  (
  obj = opt_QMRK__QMRK(obj, tnode()));
  (obj["source"] = ast.source, obj["line"] = ast.line, obj["column"] = ast.column);
  return obj;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [txTree] in file: compiler.ky, line: 246
//Process a file unit.  Sort out all the macros first then others.
//Also, always check first for (ns ...)
const txTree = function(root, env) {
  let ms = [];
  let os = [];
  let t = undefined;
  let f = undefined;
  let n1 = root[0];
  let ret = node_QUOT(root);
  if ( (!("ns" == n1[0])) ) {
    throw new Error("(ns ...) must be first form in file");
  } else {
    null;
  }
  conj_BANG(ms, n1);
  for (let GS__18 = 0, GS__16 = true, GS__17 = root.slice(1), ____sz = kirbystdlibref.count(GS__17), ____break = false; (!____break && GS__16 && (GS__18 < ____sz)); ++GS__18) {
    let t = GS__17[GS__18];
    if ( ((Array.isArray(t)) && symbol_QMRK(t[0]) && ("defmacro" == t[0])) ) {
      conj_BANG(ms, t);
    } else {
      conj_BANG(os, t);
    }
  }
  ms.concat(os).forEach(function(r) {
    (_STAR_last_DASH_line_STAR = r.line, _STAR_last_DASH_col_STAR = r.col);
    return (function() {
      let GS__19 = tx_STAR(r, env);
      let t = GS__19;
      return ((((typeof (GS__19) === "undefined")) || ((GS__19 === null))) ?
        null :
        ret.add([t, ";\n"]));
    }).call(this);
  });
  return ret;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [txForm] in file: compiler.ky, line: 270
const txForm = function(expr, env) {
  if ( (Array.isArray(expr)) ) {
    expr.forEach(function(a, i, arr) {
      return (arr[i] = tx_STAR(a, env));
    });
  }
  return expr;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [txAtom] in file: compiler.ky, line: 276
//Returns a SourceNode or String
const txAtom = function(a) {
  let s = [a].join("");
  return (lambdaArg_QMRK(a) ?
    [LARGS, "[", (parseInt(s.slice(1)) - 1), "]"].join("") :
    (regexObj_QMRK(a) ?
      node_QUOT(a, tnodeEx(s, s.slice(1))) :
      (keyword_QMRK(a) ?
        node_QUOT(a, tnodeEx(s, quote_DASH_str(s))) :
        (symbol_QMRK(a) ?
          node_QUOT(a, tnodeEx(s, unmangle(s))) :
          (((a === null)) ?
            "null" :
            (primitive_QMRK(a) ?
              (function() {
                (a = a.value, s = [a].join(""));
                return (((typeof (a) === "string")) ?
                  quote_DASH_str(a) :
                  (((a === null)) ?
                    "null" :
                    (true ?
                      s :
                      null)));
              }).call(this) :
              (((typeof (a) === "string")) ?
                quote_DASH_str(a) :
                (true ?
                  reader.jsid(s) :
                  null))))))));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [tx*] in file: compiler.ky, line: 298
const tx_STAR = function(x) {
  let GS__20 = Array.prototype.slice.call(arguments, 1);
  let env = kirbystdlibref.getIndex(GS__20, 0);
  return ((Array.isArray(x)) ?
    txPairs(x, env) :
    txAtom(x));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [gcmd] in file: compiler.ky, line: 302
const gcmd = function(ast) {
  return (map_QMRK(ast) ?
    "hash-map" :
    (obj_QMRK(ast) ?
      "object" :
      (vector_QMRK(ast) ?
        "vec" :
        (set_QMRK(ast) ?
          "hash-set" :
          (list_QMRK(ast) ?
            "list" :
            (((Array.isArray(ast)) && (!(Array.isArray(ast[0])))) ?
              [ast[0]].join("") :
              (true ?
                "" :
                null)))))));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [quoteSingle] in file: compiler.ky, line: 312
const quoteSingle = function(a) {
  return (keyword_QMRK(a) ?
    [stripStd([KBSTDLR, ".keyword"].join("")), "(\"", a.value, "\")"].join("") :
    (symbol_QMRK(a) ?
      [stripStd([KBSTDLR, ".symbol"].join("")), "(\"", a.value, "\")"].join("") :
      (primitive_QMRK(a) ?
        (function() {
          (
          a = a.value);
          return (((typeof (a) === "string")) ?
            quote_DASH_str(a) :
            (((a === null)) ?
              "null" :
              (true ?
                [a].join("") :
                null)));
        }).call(this) :
        (((typeof (a) === "string")) ?
          quote_DASH_str(a) :
          (true ?
            [a].join("") :
            null)))));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [quote!] in file: compiler.ky, line: 329
const quote_BANG = function(ast, env) {
  assertInfo(ast);
  return ((Array.isArray(ast)) ?
    (map_QMRK(ast) ?
      quoteMap(ast, env) :
      quoteBlock(ast, env)) :
    quoteSingle(ast));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [quoteMap] in file: compiler.ky, line: 338
const quoteMap = function(ast, env) {
  let cma = "";
  let ret = node_QUOT(ast);
  for (let ____coll = ast, i = 0, ____end = kirbystdlibref.count(____coll), ____break = false; ((!____break) && (i < ____end)); i = (i + 2)) {
    let a_QUOT = ____coll[i];
    if ( (i > 0) ) {
      ret.add(",");
    }
    ret.add([quote_BANG(a_QUOT, env), " , ", quote_BANG(ast[(i + 1)], env)]);
  }
  if ( (!(0 === kirbystdlibref.count(ast))) ) {
    (
    cma = ",");
  } else {
    null;
  }
  return wrap(ret, ["[", stripStd([KBSTDLR, ".symbol"].join("")), "(\"hash-map\")", cma], "]");
};
////////////////////////////////////////////////////////////////////////////////
//fn: [quoteBlock] in file: compiler.ky, line: 350
const quoteBlock = function(ast, env) {
  let ret = node_QUOT(ast);
  for (let ____coll = ast, i = 0, ____end = kirbystdlibref.count(____coll), ____break = false; ((!____break) && (i < ____end)); i = (i + 1)) {
    let a_QUOT = ____coll[i];
    if ( (i > 0) ) {
      ret.add(",");
    }
    ret.add(quote_BANG(a_QUOT, env));
  }
  return wrap(ret, "[", "]");
};
////////////////////////////////////////////////////////////////////////////////
//fn: [spreadInfo] in file: compiler.ky, line: 358
const spreadInfo = function(from, to) {
  return ((from && (!simple_QMRK(from)) && ((typeof (from.line) === "number")) && (Array.isArray(to))) ?
    (function() {
      xfi(from, to);
      return (function() {
        for (let GS__23 = 0, GS__21 = true, GS__22 = to, ____sz = kirbystdlibref.count(GS__22), ____break = false; (!____break && GS__21 && (GS__23 < ____sz)); ++GS__23) {
          let t_QUOT = GS__22[GS__23];
          spreadInfo(from, t_QUOT);
        }
        ;return null;
      }).call(this);
    }).call(this) :
    xfi(from, to));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [txPairs] in file: compiler.ky, line: 369
const txPairs = function(ast, env) {
  let nsp = std.peekNSP();
  let stmtQ = stmt_QMRK(ast);
  let ret = node_QUOT(ast);
  let cmd = gcmd(ast);
  let e1 = ast[0];
  let orig = ast;
  let op = null;
  let tmp = null;
  let mc = rt.getMacro(cmd);
  xfi(e1, ret);
  xfi(e1, ast);
  if (mc) {
    (ast = rt.expand_QMRK__QMRK(ast, env, mc), ast = xfi(orig, exprHint(ast, (!stmtQ))));
    spreadInfo(orig, ast);
    (
    cmd = gcmd(ast));
  }
  if (reader.REGEX.int.test(cmd)) {
    if ( (!(cmd.startsWith("+") || cmd.startsWith("-"))) ) {
      (
      cmd = ["+", cmd].join(""));
    } else {
      null;
    }
    (ast = xfi(ast, [symbol(cmd.charAt(0)), ast[1], parseInt(cmd.slice(1))]), cmd = [ast[0]].join(""));
  }
  (op = kirbystdlibref.getProp(SPEC_DASH_OPS, cmd));
  if ( (cmd == "with-meta") ) {
    ret.add(tx_STAR(meta_QMRK__QMRK(ast, env)[1], env));
  } else {
    if (cmd.startsWith(".-")) {
      ret.add([tx_STAR(ast[1], env), ".", tx_STAR(symbol(cmd.slice(2)), env)]);
    } else {
      if (cmd.startsWith(".@")) {
        (
        tmp = (cmd.startsWith(".@+") ?
          [3, true] :
          [2, false]));
        ret.add([tx_STAR(ast[1], env), "[", cmd.slice(tmp[0]), (tmp[1] ?
          "+1]" :
          "]")]);
      } else {
        if (cmd.startsWith(".")) {
          ret.add([tx_STAR(ast[1], env), tx_STAR(symbol(cmd), env), "("]);
          for (let ____coll = ast, n = 2, ____end = kirbystdlibref.count(____coll), ____break = false; ((!____break) && (n < ____end)); n = (n + 1)) {
            let a_QUOT = ____coll[n];
            if ( (n !== 2) ) {
              ret.add(",");
            }
            ret.add(tx_STAR(a_QUOT, env));
          }
          ret.add(")");
        } else {
          if (some_QMRK(op)) {
            (
            ret = op(ast, env));
          } else {
            if ( (((cmd == "splice-unquote") || (cmd == "unquote") || (cmd == "syntax-quote")) && (!kirbystdlibref.getProp(nsp, "id").startsWith(KBPFX))) ) {
              error_BANG("outside-macro", ast);
            } else {
              if (true) {
                if (pairs_QMRK(ast)) {
                  txForm(ast, env);
                  (
                  cmd = [ast[0]].join(""));
                } else {
                  (
                  cmd = tx_STAR(ast, env));
                }
                if ( (!cmd) ) {
                  error_BANG("empty-form", ast);
                } else {
                  null;
                }
                (cmd = stripStd(cmd));
                if (pairs_QMRK(ast)) {
                  ret.add([(testre_QMRK(reader.REGEX.func, cmd) ?
                    ["(", cmd, ")"].join("") :
                    cmd), "(", ast.slice(1).join(","), ")"]);
                } else {
                  ret.add(cmd);
                }
              }
            }
          }
        }
      }
    }
  }
  return node_QUOT(ast, ret);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [writeDoc] in file: compiler.ky, line: 438
//Convert to jsdoc
const writeDoc = function(doc) {
  let out = [];
  if (doc) {
    unquote_DASH_str(doc).split("\n").forEach(function() {
      let ____args = Array.prototype.slice.call(arguments);
      return (function() {
        let s = [____args[0]].join("").trim();
        return (not_DASH_empty(s) ?
          conj_BANG(out, ["//", s, "\n"].join("")) :
          null);
      }).call(this);
    });
  }
  return out;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [txDo] in file: compiler.ky, line: 447
const txDo = function(ast, env) {
  let GS__24 = Array.prototype.slice.call(arguments, 2);
  let return_QMRK = kirbystdlibref.getIndex(GS__24, 0);
  let stmtQ = stmt_QMRK(ast);
  let ret = node_QUOT(ast);
  let e = undefined;
  let end = (ast.length - 1);
  (return_QMRK = (stmtQ ?
    false :
    opt_QMRK__QMRK(return_QMRK, true)));
  for (let ____coll = ast, ____index = 0, ____end = end, ____break = false; ((!____break) && (____index < ____end)); ____index = (____index + 1)) {
    let a_QUOT = ____coll[____index];
    (
    a_QUOT = exprHint(a_QUOT, false));
    ret.add([tx_STAR(a_QUOT, env), ";\n"]);
  }
  if ( (end >= 0) ) {
    (e = exprHint(ast[end], (!stmtQ)), e = tx_STAR(e, env));
    ret.add(((!return_QMRK) ?
      [e, ";\n"] :
      ["return ", e, ";\n"]));
  }
  return ret;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [meta??] in file: compiler.ky, line: 465
const meta_QMRK__QMRK = function(obj, env) {
  let mobj = null;
  if ( ((Array.isArray(obj)) && (3 === kirbystdlibref.count(obj)) && symbol_QMRK(obj[0]) && ("with-meta" == [obj[0]].join(""))) ) {
    (
    mobj = evalMeta(obj[2], env));
    (
    obj[1]["____meta"] = mobj);
    (
    obj = obj[1]);
  }
  return [mobj, obj];
};
////////////////////////////////////////////////////////////////////////////////
//fn: [fmtRegoSpecOps] in file: compiler.ky, line: 477
const fmtRegoSpecOps = function(alias, fname) {
  return [reader.jsid("SPEC-OPS"), "[\"", alias, "\"] = ", fname].join("");
};
////////////////////////////////////////////////////////////////////////////////
//fn: [fmtSpecOps] in file: compiler.ky, line: 481
const fmtSpecOps = function(fname, attrs) {
  let ks = (kirbystdlibref.getProp(attrs, "opcode") || []);
  let out = ks.map(function() {
    let ____args = Array.prototype.slice.call(arguments);
    return fmtRegoSpecOps([____args[0]].join(""), fname);
  }).join(";\n");
  return (not_DASH_empty(ks) ?
    [out, ";\n"].join("") :
    out);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [writeFuncPre] in file: compiler.ky, line: 489
const writeFuncPre = function(pre, env) {
  let ret = node_QUOT(pre);
  let c2 = [kirbystdlibref.symbol("if-not"), [kirbystdlibref.symbol("and")].concat(pre), [kirbystdlibref.symbol("throw"), [kirbystdlibref.symbol("Error"), "Precondition failed"]]];
  return ret.add([tx_STAR(exprHint(c2, false), env), ";\n"]);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [writeFuncInfo] in file: compiler.ky, line: 497
const writeFuncInfo = function(fname, ast) {
  let file = (ast.source ?
    ast.source.slice((ast.source.lastIndexOf("/") + 1)) :
    "?");
  let s = ["//fn: [", fname, "] in file: ", file, ", line: ", (ast.line || "?"), "\n"].join("");
  let len = s.length;
  if ( (len < 80) ) {
    (
    len = 80);
  }
  return ["/".repeat(len), "\n", s].join("");
};
////////////////////////////////////////////////////////////////////////////////
//fn: [evalMeta] in file: compiler.ky, line: 509
const evalMeta = function(ast, env) {
  let x = ((Array.isArray(ast)) ?
    ast :
    (keyword_QMRK(ast) ?
      into_BANG("map", [ast, true]) :
      (symbol_QMRK(ast) ?
        into_BANG("map", [keyword(":tag"), ast]) :
        (true ?
          error_BANG("invalid-meta", ast) :
          null))));
  let v = rt.compute(x, env);
  return v;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [stripStd] in file: compiler.ky, line: 524
const stripStd = function(cmd) {
  let lib = [KBSTDLR, "."].join("");
  let nsp = std.peekNSP();
  (cmd = [cmd].join(""));
  return ((cmd.startsWith(lib) && (kirbystdlibref.getProp(nsp, "id") == KBSTDLIB)) ?
    cmd.slice(lib.length) :
    cmd);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [assertArity] in file: compiler.ky, line: 532
const assertArity = function(kond, ast) {
  if ( (!kond) ) {
    error_BANG("invalid-arity", ast);
  } else {
    null;
  }
  return assertInfo(ast);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [assertInfo] in file: compiler.ky, line: 537
const assertInfo = function(ast) {
  return ((false && ast && (!simple_QMRK(ast)) && (!((typeof (ast.line) === "number")))) ?
    error_BANG("no-sourcemap-info", ast) :
    null);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [loadRLib] in file: compiler.ky, line: 545
//Load in all the exported macros from the external lib
const loadRLib = function(info, env) {
  let ast = undefined;
  let s = undefined;
  let GS__25 = info;
  let ns = kirbystdlibref.getProp(GS__25, "ns");
  let macros = kirbystdlibref.getProp(GS__25, "macros");
  let GS__26 = macros;
  let GS__27 = function(v, k) {
    (ast = rt.readAST(v), s = symbol([ns, "/", [ast[1]].join("")].join("")));
    (
    ast[1] = s);
    return rt.compute(ast, env);
  };
  if (kirbystdlibref.object_QMRK(GS__26)) {
    let GS__28 = GS__26;
    Object.keys(GS__28).forEach(function(p) {
      return GS__27(kirbystdlibref.getProp(GS__28, p), p);
    });
  } else {
    GS__26.forEach(GS__27);
  }
  return ns;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [sf-juxt] in file: compiler.ky, line: 559
//Takes a set of functions and returns a fn that is the juxtaposition
//of those fns.  The returned fn takes a variable number of args, and
//returns a vector containing the result of applying each fn to the
//args (left-to-right).
//((juxt a b c) x) => [(a x) (b x) (c x)]
const sf_DASH_juxt = function(ast, env) {
  assertArity((kirbystdlibref.count(ast) >= 2), ast);
  let ret = node_QUOT(ast);
  ret.add(["function () {\n", "let ret=[],", LARGS, "=", ARRSLICE, "(", JSARGS, ");\n"]);
  for (let GS__31 = 0, GS__29 = true, GS__30 = ast.slice(1), ____sz = kirbystdlibref.count(GS__30), ____break = false; (!____break && GS__29 && (GS__31 < ____sz)); ++GS__31) {
    let a_QUOT = GS__30[GS__31];
    let f = [gensym("F__")].join("");
    ret.add(["let ", f, "=", tx_STAR(a_QUOT, env), ";\n", "ret.push(", f, ".apply(this,", LARGS, "));\n"]);
  }
  return ret.add("return ret;\n}");
};
SPEC_DASH_OPS["juxt"] = sf_DASH_juxt;
////////////////////////////////////////////////////////////////////////////////
//fn: [sf-deref] in file: compiler.ky, line: 580
//Returns an atom's current state.
const sf_DASH_deref = function(ast, env) {
  assertArity((kirbystdlibref.count(ast) === 2), ast);
  let ret = node_QUOT(ast);
  return ret.add([tx_STAR(ast[1], env), ".value"]);
};
SPEC_DASH_OPS["deref"] = sf_DASH_deref;
////////////////////////////////////////////////////////////////////////////////
//fn: [sf-compose] in file: compiler.ky, line: 591
//Takes a set of functions and returns a fn that is the composition
//of those fns.  The returned fn takes a variable number of args,
//applies the rightmost of fns to the args, the next
//fn (right-to-left) to the result, etc.
const sf_DASH_compose = function(ast, env) {
  assertArity((kirbystdlibref.count(ast) >= 2), ast);
  let ret = node_QUOT(ast);
  let f = undefined;
  let r = undefined;
  let prev = undefined;
  let end = (ast.length - 1);
  ret.add(["function () {\n"]);
  ret.add(["let ", LARGS, "=", ARRSLICE, "(", JSARGS, ");\n"]);
  for (let ____coll = ast, i = end, ____end = -1, ____break = false; ((!____break) && (i > 0)); i = (i - 1)) {
    let a_QUOT = ____coll[i];
    (f = [gensym("F__")].join(""), r = [gensym("R__")].join(""));
    ret.add(["let ", f, "=", tx_STAR(a_QUOT, env), ";\n"]);
    if ( (i === end) ) {
      ret.add(["let ", r, "=", f, ".apply(this,", LARGS, ");\n"]);
    } else {
      ret.add(["let ", r, "=", f, "(", prev, ");\n"]);
    }
    (prev = r);
  }
  return ret.add(["return ", prev, ";\n", "}"]);
};
SPEC_DASH_OPS["comp"] = sf_DASH_compose;
////////////////////////////////////////////////////////////////////////////////
//fn: [sf-quote] in file: compiler.ky, line: 620
//Returns the unevaluated form
const sf_DASH_quote = function(ast, env) {
  assertArity((kirbystdlibref.count(ast) === 2), ast);
  let ret = node_QUOT(ast);
  return wrap(ret, null, quote_BANG(ast[1], env));
};
SPEC_DASH_OPS["quote"] = sf_DASH_quote;
////////////////////////////////////////////////////////////////////////////////
//fn: [sf-deftype] in file: compiler.ky, line: 628
//Define a JS Class
const sf_DASH_deftype = function(ast, env) {
  assertArity((kirbystdlibref.count(ast) >= 3), ast);
  let pub_QMRK = (![ast[0]].join("").endsWith("-"));
  let mtd = undefined;
  let pos = undefined;
  let n = undefined;
  let m = undefined;
  let cn = undefined;
  let ret = node_QUOT(ast);
  let czname0 = ast[1];
  let czname = tx_STAR(czname0, env);
  let par = ast[2][0];
  let GS__32 = (((typeof (ast[3]) === "string")) ?
    [ast[3], Array.prototype.slice.call(ast, 4)] :
    [null, Array.prototype.slice.call(ast, 3)]);
  let doc = kirbystdlibref.getIndex(GS__32, 0);
  let mtds = kirbystdlibref.getIndex(GS__32, 1);
  env.addVar(czname0, (new Map([["ns", std._STAR_ns_STAR()], ["alias", czname0], ["type", "class"]])));
  ret.add(["class ", czname]);
  if (par) {
    ret.add([" extends ", tx_STAR(par, env)]);
  }
  ret.add(" {\n");
  mtds.forEach(function(m) {
    (mtd = kirbystdlibref.symbol("method"), m1 = m[0], cn = [czname0, ".", m1].join(""), pos = (((typeof (m[1]) === "string")) ?
      3 :
      2));
    [mtd, m].forEach(function() {
      let ____args = Array.prototype.slice.call(arguments);
      return xfi(m1, ____args[0]);
    });
    m.unshift(mtd);
    env.addVar(cn, (new Map([["ns", std._STAR_ns_STAR()], ["alias", cn], ["type", "method"]])));
    return ret.add([sf_DASH_func(m, env, false), "\n"]);
  });
  if (doc) {
    ret.prepend(writeDoc(doc));
  }
  if (pub_QMRK) {
    (kirbystdlibref.assoc_BANG(_STAR_externs_STAR, czname, czname));
  }
  return ret.add("}\n");
};
SPEC_DASH_OPS["deftype"] = sf_DASH_deftype;
SPEC_DASH_OPS["deftype-"] = sf_DASH_deftype;
////////////////////////////////////////////////////////////////////////////////
//fn: [sf-compOp] in file: compiler.ky, line: 674
//Handle comparison operators.
const sf_DASH_compOp = function(ast, env) {
  assertArity(((kirbystdlibref.count(ast) >= 3) && ((!((0 === kirbystdlibref.modulo(kirbystdlibref.count(ast), 2)))))), ast);
  let ret = node_QUOT(ast);
  let end = 0;
  let op = undefined;
  let a0 = ast[0];
  let cmd = [a0].join("");
  if ( (cmd == "not=") ) {
    (
    ast[0] = kirbystdlibref.symbol("!=="));
  } else {
    if ( (cmd == "=") ) {
      (
      ast[0] = kirbystdlibref.symbol("==="));
    } else {
      null;
    }
  }
  (a0 = ast[0], op = [a0].join(""), end = (ast.length - 1));
  for (let ____coll = ast, i = 1, ____end = end, ____break = false; ((!____break) && (i < ____end)); i = (i + 1)) {
    let a_QUOT = ____coll[i];
    if ( (i !== 1) ) {
      ret.add(" && ");
    }
    ret.add([tx_STAR(a_QUOT, env), " ", op, " ", tx_STAR(ast[(i + 1)], env)]);
  }
  return wrap(ret, "(", ")");
};
SPEC_DASH_OPS["not="] = sf_DASH_compOp;
SPEC_DASH_OPS["!="] = sf_DASH_compOp;
SPEC_DASH_OPS["=="] = sf_DASH_compOp;
SPEC_DASH_OPS["="] = sf_DASH_compOp;
SPEC_DASH_OPS[">"] = sf_DASH_compOp;
SPEC_DASH_OPS[">="] = sf_DASH_compOp;
SPEC_DASH_OPS["<"] = sf_DASH_compOp;
SPEC_DASH_OPS["<="] = sf_DASH_compOp;
////////////////////////////////////////////////////////////////////////////////
//fn: [sf-arithOp] in file: compiler.ky, line: 700
//Handles math operators
const sf_DASH_arithOp = function(ast, env) {
  assertArity((kirbystdlibref.count(ast) >= 2), ast);
  let ret = node_QUOT(ast);
  let e1 = [ast[0]].join("");
  let cmd = (function() {
    let C__33;
    switch (e1) {
      case "unsigned-bit-shift-right":
        C__33 = ">>>";
        break;
      case "bit-shift-right":
        C__33 = ">>";
        break;
      case "bit-shift-left":
        C__33 = "<<";
        break;
      case "bit-and":
        C__33 = "&";
        break;
      case "bit-or":
        C__33 = "|";
        break;
      case "bit-not":
        C__33 = "~";
        break;
      case "bit-xor":
        C__33 = "^";
        break;
      case "rem":
        C__33 = "%";
        break;
      case "div":
        C__33 = "/";
        break;
      case "and":
        C__33 = "&&";
        break;
      case "or":
        C__33 = "||";
        break;
      case "exp":
        C__33 = "**";
        break;
      default:
        C__33 = e1;
        break;
    }
    return C__33;
  }).call(this);
  if ( ("mod" == cmd) ) {
    ret.add([KBSTDLR, ".modulo(", tx_STAR(ast[1], env), ",", tx_STAR(ast[2], env), ")"]);
  } else {
    if ( ("~" == cmd) ) {
      ret.add(["~", tx_STAR(ast[1], env)]);
    } else {
      if (true) {
        if ( (("-" == cmd) && (2 === kirbystdlibref.count(ast))) ) {
          ret.add("-1 * ");
        }
        for (let ____coll = ast, i = 1, ____end = kirbystdlibref.count(____coll), ____break = false; ((!____break) && (i < ____end)); i = (i + 1)) {
          let a_QUOT = ____coll[i];
          if ( (kirbystdlibref.count(ast) > 2) ) {
            if ( (i > 1) ) {
              ret.add([" ", cmd, " "]);
            }
          }
          ret.add(tx_STAR(a_QUOT, env));
        }
      }
    }
  }
  return wrap(ret, "(", ")");
};
SPEC_DASH_OPS["bit-shift-left"] = sf_DASH_arithOp;
SPEC_DASH_OPS["bit-shift-right"] = sf_DASH_arithOp;
SPEC_DASH_OPS["unsigned-bit-shift-right"] = sf_DASH_arithOp;
SPEC_DASH_OPS["+"] = sf_DASH_arithOp;
SPEC_DASH_OPS["-"] = sf_DASH_arithOp;
SPEC_DASH_OPS["*"] = sf_DASH_arithOp;
SPEC_DASH_OPS["/"] = sf_DASH_arithOp;
SPEC_DASH_OPS["div"] = sf_DASH_arithOp;
SPEC_DASH_OPS["mod"] = sf_DASH_arithOp;
SPEC_DASH_OPS["or"] = sf_DASH_arithOp;
SPEC_DASH_OPS["and"] = sf_DASH_arithOp;
SPEC_DASH_OPS["exp"] = sf_DASH_arithOp;
SPEC_DASH_OPS["rem"] = sf_DASH_arithOp;
SPEC_DASH_OPS["bit-and"] = sf_DASH_arithOp;
SPEC_DASH_OPS["bit-or"] = sf_DASH_arithOp;
SPEC_DASH_OPS["bit-not"] = sf_DASH_arithOp;
SPEC_DASH_OPS["bit-xor"] = sf_DASH_arithOp;
////////////////////////////////////////////////////////////////////////////////
//fn: [sf-do] in file: compiler.ky, line: 744
//Evaluates the expressions in order and returns the value of the last. If no
//expressions are supplied, returns nil.
const sf_DASH_do = function(ast, env) {
  assertArity(true, ast);
  let ret = node_QUOT(ast);
  let stmtQ = stmt_QMRK(ast);
  ret.add(txDo(exprHint(xfi(ast, ast.slice(1)), (!stmtQ)), env, (!stmtQ)));
  return (stmtQ ?
    wrap(ret, null, "") :
    wrap(ret, "(function() {\n", "}).call(this)"));
};
SPEC_DASH_OPS["do"] = sf_DASH_do;
////////////////////////////////////////////////////////////////////////////////
//fn: [sf-case] in file: compiler.ky, line: 762
//Takes an expression, and a set of clauses.
//Each clause can take the form of either:
//test-constant result-expr
//(test-constant1 ... test-constantN)  result-expr
//The test-constants are not evaluated. They must be compile-time
//literals, and need not be quoted.  If the expression is equal to a
//test-constant, the corresponding result-expr is returned. A single
//default expression can follow the clauses, and its value will be
//returned if no clause matches.
const sf_DASH_case = function(ast, env) {
  assertArity((kirbystdlibref.count(ast) >= 4), ast);
  let stmtQ = stmt_QMRK(ast);
  let ret = node_QUOT(ast);
  let c = undefined;
  let dft = undefined;
  let tst = ast[1];
  let brk = ";\nbreak;\n";
  let gs = [gensym("C__")].join("");
  if (( (!((0 === kirbystdlibref.modulo(kirbystdlibref.count(ast), 2)))) )) {
    (
    dft = pop_BANG(ast)[0]);
  }
  for (let ____coll = ast, i = 2, ____end = kirbystdlibref.count(____coll), ____break = false; ((!____break) && (i < ____end)); i = (i + 2)) {
    let a_QUOT = ____coll[i];
    (
    c = tx_STAR(ast[(i + 1)], env));
    if (pairs_QMRK(a_QUOT)) {
      for (let ____coll = a_QUOT, j = 0, ____end = kirbystdlibref.count(____coll), ____break = false; ((!____break) && (j < ____end)); j = (j + 1)) {
        let j_QUOT = ____coll[j];
        ret.add(["case ", tx_STAR(j_QUOT, env), ":\n"]);
        if ( (j === (a_QUOT.length - 1)) ) {
          ret.add([gs, "=", c, brk]);
        }
      }
    } else {
      ret.add(["case ", tx_STAR(a_QUOT, env), ":\n", gs, "=", c, brk]);
    }
  }
  if (dft) {
    ret.add(["default:\n", gs, "=", tx_STAR(dft, env), brk]);
  }
  wrap(ret, ["switch (", tx_STAR(tst, env), ") {\n"], "}");
  return (stmtQ ?
    wrap(ret, ["let ", gs, ";\n"], "") :
    wrap(ret, ["(function() { let ", gs, ";\n"], ["return ", gs, ";}).call(this)"]));
};
SPEC_DASH_OPS["case"] = sf_DASH_case;
////////////////////////////////////////////////////////////////////////////////
//fn: [sf-var] in file: compiler.ky, line: 808
//Creates a variable with an initial value
const sf_DASH_var = function(ast, env) {
  assertArity(((!((0 === kirbystdlibref.modulo(kirbystdlibref.count(ast), 2))))), ast);
  let rval = undefined;
  let rc = undefined;
  let lhs = undefined;
  let rhs = undefined;
  let x = undefined;
  let ret = node_QUOT(ast);
  let cmd = [ast[0]].join("");
  let keys = (new Map([]));
  let tmp = null;
  let vname = null;
  let pub_QMRK = ((cmd == "def") || (cmd == "const"));
  (cmd = (cmd.startsWith("const") ?
    "const" :
    (((cmd == "var") || (cmd == "vars")) ?
      "let" :
      "var")));
  for (let ____coll = ast, i = 1, ____end = kirbystdlibref.count(____coll), ____break = false; ((!____break) && (i < ____end)); i = (i + 2)) {
    let lhs = ____coll[i];
    (rhs = ast[(i + 1)], rval = tx_STAR(rhs, env));
    if (symbol_QMRK(lhs)) {
      (x = lhs, lhs = tx_STAR(lhs, env));
      if ( (!("let" == cmd)) ) {
        env.addVar([x].join(""), (new Map([["ns", std._STAR_ns_STAR()], ["alias", [x].join("")], ["type", "var"]])));
      } else {
        null;
      }
      (kirbystdlibref.assoc_BANG(keys, lhs, lhs));
      ret.add([cmd, " ", lhs, "=", rval, ";\n"]);
    } else {
      (out = node_QUOT(ast), rhs = destruct_STAR(lhs, out, env));
      ret.add(["let ", tx_STAR(rhs, env), "=", rval, ";\n", out]);
    }
  }
  if (pub_QMRK) {
    let GS__34 = keys;
    let GS__35 = function() {
      let ____args = Array.prototype.slice.call(arguments);
      return (kirbystdlibref.assoc_BANG(_STAR_externs_STAR, ____args[1], ____args[0]));
    };
    if (kirbystdlibref.object_QMRK(GS__34)) {
      let GS__36 = GS__34;
      Object.keys(GS__36).forEach(function(p) {
        return GS__35(kirbystdlibref.getProp(GS__36, p), p);
      });
    } else {
      GS__34.forEach(GS__35);
    }
  }
  return ret;
};
SPEC_DASH_OPS["const-"] = sf_DASH_var;
SPEC_DASH_OPS["const"] = sf_DASH_var;
SPEC_DASH_OPS["def-"] = sf_DASH_var;
SPEC_DASH_OPS["def"] = sf_DASH_var;
SPEC_DASH_OPS["var"] = sf_DASH_var;
SPEC_DASH_OPS["vars"] = sf_DASH_var;
////////////////////////////////////////////////////////////////////////////////
//fn: [sf-inst?] in file: compiler.ky, line: 847
//Evaluates x and tests if it is an instance of the class
//c. Returns true or false.
//(inst? c x)
const sf_DASH_inst_QMRK = function(ast, env) {
  assertArity((kirbystdlibref.count(ast) === 3), ast);
  return wrap(node_QUOT(ast), null, ["(", tx_STAR(ast[2], env), " instanceof ", tx_STAR(ast[1], env), ")"]);
};
SPEC_DASH_OPS["inst?"] = sf_DASH_inst_QMRK;
////////////////////////////////////////////////////////////////////////////////
//fn: [sf-delete] in file: compiler.ky, line: 860
//Delete an object or property of an object.
const sf_DASH_delete = function(ast, env) {
  assertArity(((kirbystdlibref.count(ast) >= 2) && (kirbystdlibref.count(ast) < 4)), ast);
  let ret = node_QUOT(ast);
  ret.add(["delete ", tx_STAR(ast[1], env)]);
  if ( (kirbystdlibref.count(ast) > 2) ) {
    ret.add(["[", tx_STAR(ast[2], env), "]"]);
  }
  return ret;
};
SPEC_DASH_OPS["delete!"] = sf_DASH_delete;
////////////////////////////////////////////////////////////////////////////////
//fn: [sf-dissoc!] in file: compiler.ky, line: 875
//Remove a key from Map.
const sf_DASH_dissoc_BANG = function(ast, env) {
  assertArity((kirbystdlibref.count(ast) === 3), ast);
  let ret = node_QUOT(ast);
  ret.add([stripStd([KBSTDLR, ".", tx_STAR(symbol("dissoc!"), env)].join("")), "(", tx_STAR(ast[1], env), ",", tx_STAR(ast[2], env), ")"]);
  return ret;
};
SPEC_DASH_OPS["dissoc!"] = sf_DASH_dissoc_BANG;
////////////////////////////////////////////////////////////////////////////////
//fn: [sf-new] in file: compiler.ky, line: 891
//The args, if any, are evaluated from left to right,
//and passed to the constructor of the class
//named by Classname. The constructed object is returned.
//e.g.
//(new Error 'a' 3)
const sf_DASH_new = function(ast, env) {
  assertArity((kirbystdlibref.count(ast) >= 2), ast);
  return wrap(node_QUOT(ast), "new ", tx_STAR(xfi(ast, ast.slice(1)), env));
};
SPEC_DASH_OPS["new"] = sf_DASH_new;
////////////////////////////////////////////////////////////////////////////////
//fn: [sf-throw] in file: compiler.ky, line: 905
//Throw an exception
const sf_DASH_throw = function(ast, env) {
  assertArity((kirbystdlibref.count(ast) === 2), ast);
  let ret = node_QUOT(ast);
  let stmtQ = stmt_QMRK(ast);
  ret.add(["throw ", tx_STAR(xfi(ast, ast[1]), env)]);
  if ( (!stmtQ) ) {
    wrap(ret, "(function (){ ", ";}).call(this)");
  } else {
    null;
  }
  return ret;
};
SPEC_DASH_OPS["throw"] = sf_DASH_throw;
////////////////////////////////////////////////////////////////////////////////
//fn: [sf-x-opop] in file: compiler.ky, line: 921
//Unary operator for increment & decrement
const sf_DASH_x_DASH_opop = function(ast, env) {
  assertArity((kirbystdlibref.count(ast) === 2), ast);
  let ret = node_QUOT(ast);
  let cmd = [ast[0]].join("");
  let a2 = tx_STAR(ast[1], env);
  return ret.add((cmd.endsWith("$") ?
    [a2, cmd.slice(0, -1)] :
    [cmd, a2]));
};
SPEC_DASH_OPS["++"] = sf_DASH_x_DASH_opop;
SPEC_DASH_OPS["--"] = sf_DASH_x_DASH_opop;
SPEC_DASH_OPS["++$"] = sf_DASH_x_DASH_opop;
SPEC_DASH_OPS["--$"] = sf_DASH_x_DASH_opop;
////////////////////////////////////////////////////////////////////////////////
//fn: [sf-x-eq] in file: compiler.ky, line: 935
//Compound assignment operators
const sf_DASH_x_DASH_eq = function(ast, env) {
  assertArity((kirbystdlibref.count(ast) === 3), ast);
  let a0 = [ast[0]].join("");
  let cmd = (function() {
    let C__37;
    switch (a0) {
      case "unsigned-bit-shift-right=":
        C__37 = ">>>=";
        break;
      case "bit-shift-right=":
        C__37 = ">>=";
        break;
      case "bit-shift-left=":
        C__37 = "<<=";
        break;
      case "bit-xor=":
        C__37 = "^=";
        break;
      case "bit-or=":
        C__37 = "|=";
        break;
      case "bit-and=":
        C__37 = "&=";
        break;
      case "div=":
        C__37 = "/=";
        break;
      case "rem=":
        C__37 = "%=";
        break;
      case "exp=":
        C__37 = "**=";
        break;
      default:
        C__37 = a0;
        break;
    }
    return C__37;
  }).call(this);
  return wrap(node_QUOT(ast), "(", [tx_STAR(ast[1], env), " ", cmd, " ", tx_STAR(ast[2], env), ")"]);
};
SPEC_DASH_OPS["+="] = sf_DASH_x_DASH_eq;
SPEC_DASH_OPS["-="] = sf_DASH_x_DASH_eq;
SPEC_DASH_OPS["*="] = sf_DASH_x_DASH_eq;
SPEC_DASH_OPS["/="] = sf_DASH_x_DASH_eq;
SPEC_DASH_OPS["div="] = sf_DASH_x_DASH_eq;
SPEC_DASH_OPS["rem="] = sf_DASH_x_DASH_eq;
SPEC_DASH_OPS["exp="] = sf_DASH_x_DASH_eq;
SPEC_DASH_OPS["bit-and="] = sf_DASH_x_DASH_eq;
SPEC_DASH_OPS["bit-or="] = sf_DASH_x_DASH_eq;
SPEC_DASH_OPS["bit-xor="] = sf_DASH_x_DASH_eq;
SPEC_DASH_OPS["bit-shift-left="] = sf_DASH_x_DASH_eq;
SPEC_DASH_OPS["bit-shift-right="] = sf_DASH_x_DASH_eq;
SPEC_DASH_OPS["unsigned-bit-shift-right="] = sf_DASH_x_DASH_eq;
////////////////////////////////////////////////////////////////////////////////
//fn: [sf-assoc!] in file: compiler.ky, line: 968
//Object property assignment or array index setter.
const sf_DASH_assoc_BANG = function(ast, env) {
  assertArity(((0 === kirbystdlibref.modulo(kirbystdlibref.count(ast), 2))), ast);
  let ret = node_QUOT(ast);
  let obj = tx_STAR(ast[1], env);
  for (let ____coll = ast, i = 2, ____end = kirbystdlibref.count(____coll), ____break = false; ((!____break) && (i < ____end)); i = (i + 2)) {
    let a_QUOT = ____coll[i];
    if ( (i > 2) ) {
      ret.add(",");
    }
    ret.add([stripStd([KBSTDLR, ".", tx_STAR(symbol("assoc!"), env)].join("")), "(", obj, ",", tx_STAR(xfi(ast, a_QUOT), env), ",", tx_STAR(xfi(ast, ast[(i + 1)]), env), ")"]);
  }
  return wrap(ret, "(", ")");
};
SPEC_DASH_OPS["assoc!"] = sf_DASH_assoc_BANG;
////////////////////////////////////////////////////////////////////////////////
//fn: [sf-assign!] in file: compiler.ky, line: 984
//Object property assignment or array index setter.
const sf_DASH_assign_BANG = function(ast, env) {
  assertArity(((0 === kirbystdlibref.modulo(kirbystdlibref.count(ast), 2))), ast);
  let ret = node_QUOT(ast);
  let obj = tx_STAR(ast[1], env);
  for (let ____coll = ast, i = 2, ____end = kirbystdlibref.count(____coll), ____break = false; ((!____break) && (i < ____end)); i = (i + 2)) {
    let a_QUOT = ____coll[i];
    if ( (i > 2) ) {
      ret.add(",");
    }
    ret.add([obj, "[", tx_STAR(xfi(ast, a_QUOT), env), "]", "=", tx_STAR(xfi(ast, ast[(i + 1)]), env)]);
  }
  return wrap(ret, "(", ")");
};
SPEC_DASH_OPS["oset!"] = sf_DASH_assign_BANG;
SPEC_DASH_OPS["aset"] = sf_DASH_assign_BANG;
////////////////////////////////////////////////////////////////////////////////
//fn: [sf-set] in file: compiler.ky, line: 998
//Set value(s) to variable(s).
//e.g. (set! a 2 b 4 ...)
const sf_DASH_set = function(ast, env) {
  assertArity(((!((0 === kirbystdlibref.modulo(kirbystdlibref.count(ast), 2))))), ast);
  let ret = node_QUOT(ast);
  for (let ____coll = ast, i = 1, ____end = kirbystdlibref.count(____coll), ____break = false; ((!____break) && (i < ____end)); i = (i + 2)) {
    let a_QUOT = ____coll[i];
    if ( (i > 1) ) {
      ret.add(",");
    }
    ret.add([tx_STAR(a_QUOT, env), "=", tx_STAR(xfi(ast, ast[(i + 1)]), env)]);
  }
  return wrap(ret, "(", ")");
};
SPEC_DASH_OPS["set!"] = sf_DASH_set;
SPEC_DASH_OPS["var-set"] = sf_DASH_set;
////////////////////////////////////////////////////////////////////////////////
//fn: [sf-fn] in file: compiler.ky, line: 1014
//Defines an anonymous function. See defn.
//(fn attrs? [x y] ...)
const sf_DASH_fn = function(ast, env) {
  assertArity((kirbystdlibref.count(ast) >= 2), ast);
  let body = xfi(ast, Array.prototype.slice.call(ast, 2));
  let GS__38 = meta_QMRK__QMRK(ast[1], env);
  let args = kirbystdlibref.getIndex(GS__38, 1);
  if ( (!(Array.isArray(args))) ) {
    error_BANG("invalid-fargs", ast);
  } else {
    null;
  }
  let fargs = doFuncArgs(xfi(ast, args), env);
  return wrap(node_QUOT(ast), null, ["function (", fargs[0], ") {\n", fargs[1], txDo(body, env, true), "}"]);
};
SPEC_DASH_OPS["fn"] = sf_DASH_fn;
////////////////////////////////////////////////////////////////////////////////
//fn: [sf-func] in file: compiler.ky, line: 1034
//Defines a function. Use defn- to indicate privacy (no export).
//(defn name doc-string? attr-map? [params*] ...)
const sf_DASH_func = function(ast, env) {
  assertArity((kirbystdlibref.count(ast) >= 2), ast);
  let pub_QMRK = (![ast[0]].join("").endsWith("-"));
  let mtd_QMRK = ([ast[0]].join("") == "method");
  let fname0 = [ast[1]].join("");
  let fname = [tx_STAR(ast[1], env)].join("");
  let dot_QMRK = contains_QMRK(fname, ".");
  let ret = node_QUOT(ast, tnodeEx(fname));
  let GS__39 = (((typeof (ast[2]) === "string")) ?
    [ast[2], 3] :
    [null, 2]);
  let doc = kirbystdlibref.getIndex(GS__39, 0);
  let pargs = kirbystdlibref.getIndex(GS__39, 1);
  let body = xfi(ast, Array.prototype.slice.call(ast, (pargs + 1)));
  let b1 = body[0];
  let GS__40 = meta_QMRK__QMRK(ast[pargs], env);
  let attrs = kirbystdlibref.getIndex(GS__40, 0);
  let args = kirbystdlibref.getIndex(GS__40, 1);
  if ( (!mtd_QMRK) ) {
    env.addVar(fname0, (new Map([["ns", std._STAR_ns_STAR()], ["alias", fname0], ["type", "fn"]])));
  } else {
    null;
  }
  if ( (!(Array.isArray(args))) ) {
    error_BANG("invalid-fargs", ast);
  } else {
    null;
  }
  let pre = undefined;
  let post = undefined;
  let fargs = doFuncArgs(xfi(ast, args), env);
  (attrs = (attrs || (new Map([]))));
  if (map_QMRK(b1)) {
    for (let ____coll = b1, i = 0, ____end = kirbystdlibref.count(____coll), ____break = false; ((!____break) && (i < ____end)); i = (i + 2)) {
      let e = ____coll[i];
      let e2 = b1[(i + 1)];
      if ( (keyword_QMRK(e) && (Array.isArray(e2))) ) {
        if ( (e == "post") ) {
          (
          post = e2);
        } else {
          if ( (e == "pre") ) {
            (
            pre = e2);
          } else {
            null;
          }
        }
      }
    }
  }
  if (mtd_QMRK) {
    if (attrs.static) {
      ret.add("static ");
    }
    ret.add([fname, " ("]);
    if ( (fname == "constructor") ) {
      conj_BANG(body, kirbystdlibref.symbol("this"));
    }
  } else {
    if (dot_QMRK) {
      ret.add([fname, " = function ("]);
    } else {
      if (true) {
        ret.add(["const ", fname, " = function ("]);
      }
    }
  }
  ret.add([fargs[0], ") {\n", fargs[1]]);
  if ( (pre || post) ) {
    (
    body = body.slice(1));
    ret.add(writeFuncPre(xfi(ast, pre), env));
  }
  ret.add([txDo(body, env, true), "};\n"]);
  if (not_DASH_empty(attrs)) {
    ret.add(fmtSpecOps(fname, attrs));
  }
  if (doc) {
    ret.prepend(writeDoc(doc));
  }
  if ( (pub_QMRK && (!dot_QMRK) && (!mtd_QMRK)) ) {
    (kirbystdlibref.assoc_BANG(_STAR_externs_STAR, fname, fname));
  }
  return ret.prepend(writeFuncInfo(fname0, ast));
};
SPEC_DASH_OPS["defn"] = sf_DASH_func;
SPEC_DASH_OPS["defn-"] = sf_DASH_func;
////////////////////////////////////////////////////////////////////////////////
//fn: [sf-try] in file: compiler.ky, line: 1096
//The exprs are evaluated and, if no exceptions occur, the value of the last
//is returned. If an exception occurs and catch clauses are provided, each is
//examined in turn and the first for which the thrown exception is an instance
//of the named class is considered a matching catch clause. If there is a
//matching catch clause, its exprs are evaluated in a context in which name is
//bound to the thrown exception, and the value of the last is the return value
//of the function. If there is no matching catch clause, the exception
//propagates out of the function. Before returning, normally or abnormally,
//any finally exprs will be evaluated for their side effects.
const sf_DASH_try = function(ast, env) {
  assertArity((kirbystdlibref.count(ast) >= 2), ast);
  let stmtQ = stmt_QMRK(ast);
  let t = undefined;
  let f = undefined;
  let c = undefined;
  let sz = kirbystdlibref.count(ast);
  let ret = node_QUOT(ast);
  (f = last(ast));
  if ( ((Array.isArray(f)) && ([f[0]].join("") == "finally")) ) {
    pop_BANG(ast);
    (
    sz = kirbystdlibref.count(ast));
    xfi(f[0], f);
  } else {
    (
    f = null);
  }
  (c = null);
  if ( (sz > 1) ) {
    (
    c = ast[(sz - 1)]);
  }
  if ( ((Array.isArray(c)) && ([c[0]].join("") == "catch")) ) {
    if ( ((kirbystdlibref.count(c) < 2) || (!symbol_QMRK(c[1]))) ) {
      error_BANG("invalid-catch", ast);
    }
    pop_BANG(ast);
    xfi(c[0], c);
  } else {
    (
    c = null);
  }
  if ( (((f === null)) && ((c === null))) ) {
    error_BANG("invalid-try", ast);
  }
  ret.add(["try {\n", txDo(exprHint(xfi(ast, ast.slice(1)), (!stmtQ)), env), "\n}"]);
  if (c) {
    (
    t = c[1]);
    ret.add([["catch (", tx_STAR(t, env), ") {\n"].join(""), txDo(exprHint(xfi(c, Array.prototype.slice.call(c, 2)), (!stmtQ)), env), ";\n}\n"]);
  }
  if (f) {
    ret.add(["finally {\n", txDo(exprHint(xfi(f, f.slice(1)), false), env, false), ";\n}\n"]);
  }
  if ( (!stmtQ) ) {
    wrap(ret, "(function(){\n", "}).call(this)");
  } else {
    null;
  }
  return ret;
};
SPEC_DASH_OPS["try"] = sf_DASH_try;
////////////////////////////////////////////////////////////////////////////////
//fn: [sf-if] in file: compiler.ky, line: 1153
//Evaluates test. If truthy evaluates 'then' otherwise 'else'.
//(if test then else)
//(if test then)
const sf_DASH_if = function(ast, env) {
  assertArity((kirbystdlibref.count(ast) >= 3), ast);
  let stmtQ = stmt_QMRK(ast);
  let ret = node_QUOT(ast);
  let a1 = exprHint(xfi(ast, ast[1]), true);
  let a2 = exprHint(xfi(ast, ast[2]), (!stmtQ));
  let m_QMRK = (kirbystdlibref.count(ast) > 3);
  let a3 = (m_QMRK ?
    xfi(ast, ast[3]) :
    null);
  let elze = (m_QMRK ?
    exprHint(a3, (!stmtQ)) :
    null);
  (a1 = tx_STAR(a1, env), a2 = tx_STAR(a2, env), elze = tx_STAR(elze, env));
  return wrap(ret, null, (stmtQ ?
    ["if (", a1, ") {\n", a2, ";\n}", (m_QMRK ?
      [" else { \n", elze, ";\n}"] :
      "")] :
    ["(", a1, " ?\n", a2, " :\n", (elze || "null"), ")"]));
};
SPEC_DASH_OPS["if"] = sf_DASH_if;
////////////////////////////////////////////////////////////////////////////////
//fn: [sf-get] in file: compiler.ky, line: 1183
//Returns the named property of an object,
//or value at the index of an array.
//(get obj "age")
//(aget obj 4)
//(nth obj 3)
const sf_DASH_get = function(ast, env) {
  assertArity((kirbystdlibref.count(ast) === 3), ast);
  let a0 = [ast[0]].join("");
  let cmd = stripStd([KBSTDLR, ".getProp"].join(""));
  return ((a0 == "get") ?
    wrap(node_QUOT(ast), null, [cmd, "(", tx_STAR(xfi(ast, ast[1]), env), ",", tx_STAR(xfi(ast, ast[2]), env), ")"]) :
    wrap(node_QUOT(ast), null, [tx_STAR(xfi(ast, ast[1]), env), "[", tx_STAR(xfi(ast, ast[2]), env), "]"]));
};
SPEC_DASH_OPS["oget"] = sf_DASH_get;
SPEC_DASH_OPS["nth"] = sf_DASH_get;
SPEC_DASH_OPS["get"] = sf_DASH_get;
SPEC_DASH_OPS["aget"] = sf_DASH_get;
////////////////////////////////////////////////////////////////////////////////
//fn: [sf-array] in file: compiler.ky, line: 1207
//Creates a new vector containing the args.
//(vec "hello" "world")
//(vec 1 2 3)
//[1 2 3]
//["hello" "world"]
const sf_DASH_array = function(ast, env) {
  assertArity(true, ast);
  let pos = 0;
  let ret = node_QUOT(ast);
  return ((0 === kirbystdlibref.count(ast)) ?
    ret.add("[]") :
    (function() {
      if ( (!vector_QMRK(ast)) ) {
        (
        pos = 1);
      } else {
        null;
      }
      ret.add("[ ");
      for (let ____coll = ast, i = pos, ____end = kirbystdlibref.count(____coll), ____break = false; ((!____break) && (i < ____end)); i = (i + 1)) {
        let a_QUOT = ____coll[i];
        if ( (i > pos) ) {
          ret.add(", ");
        }
        ret.add(tx_STAR(xfi(ast, a_QUOT), env));
      }
      return ret.add(" ]");
    }).call(this));
};
SPEC_DASH_OPS["vec"] = sf_DASH_array;
////////////////////////////////////////////////////////////////////////////////
//fn: [sf-objObj] in file: compiler.ky, line: 1231
//Returns a new object with supplied key-mappings.
//(object "a" 1 "b" 2)
//{:a 1 :b 2}
const sf_DASH_objObj = function(ast, env) {
  assertArity(true, ast);
  let pos = 0;
  let ret = node_QUOT(ast);
  if ( (!obj_QMRK(ast)) ) {
    (
    pos = 1);
  } else {
    null;
  }
  for (let ____coll = ast, i = pos, ____end = kirbystdlibref.count(____coll), ____break = false; ((!____break) && (i < ____end)); i = (i + 2)) {
    let a_QUOT = ____coll[i];
    if ( (i > pos) ) {
      ret.add(", ");
    }
    ret.add([tx_STAR(a_QUOT, env), ": ", tx_STAR(xfi(ast, ast[(i + 1)]), env)]);
  }
  return wrap(ret, "{", "}");
};
SPEC_DASH_OPS["object"] = sf_DASH_objObj;
////////////////////////////////////////////////////////////////////////////////
//fn: [sf-mapObj] in file: compiler.ky, line: 1247
const sf_DASH_mapObj = function(ast, env) {
  assertArity(true, ast);
  let pos = 0;
  let ret = node_QUOT(ast);
  if ( (!map_QMRK(ast)) ) {
    (
    pos = 1);
  } else {
    null;
  }
  for (let ____coll = ast, i = pos, ____end = kirbystdlibref.count(____coll), ____break = false; ((!____break) && (i < ____end)); i = (i + 2)) {
    let a_QUOT = ____coll[i];
    if ( (i > pos) ) {
      ret.add(",");
    }
    ret.add(["[", tx_STAR(a_QUOT, env), ",", tx_STAR(xfi(ast, ast[(i + 1)]), env), "]"]);
  }
  return wrap(ret, "(new Map([", "]))");
};
SPEC_DASH_OPS["hash-map"] = sf_DASH_mapObj;
////////////////////////////////////////////////////////////////////////////////
//fn: [sf-setObj] in file: compiler.ky, line: 1261
//Returns a new Set.
//(set 1 2 3)
const sf_DASH_setObj = function(ast, env) {
  assertArity(true, ast);
  let pos = 0;
  let ret = node_QUOT(ast);
  if ( (!set_QMRK(ast)) ) {
    (
    pos = 1);
  } else {
    null;
  }
  for (let ____coll = ast, i = pos, ____end = kirbystdlibref.count(____coll), ____break = false; ((!____break) && (i < ____end)); i = (i + 1)) {
    let a_QUOT = ____coll[i];
    if ( (i > pos) ) {
      ret.add(", ");
    }
    ret.add(tx_STAR(a_QUOT, env));
  }
  return wrap(ret, "(new Set([", "]))");
};
SPEC_DASH_OPS["hash-set"] = sf_DASH_setObj;
////////////////////////////////////////////////////////////////////////////////
//fn: [require!] in file: compiler.ky, line: 1278
const require_BANG = function(path) {
  return require(path);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [sf-require] in file: compiler.ky, line: 1283
//Loads libs.
//(:require ["z" :rename {hello goodbye}])
//(:require ["a" :as A])
//(:require ["b"]
//["c" :refer [hello world]])
const sf_DASH_require = function(ast, env) {
  assertArity((kirbystdlibref.count(ast) >= 2), ast);
  let rlib = undefined;
  let as = undefined;
  let rpath = undefined;
  let v = undefined;
  let mcs = undefined;
  let nsp = undefined;
  let macros_only = undefined;
  let info = undefined;
  let libpath = undefined;
  let refers = undefined;
  let renames = undefined;
  let ret = node_QUOT(ast);
  let fdir = path.dirname(ast.source);
  for (let ____coll = ast, i = 1, ____end = kirbystdlibref.count(____coll), ____break = false; ((!____break) && (i < ____end)); i = (i + 1)) {
    let e = ____coll[i];
    (as = [gensym("R__")].join(""), macros_only = false, refers = null, renames = null);
    if ( (!((Array.isArray(e)) && ((typeof (e[0]) === "string")))) ) {
      error_BANG("invalid-require", ast);
    } else {
      null;
    }
    (rpath = [e[0]].join(""));
    for (let ____coll = e, j = 1, ____end = kirbystdlibref.count(____coll), ____break = false; ((!____break) && (j < ____end)); j = (j + 1)) {
      let v = ____coll[j];
      if ( (v == "as") ) {
        (
        as = [e[(j + 1)]].join(""));
        ++j;
      } else {
        if ( (v == "only") ) {
          if ( ([e[(j + 1)]].join("") == "macros") ) {
            (
            macros_only = true);
          }
          ++j;
        } else {
          if ( (v == "refer") ) {
            (
            refers = e[(j + 1)]);
            ++j;
          } else {
            if ( (v == "rename") ) {
              (
              renames = e[(j + 1)]);
              ++j;
            } else {
              null;
            }
          }
        }
      }
    }
    if (rpath.includes("./")) {
      (
      libpath = path.resolve(fdir, rpath));
    } else {
      (
      libpath = rpath);
    }
    (libpath = tx_STAR(libpath, env));
    if ( (!macros_only) ) {
      ret.add(["const ", reader.jsid(as), "= require(", tx_STAR(rpath, env), ");\n"]);
    } else {
      null;
    }
    (rlib = require_BANG(unquote_DASH_str(libpath)), info = kirbystdlibref.getProp(rlib, EXPKEY));
    if (info) {
      (mcs = kirbystdlibref.getProp(info, "macros"), nsp = loadRLib(info, env));
    }
    env.addLib([as].join(""), rlib);
    (
    mcs = (mcs || (new Map([]))));
    let r = undefined;
    let t = undefined;
    let rs = undefined;
    let f = undefined;
    let m = undefined;
    for (let ____coll = refers, ____index = 0, ____end = kirbystdlibref.count(____coll), ____break = false; ((!____break) && (____index < ____end)); ____index = (____index + 1)) {
      let r = ____coll[____index];
      (rs = [r].join(""), v = tx_STAR(r, env), f = kirbystdlibref.getProp(rlib, reader.jsid(rs)), m = kirbystdlibref.getProp(mcs, rs));
      if (f) {
        (
        t = typeid(f));
      }
      if (m) {
        (
        t = "marco");
      }
      if ( (!(f || m)) ) {
        throw new Error(["Unknown var ", rs].join(""));
      } else {
        null;
      }
      env.addVar(rs, (new Map([["ns", nsp], ["alias", rs], ["type", t]])));
      ret.add(["const ", v, "=", as, "[\"", v, "\"];\n"]);
    }
    for (let ____coll = renames, i = 0, ____end = kirbystdlibref.count(____coll), ____break = false; ((!____break) && (i < ____end)); i = (i + 2)) {
      let ro = ____coll[i];
      (e = tx_STAR(ro, env), r = renames[(i + 1)], rs = [r].join(""), v = tx_STAR(r, env), f = kirbystdlibref.getProp(rlib, reader.jsid([ro].join(""))), m = kirbystdlibref.getProp(mcs, [ro].join("")));
      if (f) {
        (
        t = typeid(f));
      }
      if (m) {
        (
        t = "marco");
      }
      if ( (!(f || m)) ) {
        throw new Error(["Unknown var ", ro].join(""));
      } else {
        null;
      }
      env.addVar(rs, (new Map([["ns", nsp], ["alias", [ro].join("")], ["type", t]])));
      ret.add(["const ", v, "=", as, "[\"", e, "\"];\n"]);
    }
  }
  return ret;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [sf-ns] in file: compiler.ky, line: 1369
//(ns name doc-string? attr-map? references*)
//Creates a namespace, references can be zero or more of:
//(:require ...)
//(ns ^{:doc "some doc"} hello.world.core ...)
const sf_DASH_ns = function(ast, env) {
  assertArity((kirbystdlibref.count(ast) >= 2), ast);
  let ret = [];
  let doc = null;
  let e = null;
  let mobj = null;
  let pos = 2;
  let GS__41 = meta_QMRK__QMRK(ast[1], env);
  let attrs = kirbystdlibref.getIndex(GS__41, 0);
  let nsp = kirbystdlibref.getIndex(GS__41, 1);
  if ( (!symbol_QMRK(nsp)) ) {
    error_BANG("invalid-namespace", ast);
  } else {
    null;
  }
  if (( (typeof (ast[pos]) === "string") )) {
    (
    attrs = (attrs || (new Map([]))));
    (kirbystdlibref.assoc_BANG(attrs, "doc", ast[pos]));
    ++pos;
  }
  if (map_QMRK(ast[pos])) {
    (mobj = evalMeta(ast[pos], env), attrs = merge(attrs, mobj));
    ++pos;
    (
    nsp["____meta"] = attrs);
  }
  std.pushNSP([nsp].join(""), attrs);
  (
  ast = xfi(ast, Array.prototype.slice.call(ast, pos)));
  for (let GS__44 = 0, GS__42 = true, GS__43 = ast, ____sz = kirbystdlibref.count(GS__43), ____break = false; (!____break && GS__42 && (GS__44 < ____sz)); ++GS__44) {
    let e = GS__43[GS__44];
    if (pairs_QMRK(e)) {
      if ( ([e[0]].join("") == "require") ) {
        conj_BANG(ret, sf_DASH_require(xfi(ast, e), env));
      } else {
        null;
      }
    }
  }
  (nsp = std._STAR_ns_STAR());
  if ( (nsp === [KBPFX, "stdlib"].join("")) ) {
    null;
  } else {
    if (nsp.startsWith(KBPFX)) {
      conj_BANG(ret, ["const ", KBSTDLR, "=std;\n"].join(""));
    } else {
      if (true) {
        conj_BANG(ret, sf_DASH_require(xfi(ast, [kirbystdlibref.symbol("require"), ["kirby", kirbystdlibref.keyword(":as"), kirbystdlibref.symbol("kirbystdlibref")]]), env));
      }
    }
  }
  return conj_BANG(ret, ["const ", std.MODULE_NAMESPACE, "= ", std.quote_DASH_str(nsp), ";\n"].join(""));
};
SPEC_DASH_OPS["ns"] = sf_DASH_ns;
////////////////////////////////////////////////////////////////////////////////
//fn: [sf-comment] in file: compiler.ky, line: 1421
const sf_DASH_comment = function(ast, env) {
  return "";
};
SPEC_DASH_OPS["comment"] = sf_DASH_comment;
////////////////////////////////////////////////////////////////////////////////
//fn: [sf-while] in file: compiler.ky, line: 1424
//Generates native (js) for loop.
const sf_DASH_while = function(ast, env) {
  assertArity((kirbystdlibref.count(ast) >= 2), ast);
  let stmtQ = stmt_QMRK(ast);
  let ret = node_QUOT(ast);
  let body = exprHint(xfi(ast, Array.prototype.slice.call(ast, 2)), false);
  return ((0 === kirbystdlibref.count(body)) ?
    ret :
    sf_DASH_wloop(ret, ast[1], body, env, stmtQ));
};
SPEC_DASH_OPS["while"] = sf_DASH_while;
////////////////////////////////////////////////////////////////////////////////
//fn: [sf-wloop] in file: compiler.ky, line: 1441
//For loop implementation
const sf_DASH_wloop = function(ret, tst, body, env, stmtQ) {
  ret.add("for (let ____break=false; ");
  (
  nb = [kirbystdlibref.symbol("not"), kirbystdlibref.symbol("____break")]);
  xfi(ret, nb);
  (
  tst = [kirbystdlibref.symbol("and"), nb, tst]);
  xfi(ret, tst);
  ret.add([tx_STAR(tst, env), ";"]);
  ret.add(["){\n", txDo(body, env, false), "}\n"]);
  if ( (!stmtQ) ) {
    wrap(ret, "(function() {\n", "; return null; }).call(this)");
  } else {
    null;
  }
  return ret;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [sf-for] in file: compiler.ky, line: 1456
//Generates native (js) for loop.
//(for* [initial-vars :while test :recur update-vars] ...)
const sf_DASH_for = function(ast, env) {
  assertArity((kirbystdlibref.count(ast) >= 2), ast);
  let stmtQ = stmt_QMRK(ast);
  let ret = node_QUOT(ast);
  let body = exprHint(xfi(ast, Array.prototype.slice.call(ast, 2)), false);
  return ((0 === kirbystdlibref.count(body)) ?
    ret :
    sf_DASH_floop(ret, xfi(ast, ast[1]), body, env, stmtQ));
};
SPEC_DASH_OPS["for*"] = sf_DASH_for;
////////////////////////////////////////////////////////////////////////////////
//fn: [sf-floop] in file: compiler.ky, line: 1475
//For loop implementation
const sf_DASH_floop = function(ret, args, body, env, stmtQ) {
  let vars = [];
  let recurs = [];
  let tst = undefined;
  let nb = undefined;
  for (let ____coll = args, i = 0, ____end = kirbystdlibref.count(____coll), ____break = false; ((!____break) && (i < ____end)); i = (i + 1)) {
    let e = ____coll[i];
    if ( (e == "while") ) {
      (
      tst = args[(i + 1)]);
      ++i;
    } else {
      if ( (e == "recur") ) {
        (
        recurs = Array.prototype.slice.call(args, (i + 1)));
        (
        ____break = true);
      } else {
        if (symbol_QMRK(e)) {
          conj_BANG(vars, e, args[(i + 1)]);
          ++i;
        } else {
          null;
        }
      }
    }
  }
  ret.add("for (");
  for (let ____coll = vars, i = 0, ____end = kirbystdlibref.count(____coll), ____break = false; ((!____break) && (i < ____end)); i = (i + 2)) {
    let v = ____coll[i];
    if ( (i === 0) ) {
      ret.add("let ");
    }
    if ( (i !== 0) ) {
      ret.add(",");
    }
    ret.add([tx_STAR(v, env), "=", [tx_STAR(vars[(i + 1)], env)].join("")]);
  }
  ret.add(((0 === kirbystdlibref.count(vars)) ?
    ["let ", BREAK, "=false;"].join("") :
    [",", BREAK, "=false;"].join("")));
  (
  nb = [kirbystdlibref.symbol("not"), kirbystdlibref.symbol("____break")]);
  xfi(ret, nb);
  if (tst) {
    (
    tst = [kirbystdlibref.symbol("and"), nb, tst]);
  } else {
    (
    tst = nb);
  }
  xfi(ret, tst);
  ret.add([[tx_STAR(tst, env)].join(""), "; "]);
  for (let ____coll = recurs, i = 0, k = 0, ____end = kirbystdlibref.count(____coll), ____break = false; ((!____break) && (i < ____end)); i = (i + 1), k = (k + 2)) {
    let r_QUOT = ____coll[i];
    if ( (i !== 0) ) {
      ret.add(",");
    }
    ret.add([tx_STAR(vars[k], env), "=", [tx_STAR(r_QUOT, env)].join("")]);
  }
  ret.add(["){\n", txDo(body, env, false), "}\n"]);
  if ( (!stmtQ) ) {
    wrap(ret, "(function() {\n", "; return null; }).call(this)");
  } else {
    null;
  }
  return ret;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [sf-forxxx] in file: compiler.ky, line: 1513
//Generates native (js) for loop.
const sf_DASH_forxxx = function(ast, env) {
  assertArity((kirbystdlibref.count(ast) >= 2), ast);
  let stmtQ = stmt_QMRK(ast);
  let ret = node_QUOT(ast);
  let body = exprHint(xfi(ast, Array.prototype.slice.call(ast, 2)), false);
  return ((0 === kirbystdlibref.count(body)) ?
    ret :
    sf_DASH_foop(ret, [ast[0]].join(""), xfi(ast, ast[1]), body, env, stmtQ));
};
SPEC_DASH_OPS["floop"] = sf_DASH_forxxx;
SPEC_DASH_OPS["rloop"] = sf_DASH_forxxx;
////////////////////////////////////////////////////////////////////////////////
//fn: [sf-foop] in file: compiler.ky, line: 1529
//For loop implementation
const sf_DASH_foop = function(ret, cmd, args, body, env, stmtQ) {
  let vars = [kirbystdlibref.symbol("____coll"), null, kirbystdlibref.symbol("____index"), 0];
  let recurs = [];
  let incr_QMRK = (cmd == "floop");
  let decr_QMRK = (cmd == "rloop");
  let indexer = undefined;
  let tst = undefined;
  let nb = undefined;
  let sz = undefined;
  let begin = 0;
  let lvar = undefined;
  let coll = undefined;
  let start = undefined;
  let end = undefined;
  let step = undefined;
  if (symbol_QMRK(args[0])) {
    (begin = 2, lvar = args[0], coll = args[1]);
    (
    vars = [kirbystdlibref.symbol("____coll"), coll, kirbystdlibref.symbol("____index"), 0]);
  }
  for (let ____coll = args, i = begin, ____end = kirbystdlibref.count(____coll), ____break = false; ((!____break) && (i < ____end)); i = (i + 2)) {
    let e = ____coll[i];
    if ( (e == "while") ) {
      (
      tst = args[(i + 1)]);
    } else {
      if ( (e == "index") ) {
        (
        vars[2] = args[(i + 1)]);
      } else {
        if ( (e == "recur") ) {
          (
          recurs = args[(i + 1)]);
        } else {
          if ( (e == "start") ) {
            (
            start = args[(i + 1)]);
          } else {
            if ( (e == "end") ) {
              (
              end = args[(i + 1)]);
            } else {
              if ( (e == "step") ) {
                (
                step = args[(i + 1)]);
              } else {
                if (symbol_QMRK(e)) {
                  conj_BANG(vars, e, args[(i + 1)]);
                } else {
                  null;
                }
              }
            }
          }
        }
      }
    }
  }
  (indexer = vars[2]);
  if (( (typeof (start) === "undefined") )) {
    if (incr_QMRK) {
      (
      start = 0);
    }
    if (decr_QMRK) {
      (
      start = [kirbystdlibref.symbol("-"), [kirbystdlibref.symbol("n#"), kirbystdlibref.symbol("_coll")], 1]);
    }
  }
  (vars[3] = start);
  if (( (typeof (end) === "undefined") )) {
    (
    end = (decr_QMRK ?
      -1 :
      (incr_QMRK ?
        [kirbystdlibref.symbol("n#"), kirbystdlibref.symbol("____coll")] :
        null)));
  }
  conj_BANG(vars, kirbystdlibref.symbol("____end"), end);
  if (( (typeof (tst) === "undefined") )) {
    if (incr_QMRK) {
      (
      tst = [kirbystdlibref.symbol("<"), indexer, kirbystdlibref.symbol("____end")]);
    }
    if (decr_QMRK) {
      (
      tst = [kirbystdlibref.symbol(">"), indexer, kirbystdlibref.symbol("____end")]);
    }
  }
  ret.add("for (");
  for (let ____coll = vars, i = 0, ____end = kirbystdlibref.count(____coll), ____break = false; ((!____break) && (i < ____end)); i = (i + 2)) {
    let e = ____coll[i];
    if ( (i === 0) ) {
      ret.add("let ");
    }
    if ( (i !== 0) ) {
      ret.add(",");
    }
    ret.add([tx_STAR(e, env), "=", tx_STAR(vars[(i + 1)], env)]);
  }
  ret.add([",", BREAK, "=false;"].join(""));
  (
  nb = [kirbystdlibref.symbol("not"), kirbystdlibref.symbol("____break")]);
  xfi(ret, nb);
  if (( (typeof (tst) !== "undefined") )) {
    (
    tst = [kirbystdlibref.symbol("and"), nb, tst]);
  } else {
    (
    tst = nb);
  }
  xfi(ret, tst);
  ret.add([tx_STAR(tst, env), "; "]);
  if (( (typeof (step) === "undefined") )) {
    (
    step = 1);
  }
  if (incr_QMRK) {
    recurs.unshift([kirbystdlibref.symbol("+"), indexer, step]);
  }
  if (decr_QMRK) {
    recurs.unshift([kirbystdlibref.symbol("-"), indexer, step]);
  }
  for (let ____coll = recurs, i = 0, k = 2, ____end = kirbystdlibref.count(____coll), ____break = false; ((!____break) && (i < ____end)); i = (i + 1), k = (k + 2)) {
    let e = ____coll[i];
    if ( (i !== 0) ) {
      ret.add(",");
    }
    ret.add([tx_STAR(vars[k], env), "=", tx_STAR(e, env)]);
  }
  ret.add(["){\n", (((typeof (lvar) !== "undefined")) ?
    sf_DASH_var(xfi(args, [kirbystdlibref.symbol("vars"), lvar, [kirbystdlibref.symbol("nth"), kirbystdlibref.symbol("____coll"), indexer]]), env) :
    ""), txDo(body, env, false), "}\n"]);
  if ( (!stmtQ) ) {
    wrap(ret, "(function() {\n", "; return null; }).call(this)");
  } else {
    null;
  }
  return ret;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [sf-jscode] in file: compiler.ky, line: 1600
//Inject raw native (js) code fragment.
//(raw# "console.log('hi');")
const sf_DASH_jscode = function(ast, env) {
  assertArity((kirbystdlibref.count(ast) >= 2), ast);
  let s = [ast[1]].join("");
  let name = reader.jsid("sf-jscode");
  return node_QUOT(ast, tnodeEx(name, ((s.endsWith("\"") && s.startsWith("\"")) ?
    s.slice(1, -1) :
    s)));
};
SPEC_DASH_OPS["raw#"] = sf_DASH_jscode;
SPEC_DASH_OPS["js#"] = sf_DASH_jscode;
////////////////////////////////////////////////////////////////////////////////
//fn: [sf-macro] in file: compiler.ky, line: 1617
//Like defn, but the resulting function name is declared as a
//macro and will be used as a macro by the compiler when it is
//called.
//(defmacro macro-name [args] ...)
const sf_DASH_macro = function(ast, env) {
  assertArity((kirbystdlibref.count(ast) >= 4), ast);
  let pms = [];
  let args = ast[2];
  let body = Array.prototype.slice.call(ast, 3);
  let mname = undefined;
  let mobj = undefined;
  let doc = undefined;
  let x = undefined;
  let ev = undefined;
  if (( (typeof (args) === "string") )) {
    (doc = args, args = ast[3], body = Array.prototype.slice.call(ast, 4));
  }
  (x = meta_QMRK__QMRK(args, env));
  (
  args = last(x));
  (
  mobj = x[0]);
  for (let ____coll = args, i = 0, ____end = kirbystdlibref.count(____coll), ____break = false; ((!____break) && (i < ____end)); i = (i + 1)) {
    let e = ____coll[i];
    (
    ev = [e].join(""));
    if ( (ev == "&") ) {
      if ( (Array.isArray(args[(i + 1)])) ) {
        (
        e = args[(i + 1)]);
        ++i;
        for (let GS__47 = 0, GS__45 = true, GS__46 = e, ____sz = kirbystdlibref.count(GS__46), ____break = false; (!____break && GS__45 && (GS__47 < ____sz)); ++GS__47) {
          let x = GS__46[GS__47];
          if ( (!symbol_QMRK(x)) ) {
            error_BANG("syntax-error", ast);
          } else {
            null;
          }
          conj_BANG(pms, x);
        }
      } else {
        conj_BANG(pms, e, args[(i + 1)]);
        ++i;
      }
    } else {
      if ( (!symbol_QMRK(e)) ) {
        error_BANG("syntax-error", ast);
      } else {
        if (true) {
          conj_BANG(pms, e);
        }
      }
    }
  }
  (mname = ast[1], ast = [kirbystdlibref.symbol("macro*"), mname, pms, body[0]]);
  env.addVar(mname, (new Map([["ns", std._STAR_ns_STAR()], ["alias", null], ["type", "macro"]])));
  if ( (!(mobj && ((kirbystdlibref.getProp(mobj, "private") === true)))) ) {
    (kirbystdlibref.assoc_BANG(_STAR_macros_STAR, mname, std.prn(ast, true)));
  } else {
    null;
  }
  rt.compute(ast, env);
  return "";
};
SPEC_DASH_OPS["defmacro"] = sf_DASH_macro;
////////////////////////////////////////////////////////////////////////////////
//fn: [sf-unary] in file: compiler.ky, line: 1669
//Special unary operators.
const sf_DASH_unary = function(ast, env) {
  assertArity((kirbystdlibref.count(ast) === 2), ast);
  let GS__48 = ast;
  let a0 = kirbystdlibref.getIndex(GS__48, 0);
  let a1 = kirbystdlibref.getIndex(GS__48, 1);
  let ret = node_QUOT(ast);
  if ( (a0 == "not") ) {
    (
    a0 = kirbystdlibref.symbol("!"));
  }
  return ret.add(["(", [tx_STAR(a0, env)].join(""), [tx_STAR(a1, env)].join(""), ")"]);
};
SPEC_DASH_OPS["not"] = sf_DASH_unary;
SPEC_DASH_OPS["!"] = sf_DASH_unary;
////////////////////////////////////////////////////////////////////////////////
//fn: [sf-listc] in file: compiler.ky, line: 1682
//List comprehension. Takes a vector of one or more
//binding-form/collection-expr pairs, each followed by zero or more
//modifiers, and yields a lazy sequence of evaluations of expr.
//Collections are iterated in a nested fashion, rightmost fastest,
//and nested coll-exprs can refer to bindings created in prior
//binding-forms.  Supported modifiers are: :let [binding-form expr ...],
//:while test, :when test.
const sf_DASH_listc = function(ast, env) {
  let stmtQ = stmt_QMRK(ast);
  let ret = node_QUOT(ast);
  let cap = gensym();
  let r = sf_DASH_doseq(exprHint(ast, false), env, cap);
  ret.add(["(function() {\n"]);
  ret.add(["let ", [cap].join(""), "=[];\n"]);
  ret.add(r);
  return ret.add(["return ", [cap].join(""), ";\n}).call(this)"]);
};
SPEC_DASH_OPS["for"] = sf_DASH_listc;
////////////////////////////////////////////////////////////////////////////////
//fn: [sf-doseq] in file: compiler.ky, line: 1705
//Repeatedly executes body (presumably for side-effects) with
//bindings and filtering as provided by "for".  Does not retain
//the head of the sequence. Returns nil.
const sf_DASH_doseq = function(ast, env) {
  let GS__49 = Array.prototype.slice.call(arguments, 2);
  let capRes = kirbystdlibref.getIndex(GS__49, 0);
  let body = exprHint(xfi(ast, Array.prototype.slice.call(ast, 2)), false);
  let kount = stripStd([KBSTDLR, ".count"].join(""));
  let args = ast[1];
  let _ = (((0 === kirbystdlibref.modulo(kirbystdlibref.count(args), 2))) ?
    true :
    (function() {
      throw new Error("bindings not even");
    }).call(this));
  let stmtQ = stmt_QMRK(ast);
  let inner = "";
  let ret = undefined;
  let fst = true;
  let while_QUOT = gensym();
  let GS__50 = split_DASH_with(function() {
    let ____args = Array.prototype.slice.call(arguments);
    return (!keyword_QMRK(____args[0]));
  }, args);
  let x = kirbystdlibref.getIndex(GS__50, 0);
  let y = kirbystdlibref.getIndex(GS__50, 1);
  let arr = rseq(partition(2, x));
  (function() {
    let _x_ = null;
    let recur = null;
    let _f_ = function(p1, pn) {
      return (p1 ?
        (function() {
          let e_QUOT = gensym();
          let n_QUOT = gensym();
          (ret = node_QUOT(ast));
          ret.add(["for(let ", [n_QUOT].join(""), "=0,", ((0 === kirbystdlibref.count(pn)) ?
            [[while_QUOT].join(""), "=true,"].join("") :
            ""), [e_QUOT].join(""), "=", tx_STAR(p1[1], env), ",", "____sz=", kount, "(", [e_QUOT].join(""), ")", (fst ?
            ",____break=false" :
            ""), "; (", (fst ?
            "!____break && " :
            ""), [while_QUOT].join(""), " && ", "(", [n_QUOT].join(""), " < ____sz)", "); ++", [n_QUOT].join(""), "){\n"]);
          ret.add(sf_DASH_var(xfi(ast, [kirbystdlibref.symbol("vars"), p1[0], [kirbystdlibref.symbol("nth"), e_QUOT, n_QUOT]]), env));
          if (fst) {
            (
            fst = false);
            doseq_DASH_binds(while_QUOT, ret, y, body, ast, env, capRes);
          } else {
            ret.add(inner);
          }
          ret.add("}\n");
          (
          inner = ret);
          return (not_DASH_empty(pn) ?
            recur(pn[0], pn.slice(1)) :
            null);
        }).call(this) :
        null);
    };
    let _r_ = _f_;
    (recur = function() {
      (
      _x_ = arguments);
      if (_r_) {
        for (_r_ = undefined; _r_ === undefined;) {
          _r_ = _f_.apply(this, _x_);
        }
        return _r_;
      }
      return undefined;
    });
    return recur(arr[0], arr.slice(1));
  })(this);
  if ( (!stmtQ) ) {
    wrap(ret, "(function() {\n", "; return null; }).call(this)");
  } else {
    null;
  }
  return ret;
};
SPEC_DASH_OPS["doseq"] = sf_DASH_doseq;
////////////////////////////////////////////////////////////////////////////////
//fn: [doseq-binds] in file: compiler.ky, line: 1758
const doseq_DASH_binds = function(while_QUOT, ret, y, body, ast, env, capRes) {
  let patch = node_QUOT(ast);
  partition(2, y).forEach(function(GS__51) {
    let k = kirbystdlibref.getIndex(GS__51, 0);
    let expr = kirbystdlibref.getIndex(GS__51, 1);
    return ((k == "let") ?
      ret.add(sf_DASH_var(xfi(ast, cons(kirbystdlibref.symbol("vars"), expr)))) :
      ((k == "when") ?
        (function() {
          ret.add(["if (", tx_STAR(expr, env), ") {\n"]);
          return patch.add("}\n");
        }).call(this) :
        ((k == "while") ?
          (function() {
            ret.add(["if (!(", tx_STAR(expr, env), ")) { ", [while_QUOT].join(""), "=false; ____break=true; } else {\n"]);
            return patch.add("}\n");
          }).call(this) :
          null)));
  });
  if (capRes) {
    exprHint(body, true);
  }
  if (capRes) {
    ret.add([[capRes].join(""), ".push((function() {\n", txDo(body, env, true), "\n}).call(this));\n"]);
  } else {
    ret.add(txDo(body, env, false));
  }
  return ret.add(patch);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [getPrePost] in file: compiler.ky, line: 1780
const getPrePost = function(obj) {
  let ret = null;
  if (map_QMRK(obj)) {
    for (let ____coll = obj, i = 0, ____end = kirbystdlibref.count(____coll), ____break = false; ((!____break) && (i < ____end)); i = (i + 2)) {
      let e = ____coll[i];
      let e2 = obj[(i + 1)];
      if ( (keyword_QMRK(e) && (Array.isArray(e2))) ) {
        if ( (e == "post") ) {
          (
          ret = merge(ret, (new Map([["post", e2]]))));
        } else {
          if ( (e == "pre") ) {
            (
            ret = merge(ret, (new Map([["pre", e2]]))));
          } else {
            null;
          }
        }
      }
    }
  }
  return ret;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [xfi] in file: compiler.ky, line: 1794
//Transfer source map info
const xfi = function(from, to) {
  return ((from && to) ?
    (function() {
      let tline = to.line;
      let fline = from.line;
      if ( ((!((typeof (tline) === "number"))) && ((typeof (fline) === "number"))) ) {
        (to["source"] = from.source, to["line"] = from.line, to["column"] = from.column);
      }
      return to;
    }).call(this) :
    (true ?
      to :
      null));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [spitMacros] in file: compiler.ky, line: 1808
const spitMacros = function() {
  return ((0 === kirbystdlibref.count(_STAR_macros_STAR)) ?
    "" :
    std.wrap_DASH_str(seq(_STAR_macros_STAR).map(function(GS__52) {
      let k = kirbystdlibref.getIndex(GS__52, 0);
      let v = kirbystdlibref.getIndex(GS__52, 1);
      return [quote_DASH_str([k].join("")), ":", quote_DASH_str(v)].join("");
    }).join(",\n"), "const ____macros = {\n", "};\n"));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [spitExterns] in file: compiler.ky, line: 1818
//Write out export info
const spitExterns = function() {
  let mc = ((0 === kirbystdlibref.count(_STAR_macros_STAR)) ?
    "{}" :
    "____macros");
  let s2 = "";
  let s1 = [EXPKEY, ": { ns: ", quote_DASH_str(std._STAR_ns_STAR()), ", macros: ", mc, " }"].join("");
  if (not_DASH_empty(_STAR_externs_STAR)) {
    (
    s2 = [",\n", seq(_STAR_externs_STAR).map(function(GS__53) {
      let k = kirbystdlibref.getIndex(GS__53, 0);
      let v = kirbystdlibref.getIndex(GS__53, 1);
      return [k, ":", v].join("");
    }).join(",\n")].join(""));
  }
  return ["\n\nmodule.exports = {\n", s1, s2, "\n};\n"].join("");
};
////////////////////////////////////////////////////////////////////////////////
//fn: [banner] in file: compiler.ky, line: 1835
//Banner text for the target file
const banner = function() {
  let GS__54 = std.peekNSP();
  let id = kirbystdlibref.getProp(GS__54, "id");
  let meta = kirbystdlibref.getProp(GS__54, "meta");
  return ["/*", "Auto generated by Kirby v", MOD_DASH_VER, " - ", new Date(), "\n", "  ", id, "\n", (meta ?
    std.prn(meta, true) :
    ""), "\n", "*/\n\n"].join("");
};
////////////////////////////////////////////////////////////////////////////////
//fn: [cleanCode] in file: compiler.ky, line: 1843
const cleanCode = function(code) {
  let tmp = null;
  let arr = [];
  code.split("\n").forEach(function() {
    let ____args = Array.prototype.slice.call(arguments);
    return (function() {
      let tmp = ____args[0].trim();
      return ((not_DASH_empty(tmp) && (tmp !== ";")) ?
        conj_BANG(arr, ____args[0]) :
        null);
    }).call(this);
  });
  return arr.join("\n");
};
////////////////////////////////////////////////////////////////////////////////
//fn: [transpile*] in file: compiler.ky, line: 1851
//Compiles a source file, returning the translated source and
//possible error object.
const transpile_STAR = function(source, fname, options) {
  let GS__55 = options;
  let source_DASH_map = kirbystdlibref.getProp(GS__55, "source-map");
  let no_DASH_format = kirbystdlibref.getProp(GS__55, "no-format");
  let verbose = kirbystdlibref.getProp(GS__55, "verbose");
  let ast = reader.parse(source, fname);
  let env = rt.genv();
  let ret = txTree(ast, env);
  let fbase = path.basename(fname, ".ky");
  let macros = spitMacros();
  let extra = spitExterns();
  let fopts = (new Map([]));
  let err = null;
  let cstr = (source_DASH_map ?
    (function() {
      let fmap = [fbase, ".js"].join("");
      let smap = [fbase, ".map"].join("");
      let sout = ret.toStringWithSourceMap({
        "skipValidation": true,
        "file": fmap
      });
      fs.writeFileSync(smap, sout.map);
      return [sout.code, macros, extra, "\n//# sourceMappingURL=", path.relative(path.dirname(fname), smap)].join("");
    }).call(this) :
    [ret, macros, extra].join(""));
  try {
    if ( (!no_DASH_format) ) {
      (
      cstr = esfmt.format(cstr, fopts));
    } else {
      null;
    }
  } catch (e) {
    (
    err = e);
  }
  (cstr = cleanCode(cstr));
  let mcs = Array.from(_STAR_macros_STAR.keys());
  let lbs = Array.from(kirbystdlibref.getProp(env, "libs").keys());
  let vas = Array.from(kirbystdlibref.getProp(env, "vars").keys());
  if (verbose) {
    println("<macros>\n", std.prn(mcs, true));
    println("<libs>\n", std.prn(lbs, true));
    println("<vars>\n", std.prn(difference(vas, mcs), true));
  }
  return [((0 === kirbystdlibref.count(cstr)) ?
    "" :
    [banner(), cstr].join("")), err];
};
////////////////////////////////////////////////////////////////////////////////
//fn: [transpile] in file: compiler.ky, line: 1898
//Compile kirby file to target source
const transpile = function(code, file) {
  let GS__56 = Array.prototype.slice.call(arguments, 2);
  let options = kirbystdlibref.getIndex(GS__56, 0);
  (_STAR_externs_STAR = (new Map([])), _STAR_macros_STAR = (new Map([])), _STAR_last_DASH_line_STAR = 0, _STAR_last_DASH_col_STAR = 0);
  return (function() {
    try {
      return transpile_STAR(code, file, opt_QMRK__QMRK(options, {}));
    } catch (e) {
      return println("Error near line: ", _STAR_last_DASH_line_STAR, ", col: ", _STAR_last_DASH_col_STAR, "\n", [e].join(""));
    }
  }).call(this);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [dbgAST] in file: compiler.ky, line: 1912
//Dump AST to xml
const dbgAST = function(source, fname) {
  return reader.dumpTree(reader.parse(source, fname), fname);
};
const version = MOD_DASH_VER;
module.exports = {
  da57bc0172fb42438a11e6e8778f36fb: {
    ns: "czlab.kirby.compiler",
    macros: {}
  },
  tnodeEx: tnodeEx,
  tnode: tnode,
  sf_DASH_juxt: sf_DASH_juxt,
  transpile: transpile,
  dbgAST: dbgAST,
  version: version
};