/*Auto generated by Kirby v1.0.0 - Sun Jan 21 2018 16:59:17 GMT-0800 (PST)
  czlab.kirby.kernel
({"doc":"","author":"Kenneth Leung"})
*/

const LARG = /^%([1-9][0-9]+)?([1-9])?$/;
const KWORD = /^::?[^:]+$/;
//Defining a lambda positional argument
class LambdaArg {
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [constructor] in file: kernel.ky, line: 22
  constructor(arg) {
    this["value"] = "";
    if ( (!LARG.test(arg)) ) {
      throw new Error(["bad lambda-arg ", arg].join(""));
    } else {
      null;
    }
    this.value = arg;
    return this;
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [toString] in file: kernel.ky, line: 26
  toString() {
    return this.value;
  }
}
//Defining a primitive data type
class Primitive {
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [constructor] in file: kernel.ky, line: 31
  constructor(v) {
    this["value"] = null;
    this.value = v;
    return this;
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [toString] in file: kernel.ky, line: 33
  toString() {
    return this.value;
  }
}
//Defining a keyword
class Keyword {
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [constructor] in file: kernel.ky, line: 38
  constructor(name) {
    this["value"] = "";
    if ( (!KWORD.test(name)) ) {
      throw new Error(["bad keyword: ", name].join(""));
    } else {
      null;
    }
    this.value = name;
    return this;
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [toString] in file: kernel.ky, line: 42
  toString() {
    return (this.value.startsWith("::") ?
      [peekNSP().id, "/", this.value.slice(2)].join("") :
      (this.value.startsWith(":") ?
        this.value.slice(1) :
        null));
  }
}
//Defining a symbol
class Symbol {
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [constructor] in file: kernel.ky, line: 52
  constructor(name) {
    this["value"] = "";
    this.value = name;
    return this;
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [toString] in file: kernel.ky, line: 54
  toString() {
    return this.value;
  }
}
////////////////////////////////////////////////////////////////////////////////
//fn: [primitive?] in file: kernel.ky, line: 57
//Returns true if primitive
const primitive_QUERY = function(obj) {
  return (obj instanceof Primitive);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [primitive] in file: kernel.ky, line: 61
//Create a Primitive
const primitive = function(v) {
  return new Primitive(v);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [symbol?] in file: kernel.ky, line: 65
//Returns true if a symbol
const symbol_QUERY = function(obj) {
  return (obj instanceof Symbol);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [symbol] in file: kernel.ky, line: 69
//Create a new Symbol
const symbol = function(name) {
  return new Symbol(name);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [keyword?] in file: kernel.ky, line: 73
//Returns true if a keyword
const keyword_QUERY = function(obj) {
  return (obj instanceof Keyword);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [keyword] in file: kernel.ky, line: 77
//Create a new Keyword
const keyword = function(name) {
  return new Keyword(name);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [keyword->symbol] in file: kernel.ky, line: 81
//Convert a Keyword to Symbol
const keyword_DASH__GT_symbol = function(k) {
  let s = new Symbol([k].join(""));
  (s["source"] = k.source, s["line"] = k.line, s["column"] = k.column);
  return s;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [lambda-arg?] in file: kernel.ky, line: 90
//Returns true if a Lambda Arg
const lambda_DASH_arg_QUERY = function(obj) {
  return (obj instanceof LambdaArg);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [lambda-arg] in file: kernel.ky, line: 94
//Create a new Lambda Arg
const lambda_DASH_arg = function(name) {
  return new LambdaArg(name);
};
const _STAR_nsp_DASH_cache_STAR = [{
  "id": "user",
  "meta": null
}];
////////////////////////////////////////////////////////////////////////////////
//fn: [pushNSP] in file: kernel.ky, line: 101
const pushNSP = function(nsp) {
  let info = Array.prototype.slice.call(arguments, 1);
  return _STAR_nsp_DASH_cache_STAR.unshift({
    "id": nsp,
    "meta": info
  });
};
////////////////////////////////////////////////////////////////////////////////
//fn: [popNSP] in file: kernel.ky, line: 105
const popNSP = function() {
  return _STAR_nsp_DASH_cache_STAR.shift();
};
////////////////////////////////////////////////////////////////////////////////
//fn: [peekNSP] in file: kernel.ky, line: 108
const peekNSP = function() {
  return kirbystdlibref.getProp(_STAR_nsp_DASH_cache_STAR, 0);
};
module.exports = {
  da57bc0172fb42438a11e6e8778f36fb: {
    ns: "czlab.kirby.kernel",
    macros: {}
  },
  LambdaArg: LambdaArg,
  Primitive: Primitive,
  Keyword: Keyword,
  Symbol: Symbol,
  primitive_QUERY: primitive_QUERY,
  primitive: primitive,
  symbol_QUERY: symbol_QUERY,
  symbol: symbol,
  keyword_QUERY: keyword_QUERY,
  keyword: keyword,
  keyword_DASH__GT_symbol: keyword_DASH__GT_symbol,
  lambda_DASH_arg_QUERY: lambda_DASH_arg_QUERY,
  lambda_DASH_arg: lambda_DASH_arg,
  pushNSP: pushNSP,
  popNSP: popNSP,
  peekNSP: peekNSP
};