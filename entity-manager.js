/*Auto generated by Kirby v1.0.0 - Thu Mar 08 2018 11:38:42 GMT-0800 (PST)
  czlab.elmo.ecs
{"doc" "" "author" "Kenneth Leung"}
*/

const K = require("kirby");
const atom = K["atom"];
const swap_BANG = K["swap_BANG"];
const conj_BANG = K["conj_BANG"];
const disj_BANG = K["disj_BANG"];
const kirbystdlibref = require("kirby");
const __module_namespace__ = "czlab.elmo.ecs";
////////////////////////////////////////////////////////////////////////////////
//fn: [createECS] in file: entity-manager.ky, line: 9
const createECS = function() {
  return atom((new Map([["entities",(new Set([]))], ["registry",(new Map([]))], ["data",(new Map([]))], ["processors", []], ["uid", 1]])));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [genUid] in file: entity-manager.ky, line: 13
const genUid = function(ecs) {
  let ret = 0;
  swap_BANG(ecs, function(root) {
    (
    ret = kirbystdlibref.getProp(root, "uid"));
    return (kirbystdlibref.assoc_BANG(root, "uid", (ret + 1)));
  });
  return Number(ret).toString();
};
////////////////////////////////////////////////////////////////////////////////
//fn: [createEntity] in file: entity-manager.ky, line: 21
const createEntity = function(ecs) {
  let componentIds = Array.prototype.slice.call(arguments, 1);
  return (function() {
    let entity = genUid(ecs);
    addToEntity.apply(this, [ecs, entity].concat(componentIds));
    swap_BANG(ecs, function(root) {
      conj_BANG(kirbystdlibref.getProp(root, "entities"), entity);
      return root;
    });
    return entity;
  }).call(this);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [removeEntity] in file: entity-manager.ky, line: 30
const removeEntity = function(ecs, entity) {
  return swap_BANG(ecs, function(root) {
    let entities = kirbystdlibref.getProp(root, "entities");
    let data = kirbystdlibref.getProp(root, "data");
    let registry = kirbystdlibref.getProp(root, "registry");
    Array.from(registry.keys()).forEach(function() {
      let ____args = Array.prototype.slice.call(arguments);
      return (function() {
        let GS__4 = kirbystdlibref.getProp(data, ____args[0]);
        let co = GS__4;
        return ((((typeof (GS__4) === "undefined")) || ((GS__4 === null))) ?
          null :
          kirbystdlibref.dissoc_BANG(co, entity));
      }).call(this);
    });
    disj_BANG(entities, entity);
    return root;
  });
};
////////////////////////////////////////////////////////////////////////////////
//fn: [addComponent] in file: entity-manager.ky, line: 40
const addComponent = function(ecs, id, component) {
  return swap_BANG(ecs, function(root) {
    (kirbystdlibref.assoc_BANG(kirbystdlibref.getProp(root, "registry"), id, component));
    return root;
  });
};
////////////////////////////////////////////////////////////////////////////////
//fn: [removeComponent] in file: entity-manager.ky, line: 46
const removeComponent = function(ecs, id) {
  return swap_BANG(ecs, function(root) {
    kirbystdlibref.dissoc_BANG(kirbystdlibref.getProp(root, "registry"), id);
    kirbystdlibref.dissoc_BANG(kirbystdlibref.getProp(root, "data"), id);
    return root;
  });
};
////////////////////////////////////////////////////////////////////////////////
//fn: [addToEntity] in file: entity-manager.ky, line: 54
const addToEntity = function(ecs, entity) {
  let componentIds = Array.prototype.slice.call(arguments, 2);
  return swap_BANG(ecs, function(root) {
    let data = kirbystdlibref.getProp(root, "data");
    let registry = kirbystdlibref.getProp(root, "registry");
    let ctor = null;
    let co = null;
    componentIds.forEach(function(cid) {
      (
      ctor = kirbystdlibref.getProp(registry, cid));
      if ( (!ctor) ) {
        throw new Error(["Unknown component ", cid].join(""));
      } else {
        null;
      }
      if ( (!data.has(cid)) ) {
        (kirbystdlibref.assoc_BANG(data, cid, (new Map([]))));
      } else {
        null;
      }
      (co = ctor());
      (
      co["____entity"] = entity);
      return (kirbystdlibref.assoc_BANG(kirbystdlibref.getProp(data, cid), entity, co));
    });
    return root;
  });
};
////////////////////////////////////////////////////////////////////////////////
//fn: [removeFromEntity] in file: entity-manager.ky, line: 67
const removeFromEntity = function(ecs, entity) {
  let componentIds = Array.prototype.slice.call(arguments, 2);
  return swap_BANG(ecs, function(root) {
    let data = kirbystdlibref.getProp(root, "data");
    componentIds.forEach(function() {
      let ____args = Array.prototype.slice.call(arguments);
      return (function() {
        let GS__7 = kirbystdlibref.getProp(data, ____args[0]);
        let c = GS__7;
        return ((((typeof (GS__7) === "undefined")) || ((GS__7 === null))) ?
          null :
          kirbystdlibref.dissoc_BANG(c, entity));
      }).call(this);
    });
    return root;
  });
};
////////////////////////////////////////////////////////////////////////////////
//fn: [getDataForEntity] in file: entity-manager.ky, line: 74
const getDataForEntity = function(ecs, entity, componentId) {
  let d = kirbystdlibref.getProp(ecs.value, "data");
  let c = kirbystdlibref.getProp(d, componentId);
  return (c ?
    kirbystdlibref.getProp(c, entity) :
    null);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [updateEntity] in file: entity-manager.ky, line: 80
const updateEntity = function(ecs, entity, componentId, func) {
  return (function() {
    let GS__8 = getDataForEntity(ecs, entity, componentId);
    let c = GS__8;
    return ((((typeof (GS__8) === "undefined")) || ((GS__8 === null))) ?
      null :
      func(c));
  }).call(this);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [getComponentsData] in file: entity-manager.ky, line: 85
const getComponentsData = function(ecs, componentId) {
  let d = kirbystdlibref.getProp(ecs.value, "data");
  let c = kirbystdlibref.getProp(d, componentId);
  return (c ?
    Array.from(c.values()) :
    []);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [componentInEntity?] in file: entity-manager.ky, line: 91
const componentInEntity_QMRK = function(ecs, entity, componentId) {
  let d = kirbystdlibref.getProp(ecs.value, "data");
  let c = kirbystdlibref.getProp(d, componentId);
  return (c ?
    c.has(entity) :
    false);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [addTemplate] in file: entity-manager.ky, line: 97
const addTemplate = function(ecs, id, template) {
  return swap_BANG(ecs, function(root) {
    (kirbystdlibref.assoc_BANG(kirbystdlibref.getProp(root, "templates"), id, template));
    return root;
  });
};
////////////////////////////////////////////////////////////////////////////////
//fn: [removeTemplate] in file: entity-manager.ky, line: 103
const removeTemplate = function(ecs, id) {
  return swap_BANG(ecs, function(root) {
    kirbystdlibref.dissoc_BANG(kirbystdlibref.getProp(root, "templates"), id);
    return root;
  });
};
////////////////////////////////////////////////////////////////////////////////
//fn: [createEntityFromTemplate] in file: entity-manager.ky, line: 109
const createEntityFromTemplate = function(ecs, id) {
  let entity = null;
  swap_BANG(ecs, function(root) {
    let templates = kirbystdlibref.getProp(root, "templates");
    let t = kirbystdlibref.getProp(templates, id);
    (entity = createEntity.apply(this, t.components));
    if (( (typeof (t.initor) === "function") )) {
      t.initor(ecs, e);
    }
    return root;
  });
  return entity;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [addProcessor] in file: entity-manager.ky, line: 120
const addProcessor = function(ecs, processor) {
  return swap_BANG(ecs, function(root) {
    conj_BANG(kirbystdlibref.getProp(root, "processors"), processor);
    return root;
  });
};
////////////////////////////////////////////////////////////////////////////////
//fn: [removeProcessor] in file: entity-manager.ky, line: 126
const removeProcessor = function(ecs, processor) {
  return swap_BANG(ecs, function(root) {
    let processors = kirbystdlibref.getProp(root, "processors");
    let i = processors.indexOf(processor);
    if ( (!((i < 0))) ) {
      processor.splice(i, 1);
    } else {
      null;
    }
    return root;
  });
};
////////////////////////////////////////////////////////////////////////////////
//fn: [updateECS] in file: entity-manager.ky, line: 134
const updateECS = function(ecs, dt) {
  let p = kirbystdlibref.getProp(ecs.value, "processors");
  return p.forEach(function() {
    let ____args = Array.prototype.slice.call(arguments);
    return ____args[0].update(dt);
  });
};
module.exports = {
  da57bc0172fb42438a11e6e8778f36fb: {
    ns: "czlab.elmo.ecs",
    macros: {}
  },
  createECS: createECS,
  createEntity: createEntity,
  removeEntity: removeEntity,
  addComponent: addComponent,
  removeComponent: removeComponent,
  addToEntity: addToEntity,
  removeFromEntity: removeFromEntity,
  getDataForEntity: getDataForEntity,
  updateEntity: updateEntity,
  getComponentsData: getComponentsData,
  componentInEntity_QMRK: componentInEntity_QMRK,
  addTemplate: addTemplate,
  removeTemplate: removeTemplate,
  createEntityFromTemplate: createEntityFromTemplate,
  addProcessor: addProcessor,
  removeProcessor: removeProcessor,
  updateECS: updateECS
};