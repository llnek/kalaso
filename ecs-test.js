/*Auto generated by Kirby v1.0.0 - Fri Mar 23 2018 02:57:53 GMT-0700 (PDT)
  czlab.elmo.ecs.test
{"doc" "" "author" "Kenneth Leung"}
*/

const ecs = require("./ecs-core");
const ky = require("kirby");
const conj_BANG = ky["conj_BANG"];
const some_QMRK = ky["some_QMRK"];
const nichts_QMRK = ky["nichts_QMRK"];
const prn = ky["prn"];
const count = ky["count"];
const println = ky["println"];
const runtest = ky["runtest"];
const kirbystdlibref = require("kirby");
const __module_namespace__ = "czlab.elmo.ecs.test";
////////////////////////////////////////////////////////////////////////////////
//fn: [compA] in file: ecs-test.ky, line: 21
const compA = function() {
  return {
    "a": 50
  };
};
////////////////////////////////////////////////////////////////////////////////
//fn: [compB] in file: ecs-test.ky, line: 22
const compB = function() {
  return {
    "b": 10
  };
};
////////////////////////////////////////////////////////////////////////////////
//fn: [compC] in file: ecs-test.ky, line: 23
const compC = function() {
  return {
    "c": 15
  };
};
const compDPool = ecs.createPool(function() {
  return {
    "d": 10
  };
}, function(x) {
  return x;
}, 8);
////////////////////////////////////////////////////////////////////////////////
//fn: [compD] in file: ecs-test.ky, line: 30
const compD = function() {
  return ecs.takeFromPool(compDPool);
};
const tmpA = {
  "components": (new Set(["c1", "c3"])),
  "initor": function() {}
};
const tmpB = {
  "components": (new Set(["c2", "c3"])),
  "initor": function() {}
};
const _STAR_ecs_STAR = ecs.createECS();
var TEMP_DASH_VAR = null;
////////////////////////////////////////////////////////////////////////////////
//fn: [sys1] in file: ecs-test.ky, line: 44
const sys1 = function(e, t) {
  return (((t > 0)) ?
    conj_BANG(TEMP_DASH_VAR, 1) :
    null);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [sys2] in file: ecs-test.ky, line: 45
const sys2 = function(e, t) {
  return (((t > 0)) ?
    conj_BANG(TEMP_DASH_VAR, 2) :
    null);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [sys3] in file: ecs-test.ky, line: 46
const sys3 = function(e, t) {
  return (((t > 0)) ?
    conj_BANG(TEMP_DASH_VAR, 3) :
    null);
};
const pool1 = ecs.createPool(function() {
  return {
    "a": 0
  };
}, function(x) {
  return x;
}, 6);
const ecs_DASH_test = function() {
  let ____args = Array.prototype.slice.call(arguments);
  return [kirbystdlibref.ensureTest(((ecs.getPoolSize(pool1) === 0)), "pool,size=0"), kirbystdlibref.ensureTest((function() {
    let x = ecs.takeFromPool(pool1);
    let y = ecs.takeFromPool(pool1);
    let z = ecs.takeFromPool(pool1);
    return (3 === ecs.getPoolUsed(pool1));
  }).call(this), "pool,used"), kirbystdlibref.ensureTest((function() {
    let x = ecs.takeFromPool(pool1);
    let y = ecs.takeFromPool(pool1);
    let z = ecs.takeFromPool(pool1);
    ecs.returnToPool(pool1, z);
    return (5 === ecs.getPoolUsed(pool1));
  }).call(this), "pool,drop"), kirbystdlibref.ensureTest((6 === ecs.getPoolSize(pool1)), "pool,size>0"), kirbystdlibref.ensureTest((function() {
    let x = ecs.takeFromPool(pool1);
    let y = ecs.takeFromPool(pool1);
    let z = ecs.takeFromPool(pool1);
    ecs.returnToPool(pool1, x);
    return ((7 === ecs.getPoolUsed(pool1)) && (12 === ecs.getPoolSize(pool1)));
  }).call(this), "pool,grow"), kirbystdlibref.ensureTest((1 === (function() {
      ecs.addComponent(_STAR_ecs_STAR, "c1", compA);
      return count(ecs.getComponentKeys(_STAR_ecs_STAR));
    }).call(this)), "addComponent,1"), kirbystdlibref.ensureTest((3 === (function() {
      ecs.addComponent(_STAR_ecs_STAR, "c2", compB, "c3", compC);
      return count(ecs.getComponentKeys(_STAR_ecs_STAR));
    }).call(this)), "addComponent,*"), kirbystdlibref.ensureTest((2 === (function() {
      ecs.removeComponent(_STAR_ecs_STAR, "c1");
      return count(ecs.getComponentKeys(_STAR_ecs_STAR));
    }).call(this)), "removeComponent,1"), kirbystdlibref.ensureTest((0 === (function() {
      ecs.removeComponent(_STAR_ecs_STAR, "c2", "c3");
      return count(ecs.getComponentKeys(_STAR_ecs_STAR));
    }).call(this)), "removeComponent,*"), kirbystdlibref.ensureTest((4 === (function() {
      ecs.addComponent(_STAR_ecs_STAR, "c1", compA, "c2", compB, "c3", compC, "c4", compD);
      return count(ecs.getComponentKeys(_STAR_ecs_STAR));
    }).call(this)), "addComponent,**"), kirbystdlibref.ensureTest((2 === (function() {
      ecs.addTemplate(_STAR_ecs_STAR, "t1", tmpA, "t2", tmpB);
      return count(ecs.getTemplateKeys(_STAR_ecs_STAR));
    }).call(this)), "addTemplate,*"), kirbystdlibref.ensureTest((0 === (function() {
      ecs.removeTemplate(_STAR_ecs_STAR, "t1", "t2");
      return count(ecs.getTemplateKeys(_STAR_ecs_STAR));
    }).call(this)), "removeTemplate,*"), kirbystdlibref.ensureTest((2 === (function() {
      ecs.addTemplate(_STAR_ecs_STAR, "t1", tmpA, "t2", tmpB);
      return count(ecs.getTemplateKeys(_STAR_ecs_STAR));
    }).call(this)), "addTemplate,*"), kirbystdlibref.ensureTest((function() {
    let x = ecs.createEntity(_STAR_ecs_STAR, "c1", "c2", "c3");
    return (ecs.componentInEntity_QMRK(_STAR_ecs_STAR, x, "c1", "c2", "c3") && ecs.getEntityData(_STAR_ecs_STAR, x, "c1") && ecs.getEntityData(_STAR_ecs_STAR, x, "c2") && ecs.getEntityData(_STAR_ecs_STAR, x, "c3"));
  }).call(this), "createEntity,getData"), kirbystdlibref.ensureTest((function() {
    let a = ecs.findComponent(_STAR_ecs_STAR, "c1");
    let b = ecs.findComponent(_STAR_ecs_STAR, "c2");
    let c = ecs.findComponent(_STAR_ecs_STAR, "c3");
    let d = ecs.findComponent(_STAR_ecs_STAR, "xxx");
    return (a && b && c && nichts_QMRK(d));
  }).call(this), "engine,find"), kirbystdlibref.ensureTest((function() {
    let x = ecs.createTemplateEntity(_STAR_ecs_STAR, "t2");
    return (ecs.componentInEntity_QMRK(_STAR_ecs_STAR, x, "c2", "c3") && nichts_QMRK(ecs.getEntityData(_STAR_ecs_STAR, x, "c1")) && ecs.getEntityData(_STAR_ecs_STAR, x, "c2") && ecs.getEntityData(_STAR_ecs_STAR, x, "c3"));
  }).call(this), "createTemplateEntity,getData"), kirbystdlibref.ensureTest((function() {
    let x = ecs.createTemplateEntity(_STAR_ecs_STAR, "t1");
    let y = ecs.getEntityData(_STAR_ecs_STAR, x, "c3");
    let _ = ecs.removeEntity(_STAR_ecs_STAR, x);
    let z = ecs.getEntityData(_STAR_ecs_STAR, x, "c1");
    return (some_QMRK(y) && nichts_QMRK(z));
  }).call(this), "removeEntity"), kirbystdlibref.ensureTest((function() {
    let x = ecs.createEntity(_STAR_ecs_STAR, "c4");
    let ok = (ecs.componentInEntity_QMRK(_STAR_ecs_STAR, x, "c4") && ecs.getEntityData(_STAR_ecs_STAR, x, "c4"));
    ecs.removeEntity(_STAR_ecs_STAR, x);
    return (ok && (!ecs.componentInEntity_QMRK(_STAR_ecs_STAR, x, "c4")));
  }).call(this), "createEntity,pooled"), kirbystdlibref.ensureTest(ky.eq_QMRK([1, 2, 3], (function() {
    (
    TEMP_DASH_VAR = []);
    ecs.addSystem(_STAR_ecs_STAR, sys1, sys2, sys3);
    ecs.updateECS(_STAR_ecs_STAR, 10);
    return TEMP_DASH_VAR;
  }).call(this)), "engine,addSystem")];
};
println(runtest(ecs_DASH_test, "test: ecs"));
module.exports = {
  da57bc0172fb42438a11e6e8778f36fb: {
    ns: "czlab.elmo.ecs.test",
    macros: {}
  },
  ecs_DASH_test: ecs_DASH_test
};