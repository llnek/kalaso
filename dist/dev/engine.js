/*Auto generated by Kirby - v1.0.0 czlab.kirby.engine - Sat Dec 16 2017 22:57:19 GMT-0800 (PST)*/

const readline = require("readline");
const fs = require("fs");
const parser = require("./parser");
const std = require("./stdlib");
const pairs_QUERY = std["pairs_QUERY"];
const stringify = std["stringify"];
const contains_QUERY = std["contains_QUERY"];
const LambdaArg = std["LambdaArg"];
const Keyword = std["Keyword"];
const not_DASH_empty = std["not_DASH_empty"];
const object_QUERY = std["object_QUERY"];
const Symbol = std["Symbol"];
const into_BANG = std["into_BANG"];
const prn = std["prn"];
const Atom = std["Atom"];
const symbol = std["symbol"];
const swap_BANG = std["swap_BANG"];
const atom = std["atom"];
const vector = std["vector"];
const vector_QUERY = std["vector_QUERY"];
const list_QUERY = std["list_QUERY"];
const map_QUERY = std["map_QUERY"];
const some_QUERY = std["some_QUERY"];
const typeid = std["typeid"];
const sequential_QUERY = std["sequential_QUERY"];
const conj_BANG = std["conj_BANG"];
const count = std["count"];
const last = std["last"];
const pop_BANG = std["pop_BANG"];
const opt_QUERY__QUERY = std["opt_QUERY__QUERY"];
const keyword_QUERY = std["keyword_QUERY"];
const symbol_QUERY = std["symbol_QUERY"];
const seq = std["seq"];
const kirbystdlibref = std;
const macro_assert = "\n  (macro* assert* [c msg] (if* c true (throw* msg))) ";
const macro_cond = "\n  (macro* cond* [&xs]\n    (if* (> (count* xs) 0)\n      (list* 'if*\n            (first* xs)\n            (nth* xs 1)\n            (cons* 'cond* (rest* (rest* xs)))))) ";
const macro_andp = "\n  (macro* _andp_* [&xs]\n    (if* (= 1 (count* xs)) `~(first* xs) `(and ~@xs))) ";
const GLOBAL = ((typeof (window) === "undefined") ?
  undefined :
  window);
const prefix = "kirby> ";
////////////////////////////////////////////////////////////////////////////////
//fn: [expect!] in file: engine.ky,line: 52
const expect_BANG = function(k) {
  return ((!(k instanceof Symbol)) ?
    (function() {
      throw new Error("expecting symbol");
    }).call(this) :
    null);
};
//Lexical Environment
class LEXEnv {
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [constructor] in file: engine.ky,line: 60
  //Create and initialize
  //a new env with these symbols,
  //and optionally a parent env
  constructor(parent, vars, vals) {
    (this["nspaces"] = [], this["data"] = {}, this["parent"] = null);
    if (parent) {
      this["parent"] = parent;
    }
    for (let i = 0, e = null, ev = null, sz = kirbystdlibref.count(vars), ____break = false; ((!____break) && (i < sz)); i = (i + 1)) {
      (e = vars[i], ev = e.value);
      if ( (ev === "&") ) {
        this.data[[
          vars[i + 1]
        ].join("")] = Array.prototype.slice.call(vals, i);
        ____break = true;
      } else {
        if (ev.startsWith("&")) {
          this.data[ev.slice(1)] = Array.prototype.slice.call(vals, i);
          ____break = true;
        } else {
          if (true) {
            this.data[ev] = vals[i];
          }
        }
      }
    }
    return this;
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [find] in file: engine.ky,line: 80
  //Find the env
  //containing this symbol
  find(k) {
    expect_BANG(k);
    return (contains_QUERY(this.data, k.value) ?
      this :
      (some_QUERY(this.parent) ?
        this.parent.find(k) :
        null));
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [set] in file: engine.ky,line: 87
  //Bind this symbol,
  //value to this env
  set(k, v) {
    expect_BANG(k);
    this.data[k.value] = v;
    return v;
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [get] in file: engine.ky,line: 92
  //Get value of
  //this symbol
  get(k) {
    expect_BANG(k);
    let env = this.find(k);
    return (env ?
      env.data[k.value] :
      k.value);
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [select] in file: engine.ky,line: 98
  select(what) {
    return seq(this.data).reduce(function(acc, GS__5) {
      let k = GS__5[0];
      let v = GS__5[1];
      if ((function() {
          let C__6;
          switch (what) {
            case "fn":
              C__6 = (typeof (v) === "function");
              break;
            case "var":
              C__6 = (!(typeof (v) === "function"));
              break;
            default:
              C__6 = true;
              break;
          }
          return C__6;
        }).call(this)) {
        acc[[
          k
        ].join("")] = v;
      }
      return acc;
    }, {});
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [prn] in file: engine.ky,line: 105
  //Print set of vars
  prn() {
    return std.prn(this.data);
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [pushNSP] in file: engine.ky,line: 108
  //Add a namespace
  pushNSP(nsp) {
    conj_BANG(this.nspaces, [
      nsp
    ].join(""));
    return null;
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [peekNSP] in file: engine.ky,line: 111
  //Returns the
  //last added namespace
  peekNSP() {
    return last(this.nspaces);
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [popNSP] in file: engine.ky,line: 115
  //Return and remove
  //the last added namespace
  popNSP() {
    return pop_BANG(this.nspaces)[0];
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [firstNSP] in file: engine.ky,line: 119
  //Get the first
  //added namespace
  firstNSP() {
    return this.nspaces[0];
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [countNSPCache] in file: engine.ky,line: 123
  //Count n# of
  //added namespaces
  countNSPCache() {
    return kirbystdlibref.count(this.nspaces);
  }
  ////////////////////////////////////////////////////////////////////////////////
  //fn: [resetNSPCache] in file: engine.ky,line: 127
  //Clear all namespaces
  resetNSPCache() {
    this["nspaces"] = [];
    return null;
  }
}
////////////////////////////////////////////////////////////////////////////////
//fn: [Function.prototype.clone] in file: engine.ky,line: 135
Function.prototype.clone = function() {
  let orig = this;
  let cloned = function() {
    let ____args = Array.prototype.slice.call(arguments);
    return orig.apply(this, ____args);
  };
  let GS__7 = orig;
  Object.entries(GS__7).forEach(function(e) {
    return (function(v, k) {
      return cloned[k] = v;
    })(e[1], e[0]);
  });
  return cloned;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [prnStr] in file: engine.ky,line: 143
const prnStr = function() {
  let xs = Array.prototype.slice.call(arguments, 0);
  return xs.map(function() {
    let ____args = Array.prototype.slice.call(arguments);
    return prn(____args[0]);
  }).join(" ");
};
////////////////////////////////////////////////////////////////////////////////
//fn: [prnLn] in file: engine.ky,line: 146
const prnLn = function() {
  let xs = Array.prototype.slice.call(arguments, 0);
  return xs.map(function() {
    let ____args = Array.prototype.slice.call(arguments);
    return prn(____args[0]);
  }).forEach(function() {
    let ____args = Array.prototype.slice.call(arguments);
    return (console ?
      console.log([
        ____args[0]
      ].join("")) :
      null);
  });
};
////////////////////////////////////////////////////////////////////////////////
//fn: [slurp] in file: engine.ky,line: 149
const slurp = function(f) {
  return fs.readFileSync(f, "utf-8");
};
////////////////////////////////////////////////////////////////////////////////
//fn: [spit] in file: engine.ky,line: 152
const spit = function(f, s) {
  fs.writeFileSync(f, s, "utf-8");
  return null;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [clone] in file: engine.ky,line: 155
const clone = function(obj) {
  let oid = typeid(obj);
  return (function() {
    let C__8;
    switch (oid) {
      case "vector":
      case "map":
      case "list":
        C__8 = into_BANG(oid, Array.prototype.slice.call(obj));
        break;
      case "array":
        C__8 = Array.prototype.slice.call(obj);
        break;
      case "object":
        C__8 = seq(obj).reduce(function(acc, GS__9) {
          let k = GS__9[0];
          let v = GS__9[1];
          acc[k] = v;
          return acc;
        }, {});
        break;
      case "function":
        C__8 = obj.clone();
        break;
      default:
        C__8 = (function() {
          throw new Error([
            "clone of non-collection: ",
            oid
          ].join(""));
        }).call(this);
        break;
    }
    return C__8;
  }).call(this);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [cons] in file: engine.ky,line: 172
const cons = function(a, b) {
  return [
    a
  ].concat(b);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [conj] in file: engine.ky,line: 175
const conj = function(arr) {
  let xs = Array.prototype.slice.call(arguments, 1);
  return (list_QUERY(arr) ?
    into_BANG("list", xs.reverse().concat(arr)) :
    (some_QUERY(arr) ?
      into_BANG("vector", arr.concat(xs)) :
      (true ?
        arr :
        null)));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [fapply] in file: engine.ky,line: 187
const fapply = function(f) {
  let xs = Array.prototype.slice.call(arguments, 1);
  return f.apply(this, xs);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [fmap] in file: engine.ky,line: 190
const fmap = function(f, arr) {
  return arr.map(f);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [resolveJS] in file: engine.ky,line: 193
const resolveJS = function(s) {
  return [
    (contains_QUERY(s, ".") ?
      eval(/^(.*)\.[^\.]*$/g.exec(s)[1]) :
      GLOBAL),
    eval(s)
  ];
};
////////////////////////////////////////////////////////////////////////////////
//fn: [filterJS] in file: engine.ky,line: 201
const filterJS = function(obj) {
  let s = stringify(obj);
  return (not_DASH_empty(s) ?
    JSON.parse(s) :
    null);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [withMeta] in file: engine.ky,line: 206
const withMeta = function(obj, m) {
  let ret = clone(obj);
  ret["____meta"] = m;
  return ret;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [meta] in file: engine.ky,line: 211
const meta = function(obj) {
  if ( (!(Array.isArray(obj) || object_QUERY(obj) || (typeof (obj) === "function"))) ) {
    throw new Error([
      "can't get meta from: ",
      typeid(obj)
    ].join(""));
  } else {
    null;
  }
  return obj["____meta"];
};
////////////////////////////////////////////////////////////////////////////////
//fn: [evalJS] in file: engine.ky,line: 219
const evalJS = function(s) {
  return filterJS(eval(s.toString()));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [invokeJS] in file: engine.ky,line: 223
const invokeJS = function(method) {
  let xs = Array.prototype.slice.call(arguments, 1);
  let GS__10 = resolveJS(method);
  let obj = GS__10[0];
  let f = GS__10[1];
  return filterJS(f.apply(obj, xs));
};
const _STAR_runtime_DASH_funcs_STAR = {
  "macroexpand*": function(code) {
    let GS__11 = Array.prototype.slice.call(arguments, 1);
    let env = GS__11[0];
    return (console ?
      console.log([
        std.prn(inflateMacro(code, (env || g_env)))
      ].join("")) :
      null);
  },
  "macros*": function() {
    let GS__12 = Array.prototype.slice.call(arguments, 0);
    let fout = GS__12[0];
    let s = std.prn(CACHE);
    return (fout ?
      spit(fout, s) :
      (console ?
        console.log([
          s
        ].join("")) :
        null));
  },
  "env*": function(what) {
    let GS__13 = Array.prototype.slice.call(arguments, 1);
    let env = GS__13[0];
    let fout = GS__13[1];
    let s = std.prn((env || g_env).select(what));
    return (fout ?
      spit(fout, s) :
      (console ?
        console.log([
          s
        ].join("")) :
        null));
  },
  "is-same?": function(a, b) {
    return (a == b);
  },
  "is-nil?": function(x) {
    return (x === null);
  },
  "obj-type*": std.typeid,
  "gensym*": std.gensym,
  "is-eq?": std.eq_QUERY,
  "is-some?": std.some_QUERY,
  "str*": function() {
    let xs = Array.prototype.slice.call(arguments, 0);
    return xs.join("");
  },
  "slice*": function(arr) {
    let xs = Array.prototype.slice.call(arguments, 1);
    return Array.prototype.slice.apply(arr, xs);
  },
  "throw*": function() {
    let xs = Array.prototype.slice.call(arguments, 0);
    return (function() {
      throw new Error(xs.join(""));
    }).call(this);
  },
  "#f?": function(x) {
    return (x === false);
  },
  "#t?": function(x) {
    return (x === true);
  },
  "is-str?": function(x) {
    return (typeof (x) === "string");
  },
  "is-keyword?": std.keyword_QUERY,
  "is-symbol?": std.symbol_QUERY,
  "keyword*": std.keyword,
  "symbol*": std.symbol,
  "println*": prnLn,
  "prn*": prnStr,
  "slurp*": slurp,
  "spit*": spit,
  "<": function(a, b) {
    return (a < b);
  },
  "<=": function(a, b) {
    return (a <= b);
  },
  ">": function(a, b) {
    return (a > b);
  },
  ">=": function(a, b) {
    return (a >= b);
  },
  "/": function(a) {
    let xs = Array.prototype.slice.call(arguments, 1);
    return xs.reduce(function(acc, n) {
      return (acc / n);
    }, a);
  },
  "+": function() {
    let xs = Array.prototype.slice.call(arguments, 0);
    return xs.reduce(function(acc, n) {
      return (acc + n);
    }, 0);
  },
  "-": function(a) {
    let xs = Array.prototype.slice.call(arguments, 1);
    return xs.reduce(function(acc, n) {
      return (acc - n);
    }, a);
  },
  "*": function() {
    let xs = Array.prototype.slice.call(arguments, 0);
    return xs.reduce(function(acc, n) {
      return (acc * n);
    }, 1);
  },
  "not=": function(a, b) {
    return (a !== b);
  },
  "=": function(a, b) {
    return (a === b);
  },
  "is-contains?": std.contains_QUERY,
  "is-vector?": std.vector_QUERY,
  "is-list?": std.list_QUERY,
  "is-map?": std.map_QUERY,
  "hash-map*": std.hashmap,
  "vector*": std.vector,
  "list*": std.list,
  "values*": function(x) {
    return Object.values(x);
  },
  "keys*": function(x) {
    return Object.keys(x);
  },
  "get*": function(m, k) {
    return m[k];
  },
  "not*": function(x) {
    return (x ?
      false :
      true);
  },
  "dec*": function(x) {
    return (x - 1);
  },
  "inc*": function(x) {
    return (x + 1);
  },
  "is-even?": function(n) {
    return (0 === std.modulo(n, 2));
  },
  "is-odd?": function(n) {
    return (1 === std.modulo(n, 2));
  },
  "is-sequential?": std.sequential_QUERY,
  "concat*": std.concat_STAR,
  "count*": std.count,
  "cons*": cons,
  "rest*": function(arr) {
    return (arr ?
      arr.slice(1) :
      []);
  },
  "nth*": function(arr, i) {
    return arr[i];
  },
  "first*": function(arr) {
    return arr[0];
  },
  "is-empty?": function(x) {
    return (0 === std.count(x));
  },
  "not-empty*": std.not_DASH_empty,
  "apply*": fapply,
  "map*": fmap,
  "evens*": std.evens,
  "odds*": std.odds,
  "meta*": meta,
  "conj*": conj,
  "seq*": std.seq,
  "is-atom?": std.atom_QUERY,
  "atom*": std.atom,
  "deref*": std.deref,
  "reset*": std.reset_BANG,
  "swap*": std.swap_BANG,
  "with-meta*": withMeta,
  "js-eval*": evalJS,
  "js*": invokeJS,
  "type*": function(x) {
    return typeof (x);
  }
};
var loadedMacros_QUERY = false;
const CACHE = {};
////////////////////////////////////////////////////////////////////////////////
//fn: [loadMacros] in file: engine.ky,line: 322
const loadMacros = function() {
  if ( (!loadedMacros_QUERY) ) {
    loadedMacros_QUERY = true;
    require("./macros.ky");
  }
  return loadedMacros_QUERY;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [setMacro] in file: engine.ky,line: 328
//Register a new macro
const setMacro = function(cmd, func) {
  if ( (cmd && func) ) {
    cmd = [
      cmd
    ].join("");
    if ( (!contains_QUERY(cmd, "/")) ) {
      let c = g_env.peekNSP();
      if ( (!c) ) {
        throw new Error("missing namespace");
      } else {
        null;
      }
      cmd = [
        c,
        "/",
        cmd
      ].join("");
    }
    CACHE[cmd] = func;
  }
  return null;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [getMacro] in file: engine.ky,line: 340
//Get macro
const getMacro = function(cmd) {
  let nsp = null;
  let ret = null;
  cmd = [
    cmd
  ].join("");
  if (contains_QUERY(cmd, "/")) {
    ret = CACHE[cmd];
  } else {
    nsp = g_env.peekNSP();
    if (nsp) {
      ret = CACHE[[
        nsp,
        "/",
        cmd
      ].join("")];
    }
    if ( (!ret) ) {
      ret = CACHE[[
        "czlab.kirby.macros/",
        cmd
      ].join("")];
    } else {
      null;
    }
  }
  return ret;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [dbg] in file: engine.ky,line: 355
const dbg = function(obj) {
  if (console) {
    console.log([
      "DBG-RT: ",
      prn(obj)
    ].join(""));
  }
  return null;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [readAST] in file: engine.ky,line: 358
//Returns the AST
const readAST = function(s) {
  let ret = parser.parse(s);
  if ( (1 === kirbystdlibref.count(ret)) ) {
    ret = ret[0];
  }
  return ret;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [isList?] in file: engine.ky,line: 365
//Returns true
//if a non-empty list
const isList_QUERY = function(x) {
  return (sequential_QUERY(x) && not_DASH_empty(x));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [backtick] in file: engine.ky,line: 371
const backtick = function(ast) {
  return ((!isList_QUERY(ast)) ?
    [
      kirbystdlibref.symbol("quote"),
      ast
    ] :
    ((symbol_QUERY(ast[0]) && (ast[0] == "unquote")) ?
      ast[1] :
      ((isList_QUERY(ast[0]) && (ast[0][0] == "splice-unquote")) ?
        [
          kirbystdlibref.symbol("concat*"),
          ast[0][1],
          backtick(ast.slice(1))
        ] :
        (true ?
          (function() {
            let a0 = ast[0];
            let a1 = ast.slice(1);
            return [
              kirbystdlibref.symbol("cons*"),
              backtick(a0),
              backtick(a1)
            ];
          }).call(this) :
          null))));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [isMacroCall?] in file: engine.ky,line: 388
const isMacroCall_QUERY = function(ast, env) {
  return (pairs_QUERY(ast) && symbol_QUERY(ast[0]) && getMacro([
      ast[0]
    ].join("")));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [inflateMacro] in file: engine.ky,line: 394
const inflateMacro = function(ast, env) {
  let isM_QUERY = isMacroCall_QUERY(ast, env);
  let mac = null;
  let cmd = (isM_QUERY ?
    ast[0] :
    "");
  for (let ____break = false; ((!____break) && isMacroCall_QUERY(ast, env));) {
    (cmd = [
      ast[0]
    ].join(""), mac = getMacro(cmd), ast = mac.apply(mac, ast.slice(1)));
  }
  return ast;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [eval*] in file: engine.ky,line: 404
const eval_STAR = function(ast, env) {
  return (keyword_QUERY(ast) ?
    ast.value :
    ((typeof (ast) === "string") ?
      std.unwrap_DASH_str(ast) :
      (symbol_QUERY(ast) ?
        env.get(ast) :
        (pairs_QUERY(ast) ?
          ast.map(function() {
            let ____args = Array.prototype.slice.call(arguments);
            return compute(____args[0], env);
          }) :
          (list_QUERY(ast) ?
            into_BANG("list", ast.map(function() {
              let ____args = Array.prototype.slice.call(arguments);
              return compute(____args[0], env);
            })) :
            (vector_QUERY(ast) ?
              into_BANG("vector", ast.map(function() {
                let ____args = Array.prototype.slice.call(arguments);
                return compute(____args[0], env);
              })) :
              ((false && map_QUERY(ast)) ?
                seq(ast).reduce(function(acc, en) {
                  acc[compute(en[0], env)] = compute(last(en), env);
                  return acc;
                }, {}) :
                (map_QUERY(ast) ?
                  (function() {
                    let m = {};
                    for (let i = 0, sz = kirbystdlibref.count(ast), ____break = false; ((!____break) && (i < sz)); i = (i + 2)) {
                      m[compute(ast[i], env)] = compute(ast[i + 1], env);
                    }
                    return m;
                  }).call(this) :
                  (true ?
                    ast :
                    null)))))))));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [handleAND] in file: engine.ky,line: 436
const handleAND = function(ast, env) {
  let ret = true;
  for (let i = 1, sz = kirbystdlibref.count(ast), ____break = false; ((!____break) && (i < sz)); i = (i + 1)) {
    ret = compute(ast[i], env);
    if ( (!ret) ) {
      ____break = true;
    } else {
      null;
    }
  }
  return ret;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [handleOR] in file: engine.ky,line: 444
const handleOR = function(ast, env) {
  let ret = null;
  for (let i = 1, sz = kirbystdlibref.count(ast), ____break = false; ((!____break) && (i < sz)); i = (i + 1)) {
    ret = compute(ast[i], env);
    if (ret) {
      ____break = true;
    }
  }
  return ret;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [handleLet] in file: engine.ky,line: 452
const handleLet = function(ast, env) {
  let e = new LEXEnv(env);
  let a1 = ast[1];
  for (let i = 0, sz = kirbystdlibref.count(a1), ____break = false; ((!____break) && (i < sz)); i = (i + 2)) {
    e.set(a1[i], compute(a1[i + 1], e));
  }
  return [
    ast[2],
    e
  ];
};
////////////////////////////////////////////////////////////////////////////////
//fn: [handleMacro] in file: engine.ky,line: 462
const handleMacro = function(ast, env) {
  let rc = [
    ast[0],
    ast[1],
    [
      kirbystdlibref.symbol("lambda*"),
      ast[2]
    ].concat(ast.slice(3))
  ];
  let a2 = rc[2];
  let a1 = rc[1];
  let cmd = [
    "czlab.kirby.macros/",
    a1
  ].join("");
  let func = compute(a2, env);
  func["____macro"] = true;
  setMacro(cmd, func);
  return null;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [handleTry] in file: engine.ky,line: 474
const handleTry = function(ast, env) {
  let a1 = ast[1];
  let a2 = ast[2];
  return (function() {
    try {
      return compute(a1, env);
    } catch (ex) {
      return ((a2 && ("catch*" == a2[0])) ?
        ((ex instanceof Error) ?
          ex = ex.message :
          null) :
        compute(a2[2], new LEXEnv(env, [
          a2[1]
        ], [
          ex
        ])));
    }
  }).call(this);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [handleIf] in file: engine.ky,line: 490
const handleIf = function(ast, env) {
  let c = compute(ast[1], env);
  let a2 = ast[2];
  let a3 = ast[3];
  return (((c === null) || (c === false)) ?
    ((!(typeof (a3) === "undefined")) ?
      a3 :
      null) :
    a2);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [read*] in file: engine.ky,line: 499
const read_STAR = function(ast, env) {
  let f = null;
  let el = eval_STAR(ast, env);
  return ((vector_QUERY(ast) || map_QUERY(ast) || list_QUERY(ast)) ?
    [
      false,
      el
    ] :
    (Array.isArray(el) ?
      (function() {
        f = el[0];
        return ((f && f.____ast) ?
          [
            true,
            f.____ast,
            f.____genenv(el.slice(1))
          ] :
          (true ?
            [
              false,
              ((typeof (f) === "function") ?
                f.apply(f, el.slice(1)) :
                el),
              env
            ] :
            null));
      }).call(this) :
      (true ?
        [
          false,
          el
        ] :
        null)));
};
////////////////////////////////////////////////////////////////////////////////
//fn: [fn-wrap] in file: engine.ky,line: 518
const fn_DASH_wrap = function(run, ast, env, params) {
  let f = function() {
    let ____args = Array.prototype.slice.call(arguments);
    return run(ast, new LEXEnv(env, params, ____args));
  };
  (f["____macro"] = false, f["____meta"] = null, f["____ast"] = ast, f["____genenv"] = function() {
    let ____args = Array.prototype.slice.call(arguments);
    return new LEXEnv(env, params, ____args[0]);
  });
  return f;
};
const _STAR_spec_DASH_forms_STAR = {
  "and*": function(a, e) {
    return [
      handleAND(a, e)
    ];
  },
  "or*": function(a, e) {
    return [
      handleOR(a, e)
    ];
  },
  "def*": function(a, e) {
    return [
      e.set(a[1], compute(a[2], e))
    ];
  },
  "let*": function(a, e) {
    return handleLet(a, e);
  },
  "quote": function(a, e) {
    return [
      a[1]
    ];
  },
  "syntax-quote": function(a, e) {
    return [
      backtick(a[1]),
      e
    ];
  },
  "macro*": function(a, e) {
    return [
      handleMacro(a, e)
    ];
  },
  "try*": function(a, e) {
    return [
      handleTry(a, e)
    ];
  },
  "do*": function(a, e) {
    eval_STAR(a.slice(1, -1), e);
    return [
      a[(a.length - 1)],
      e
    ];
  },
  "if*": function(a, e) {
    return [
      handleIf(a, e),
      e
    ];
  },
  "lambda*": function(a, e) {
    return [
      fn_DASH_wrap(compute, a[2], e, a[1])
    ];
  }
};
////////////////////////////////////////////////////////////////////////////////
//fn: [compute] in file: engine.ky,line: 547
//Interpret a expression
const compute = function(expr, cenv) {
  let g1 = function() {
    let ____args = Array.prototype.slice.call(arguments);
    return (pairs_QUERY(____args[0]) ?
      ____args[0][0] :
      "");
  };
  let ret,
    res,
    tmp,
    cmd,
    fc;
  if ( (!cenv) ) {
    cenv = g_env;
  } else {
    null;
  }
  (function() {
    let _x_ = null;
    let recur = null;
    let _f_ = function(env, ast) {
      (cmd = [
        g1(ast)
      ].join(""), fc = _STAR_spec_DASH_forms_STAR[cmd], res = ((!Array.isArray(ast)) ?
        [
          eval_STAR(ast, env)
        ] :
        ((0 === kirbystdlibref.count(ast)) ?
          [
            ast
          ] :
          ((typeof (fc) === "function") ?
            fc(ast, env) :
            (true ?
              (function() {
                tmp = read_STAR(ast, env);
                return (tmp[0] ?
                  Array.prototype.slice.call(tmp, 1) :
                  Array.prototype.slice.call(tmp, 1, 2));
              }).call(this) :
              null)))));
      return ((1 === kirbystdlibref.count(res)) ?
        (function() {
          let GS__14 = true;
          ret = res[0];
          return GS__14;
        }).call(this) :
        recur(res[1], inflateMacro(res[0], res[1])));
    };
    let _r_ = _f_;
    recur = function() {
      _x_ = arguments;
      if (_r_) {
        for (_r_ = undefined; _r_ === undefined;) {
          _r_ = _f_.apply(this, _x_);
        }
        return _r_;
      }
      return undefined;
    };
    return recur(cenv, inflateMacro(expr, cenv));
  })(this);
  return ((typeof (ret) === "undefined") ?
    null :
    ret);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [newEnv] in file: engine.ky,line: 571
//Create a new interpreter environment
const newEnv = function() {
  return (function() {
    let ret = new LEXEnv();
    let GS__15 = _STAR_runtime_DASH_funcs_STAR;
    Object.entries(GS__15).forEach(function(e) {
      return (function(v, k) {
        return ret.set(symbol(k), v);
      })(e[1], e[0]);
    });
    return ret;
  }).call(this);
};
////////////////////////////////////////////////////////////////////////////////
//fn: [runRepl] in file: engine.ky,line: 577
//Start a interactive session
const runRepl = function() {
  let ss = readline.createInterface(process.stdin, process.stdout);
  let z = prefix.length;
  let pt = function() {
    let ____args = Array.prototype.slice.call(arguments);
    return (function() {
      ss.setPrompt(prefix, z);
      return ss.prompt();
    }).call(this);
  };
  let rl = function(line) {
    try {
      if (line) {
        if (console) {
          console.log([
            reval(line)
          ].join(""));
        }
      }
    } catch (e) {
      if (console) {
        console.log([
          e
        ].join(""));
      }
    }
    return pt();
  };
  let cl = function() {
    let ____args = Array.prototype.slice.call(arguments);
    return (function() {
      if (console) {
        console.log([
          "Bye!"
        ].join(""));
      }
      return process.exit(0);
    }).call(this);
  };
  ss.on("close", cl);
  ss.on("line", rl);
  init();
  if (console) {
    console.log([
      prefix,
      "Kirby REPL v",
      _STAR_version_STAR
    ].join(""));
  }
  return pt();
};
////////////////////////////////////////////////////////////////////////////////
//fn: [reval] in file: engine.ky,line: 593
//Eval one or more expressions
const reval = function(expr) {
  let xs = Array.prototype.slice.call(arguments, 1);
  let f = function() {
    let ____args = Array.prototype.slice.call(arguments);
    let F__16 = readAST;
    let R__17 = F__16.apply(this, ____args);
    let F__18 = compute;
    let R__19 = F__18(R__17);
    let F__20 = prn;
    let R__21 = F__20(R__19);
    return R__21;
  };
  let ret = f(expr);
  let GS__22 = xs;
  for (let GS__24 = 0, GS__23 = false, ____break = false; ((!____break) && ((!GS__23) && (GS__24 < GS__22.length))); GS__24 = (GS__24 + 1)) {
    let e = GS__22[GS__24];
    null;
    if ( (!true) ) {
      GS__23 = true;
    } else {
      null;
    }
    if ( ((!GS__23) && true) ) {
      ret = f(e);
    }
  }
  null;
  return ret;
};
var inited_QUERY = false;
var _STAR_version_STAR = "";
var g_env = null;
////////////////////////////////////////////////////////////////////////////////
//fn: [init] in file: engine.ky,line: 602
//Set up the runtime environment
const init = function(ver) {
  if ( (!inited_QUERY) ) {
    (_STAR_version_STAR = ver, g_env = newEnv());
    reval(macro_cond, macro_assert, macro_andp);
    loadMacros();
    inited_QUERY = true;
  }
  return inited_QUERY;
};
////////////////////////////////////////////////////////////////////////////////
//fn: [globalEnv] in file: engine.ky,line: 611
//Returns the runtime environment
const globalEnv = function() {
  return g_env;
};
module.exports = {
  LEXEnv: LEXEnv,
  slurp: slurp,
  spit: spit,
  setMacro: setMacro,
  getMacro: getMacro,
  inflateMacro: inflateMacro,
  compute: compute,
  newEnv: newEnv,
  runRepl: runRepl,
  init: init,
  globalEnv: globalEnv
};