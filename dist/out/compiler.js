/*Auto generated by Kirby - v1.0.0 czlab.kirby.compiler - Sun Dec 10 2017 18:55:33 GMT-0800 (PST)*/

const smap = require("source-map");
const std = require("./stdlib");
const lambda_DASH_arg_QUERY = std["lambda_DASH_arg_QUERY"];
const hashmap = std["hashmap"];
const pairs_QUERY = std["pairs_QUERY"];
const into_BANG = std["into_BANG"];
const contains_QUERY = std["contains_QUERY"];
const last = std["last"];
const typeid = std["typeid"];
const prn = std["prn"];
const primitive = std["primitive"];
const map_QUERY = std["map_QUERY"];
const vector_QUERY = std["vector_QUERY"];
const opt_QUERY__QUERY = std["opt_QUERY__QUERY"];
const some_QUERY = std["some_QUERY"];
const primitive_QUERY = std["primitive_QUERY"];
const not_DASH_empty = std["not_DASH_empty"];
const conj_BANG = std["conj_BANG"];
const list_QUERY = std["list_QUERY"];
const gensym = std["gensym"];
const count = std["count"];
const pop_BANG = std["pop_BANG"];
const slice = std["slice"];
const symbol = std["symbol"];
const keyword = std["keyword"];
const symbol_QUERY = std["symbol_QUERY"];
const keyword_QUERY = std["keyword_QUERY"];
const eng = require("./engine");
const parser = require("./parser");
const fs = require("fs");
const path = require("path");
const esfmt = require("esformatter");
const kirbystdlibref = std;
const ERRORS_DASH_MAP = {
  "no_DASH_sourcemap_DASH_info": "",
  "invalid_DASH_fargs": "",
  "invalid_DASH_catch": "",
  "invalid_DASH_try": "",
  "invalid_DASH_include": "",
  "invalid_DASH_require": "",
  "invalid_DASH_namespace": "",
  "destruct_DASH_args": "",
  "file_DASH_access": "",
  "file_DASH_read": "",
  "file_DASH_open": "",
  "unknown_DASH_keyword": "",
  "invalid_DASH_arity": "",
  "invalid_DASH_meta": "",
  "syntax_DASH_error": "",
  "empty_DASH_form": ""
};
const XERRORS_DASH_MAP = {
  "e0": "Syntax Error",
  "e1": "Empty statement",
  "e2": "Invalid characters in function name",
  "e3": "End of File encountered, unterminated string",
  "e4": "Closing square bracket, without an opening square bracket",
  "e5": "End of File encountered, unterminated array",
  "e6": "Closing curly brace, without an opening curly brace",
  "e7": "End of File encountered, unterminated javascript object '}'",
  "e8": "End of File encountered, unterminated parenthesis",
  "e9": "Invalid character in var name",
  "e10": "Extra chars at end of file. Maybe an extra ')'.",
  "e11": "Cannot Open include File",
  "e12": "Invalid no of arguments to ",
  "e13": "Invalid Argument type to ",
  "e14": "End of File encountered, unterminated regular expression",
  "e15": "Invalid vararg position, must be last argument.",
  "e16": "Invalid arity (args > expected) to ",
  "e17": "Invalid arity (args < expected) to "
};
const MODULE_DASH_VERSION = "1.0.0";
var _STAR_externs_STAR = null;
var SPEC_DASH_OPS = {};
var MATH_DASH_OP_DASH_REGEX = /^[-+][0-9]+$/;
//fn: [tnodeEx] in file: compiler.ky,line: 76
//Create a token
const tnodeEx = function(chunk, name) {
  return tnode(null, null, null, chunk, name);
};
//fn: [tnode] in file: compiler.ky,line: 80
//Create a token
//with source information
const tnode = function() {
  let GS__8 = Array.prototype.slice.call(arguments, 0);
  let source = GS__8[0];
  let line = GS__8[1];
  let col = GS__8[2];
  let chunk = GS__8[3];
  let name = GS__8[4];
  return new smap.SourceNode(line, col, source, chunk, opt_QUERY__QUERY(name, ""));
};
//fn: [doFuncArgs] in file: compiler.ky,line: 87
//Deal with possible destructuring
//of args in function definition
const doFuncArgs = function(args, ast, env) {
  let e,
    ev,
    rval,
    out;
  let pms = [];
  let ret = [
    node_QUOTE(ast),
    node_QUOTE(ast)
  ];
  let fargs = ret[0];
  let fdefs = ret[1];
  for (let i = 0, sz = kirbystdlibref.count(args), ____break = false; ((!____break) && (i < sz)); i = (i + 1)) {
    e = args[i];
    if (symbol_QUERY(e)) {
      if ( (e == "&") ) {
        (rval = node_QUOTE(ast), e = args[i + 1]);
        rval.add([
          "Array.prototype.slice.call(arguments,",
          [
            i
          ].join(""),
          ")"
        ]);
        if (symbol_QUERY(e)) {
          fdefs.add([
            "let ",
            tx_STAR(e, env),
            "=",
            rval,
            ";\n"
          ]);
        } else {
          (out = node_QUOTE(ast), e = destruct_STAR(e, out, env, ast));
          fdefs.add([
            "let ",
            tx_STAR(e, env),
            "=",
            rval,
            ";\n",
            out
          ]);
        }
        ____break = true;
      } else {
        if ( (e == "_") ) {
          e = gensym("U__");
        }
        conj_BANG(pms, e);
      }
    } else {
      if (Array.isArray(e)) {
        (rval = node_QUOTE(ast), out = node_QUOTE(ast), e = destruct_STAR(e, out, env, ast));
        rval.add([
          "arguments[",
          [
            i
          ].join(""),
          "]"
        ]);
        conj_BANG(pms, e);
        fdefs.add([
          "let ",
          tx_STAR(e, env),
          "=",
          rval,
          ";\n",
          out
        ]);
      } else {
        if (true) {
          error_BANG("destruct_DASH_args", ast);
        }
      }
    }
  }
  pms.forEach(function() {
    let ____args = Array.prototype.slice.call(arguments);
    return fargs.add(tx_STAR(____args[0], env));
  });
  fargs.join(",");
  return ret;
};
//fn: [destruct*] in file: compiler.ky,line: 131
const destruct_STAR = function(coll, out, env, ast) {
  let rhs = gensym();
  let e = null;
  for (let i = 0, sz = kirbystdlibref.count(coll), ____break = false; ((!____break) && (i < sz)); i = (i + 1)) {
    e = coll[i];
    if ( (keyword_QUERY(e) && (e == "as")) ) {
      rhs = coll[i + 1];
      ____break = true;
    }
  }
  if (map_QUERY(coll)) {
    out.add(destructMap(rhs, coll, env, ast));
  } else {
    if (vector_QUERY(coll)) {
      out.add(destructVec(rhs, coll, env, ast));
    } else {
      null;
    }
  }
  return rhs;
};
//fn: [destructVec] in file: compiler.ky,line: 150
const destructVec = function(src, coll, env, ast) {
  src = tx_STAR(src, env);
  let e,
    rval,
    out;
  let ret = node_QUOTE(ast);
  for (let i = 0, sz = kirbystdlibref.count(coll), ____break = false; ((!____break) && (i < sz)); i = (i + 1)) {
    e = coll[i];
    if (symbol_QUERY(e)) {
      if ( (e == "_") ) {
        null;
      } else {
        if ( (e == "&") ) {
          (rval = node_QUOTE(ast), out = node_QUOTE(ast), e = coll[i + 1]);
          rval.add([
            "Array.prototype.slice.call(",
            src,
            ",",
            [
              i
            ].join(""),
            ")"
          ]);
          if ( (!symbol_QUERY(e)) ) {
            e = destruct_STAR(e, out, env, ast);
          } else {
            null;
          }
          ret.add([
            "let ",
            tx_STAR(e, env),
            "=",
            rval,
            ";\n",
            out
          ]);
          ____break = true;
        } else {
          if (true) {
            ret.add([
              "let ",
              tx_STAR(e, env),
              "=",
              src,
              "[",
              [
                i
              ].join(""),
              "];\n"
            ]);
          }
        }
      }
    } else {
      if (Array.isArray(e)) {
        (rval = node_QUOTE(ast), out = node_QUOTE(ast), e = destruct_STAR(e, out, env, ast));
        rval.add([
          src,
          "[",
          [
            i
          ].join(""),
          "]"
        ]);
        ret.add([
          "let ",
          tx_STAR(e, env),
          "=",
          rval,
          ";\n",
          out
        ]);
      } else {
        if (keyword_QUERY(e)) {
          if ( (e == "as") ) {
            ++i;
          } else {
            error_BANG("unknown_DASH_keyword", ast);
          }
        } else {
          if (true) {
            error_BANG("syntax_DASH_error", ast);
          }
        }
      }
    }
  }
  return ret;
};
//fn: [destructMap] in file: compiler.ky,line: 191
const destructMap = function(src, coll, env, ast) {
  src = tx_STAR(src, env);
  let ret = node_QUOTE(ast);
  let e,
    arr;
  for (let i = 0, sz = kirbystdlibref.count(coll), ____break = false; ((!____break) && (i < sz)); i = (i + 1)) {
    e = coll[i];
    if (keyword_QUERY(e)) {
      if ( ((e == "keys") || (e == "strs")) ) {
        arr = coll[i + 1];
        ++i;
        for (let j = 0, sz = kirbystdlibref.count(arr), ____break = false; ((!____break) && (j < sz)); j = (j + 1)) {
          e = arr[j];
          ret.add([
            "let ",
            tx_STAR(e, env),
            "=",
            src,
            "[\"",
            [
              e
            ].join(""),
            "\"];\n"
          ]);
        }
      } else {
        if (true) {
          error_BANG("unknown_DASH_keyword", ast);
        }
      }
    } else {
      if (true) {
        error_BANG("syntax_DASH_error", ast);
      }
    }
  }
  return ret;
};
//fn: [simple?] in file: compiler.ky,line: 217
const simple_QUERY = function(ast) {
  return ((typeof (ast) === "undefined") || (ast === null) || (typeof (ast) === "string") || (typeof (ast) === "number") || (typeof (ast) === "boolean"));
};
//fn: [wrap] in file: compiler.ky,line: 221
const wrap = function(ret, head, tail) {
  if (head) {
    ret.prepend(head);
  }
  if (tail) {
    ret.add(tail);
  }
  return ret;
};
//fn: [exprHint] in file: compiler.ky,line: 227
const exprHint = function(ast, flag) {
  if (simple_QUERY(ast)) {
    ast = primitive(ast);
  }
  ast["____expr"] = flag;
  return ast;
};
//fn: [stmt?] in file: compiler.ky,line: 231
const stmt_QUERY = function(ast) {
  if (simple_QUERY(ast)) {
    error_BANG("syntax_DASH_error", ast);
  }
  return (false === ast.____expr);
};
//fn: [error!] in file: compiler.ky,line: 235
const error_BANG = function(e) {
  let GS__10 = Array.prototype.slice.call(arguments, 1);
  let ast = GS__10[0];
  let msg = GS__10[1];
  return (function() {
    throw new Error([
      ERRORS_DASH_MAP[e],
      (msg ?
        [
          " : ",
          msg
        ].join("") :
        null),
      ((ast && ast.line) ?
        [
          "\nline: ",
          ast.line
        ].join("") :
        null),
      ((ast && ast.source) ?
        [
          "\nfile: ",
          ast.source
        ].join("") :
        null)
    ].join(""));
  }).call(this);
};
//fn: [testre?] in file: compiler.ky,line: 242
const testre_QUERY = function(re, x) {
  return (x ?
    re.test(x) :
    null);
};
//fn: [pad] in file: compiler.ky,line: 245
const pad = function(n) {
  return " ".repeat(n);
};
//fn: [node'] in file: compiler.ky,line: 248
const node_QUOTE = function(ast) {
  let GS__11 = Array.prototype.slice.call(arguments, 1);
  let obj = GS__11[0];
  obj = opt_QUERY__QUERY(obj, tnode());
  (obj["source"] = ast.source, obj["line"] = ast.line, obj["column"] = ast.column);
  return obj;
};
//fn: [txTree] in file: compiler.ky,line: 255
const txTree = function(root, env) {
  let ret = node_QUOTE(root);
  let GS__12 = root;
  for (let GS__14 = 0, GS__13 = false, ____break = false; ((!____break) && ((!GS__13) && (GS__14 < GS__12.length))); GS__14 = (GS__14 + 1)) {
    let r = GS__12[GS__14];
    let t = tx_STAR(r, env);
    if ( (!true) ) {
      GS__13 = true;
    } else {
      null;
    }
    if ( ((!GS__13) && some_QUERY(t)) ) {
      ret.add([
        t,
        "\n"
      ]);
    }
  }
  null;
  return ret;
};
//fn: [txForm] in file: compiler.ky,line: 262
const txForm = function(expr, env) {
  if (Array.isArray(expr)) {
    expr.forEach(function(a, i, arr) {
      return arr[i] = tx_STAR(a, env);
    });
  }
  return expr;
};
//fn: [txAtom] in file: compiler.ky,line: 268
const txAtom = function(a) {
  return (lambda_DASH_arg_QUERY(a) ?
    [
      "____args[",
      [
        a
      ].join(""),
      "]"
    ].join("") :
    (keyword_QUERY(a) ?
      [
        "\"",
        parser.jsid([
          a
        ].join("")),
        "\""
      ].join("") :
      (symbol_QUERY(a) ?
        parser.jsid([
          a
        ].join("")) :
        ((a === null) ?
          "null" :
          (primitive_QUERY(a) ?
            (function() {
              a = a.value;
              return ((typeof (a) === "string") ?
                std.wrap_DASH_str(a) :
                ((a === null) ?
                  "null" :
                  (true ?
                    [
                      a
                    ].join("") :
                    null)));
            }).call(this) :
            ((typeof (a) === "string") ?
              std.wrap_DASH_str(a) :
              (true ?
                parser.jsid([
                  a
                ].join("")) :
                null)))))));
};
//fn: [tx*] in file: compiler.ky,line: 287
const tx_STAR = function(x) {
  let GS__15 = Array.prototype.slice.call(arguments, 1);
  let env = GS__15[0];
  return (Array.isArray(x) ?
    txPairs(x, env) :
    txAtom(x));
};
//fn: [gcmd] in file: compiler.ky,line: 290
const gcmd = function(ast) {
  return (map_QUERY(ast) ?
    "hashmap" :
    (vector_QUERY(ast) ?
      "vec" :
      (list_QUERY(ast) ?
        "list" :
        ((Array.isArray(ast) && (!Array.isArray(ast[0]))) ?
          [
            ast[0]
          ].join("") :
          (true ?
            "" :
            null)))));
};
//fn: [quoteSingle] in file: compiler.ky,line: 298
const quoteSingle = function(a) {
  return (keyword_QUERY(a) ?
    [
      maybeStripStdlib("kirbystdlibref.keyword"),
      "(\":",
      a,
      "\")"
    ].join("") :
    (symbol_QUERY(a) ?
      [
        maybeStripStdlib("kirbystdlibref.symbol"),
        "(\"",
        a,
        "\")"
      ].join("") :
      (primitive_QUERY(a) ?
        (function() {
          a = a.value;
          return ((typeof (a) === "string") ?
            std.wrap_DASH_str(a) :
            ((a === null) ?
              "null" :
              (true ?
                [
                  a
                ].join("") :
                null)));
        }).call(this) :
        ((typeof (a) === "string") ?
          std.wrap_DASH_str(a) :
          (true ?
            [
              a
            ].join("") :
            null)))));
};
//fn: [quote!] in file: compiler.ky,line: 315
const quote_BANG = function(ast, env) {
  assertInfo(ast);
  return (Array.isArray(ast) ?
    (map_QUERY(ast) ?
      quoteMap(ast, env) :
      quoteBlock(ast, env)) :
    quoteSingle(ast));
};
//fn: [quoteMap] in file: compiler.ky,line: 324
const quoteMap = function(ast, env) {
  let comma = "";
  let ret = node_QUOTE(ast);
  for (let i = 0, sz = kirbystdlibref.count(ast), ____break = false; ((!____break) && (i < sz)); i = (i + 2)) {
    if ( (i > 0) ) {
      ret.add(",");
    }
    ret.add([
      quote_BANG(ast[i], env),
      " : ",
      quote_BANG(ast[i + 1], env)
    ]);
  }
  if ( (!(0 === kirbystdlibref.count(ast))) ) {
    comma = ",";
  } else {
    null;
  }
  return wrap(ret, [
    "[",
    "symbol(\"hashmap\")",
    comma
  ], "]");
};
//fn: [quoteBlock] in file: compiler.ky,line: 336
const quoteBlock = function(ast, env) {
  let ret = node_QUOTE(ast);
  for (let i = 0, sz = kirbystdlibref.count(ast), ____break = false; ((!____break) && (i < sz)); i = (i + 1)) {
    if ( (i > 0) ) {
      ret.add(",");
    }
    ret.add(quote_BANG(ast[i], env));
  }
  return wrap(ret, "[", "]");
};
//fn: [txPairs] in file: compiler.ky,line: 345
const txPairs = function(ast, env) {
  let stmtQ = stmt_QUERY(ast);
  let e1 = ast[0];
  let ret = node_QUOTE(ast);
  let cmd = gcmd(ast);
  let orig = ast;
  let op = null;
  let tmp = null;
  let mc = eng.getMacro(cmd);
  if ( ((!(typeof (ret.line) === "number")) && (!simple_QUERY(e1)) && (typeof (e1.line) === "number")) ) {
    xfi(e1, ret);
    xfi(e1, ast);
  }
  if (mc) {
    (ast = eng.expandMacro(ast, env, mc), ast = xfi(orig, exprHint(ast, (!stmtQ))), cmd = gcmd(ast));
  }
  if (parser.REGEX.int.test(cmd)) {
    if ( (!(cmd.startsWith("+") || cmd.startsWith("-"))) ) {
      cmd = [
        "+",
        cmd
      ].join("");
    } else {
      null;
    }
    (ast = xfi(ast, [
      symbol(cmd.charAt(0)),
      ast[1],
      parseInt(cmd.slice(1))
    ]), cmd = [
      ast[0]
    ].join(""));
  }
  op = SPEC_DASH_OPS[cmd];
  if ( (cmd == "with-meta") ) {
    ret.add(tx_STAR(meta_QUERY__QUERY(ast, env)[1], env));
  } else {
    if (cmd.startsWith(".-")) {
      ret.add([
        tx_STAR(ast[1], env),
        ".",
        tx_STAR(symbol(cmd.slice(2)), env)
      ]);
    } else {
      if (cmd.startsWith(".@")) {
        tmp = (cmd.startsWith(".@+") ?
          [
            3,
            true
          ] :
          [
            2,
            false
          ]);
        ret.add([
          tx_STAR(ast[1], env),
          "[",
          cmd.slice(tmp[0]),
          (tmp[1] ?
            "+1]" :
            "]")
        ]);
      } else {
        if (cmd.startsWith(".")) {
          ret.add([
            tx_STAR(ast[1], env),
            cmd,
            "("
          ]);
          for (let n = 2, sz = kirbystdlibref.count(ast), ____break = false; ((!____break) && (n < sz)); n = (n + 1)) {
            if ( (n !== 2) ) {
              ret.add(",");
            }
            ret.add(tx_STAR(ast[n], env));
          }
          ret.add(")");
        } else {
          if (some_QUERY(op)) {
            ret = op(ast, env);
          } else {
            if (true) {
              if (pairs_QUERY(ast)) {
                txForm(ast, env);
                cmd = [
                  ast[0]
                ].join("");
              } else {
                cmd = tx_STAR(ast, env);
              }
              if ( (!cmd) ) {
                error_BANG("empty_DASH_form", ast);
              } else {
                null;
              }
              cmd = maybeStripStdlib(cmd);
              if (pairs_QUERY(ast)) {
                ret.add([
                  (testre_QUERY(parser.REGEX.func, cmd) ?
                    [
                      "(",
                      cmd,
                      ")"
                    ].join("") :
                    cmd),
                  "(",
                  ast.slice(1).join(","),
                  ")"
                ]);
              } else {
                ret.add(cmd);
              }
            }
          }
        }
      }
    }
  }
  return node_QUOTE(ast, ret);
};
//fn: [writeDoc] in file: compiler.ky,line: 410
//Convert to jsdoc
const writeDoc = function(doc) {
  let out = [];
  if (doc) {
    std.unwrap_DASH_str(doc).split("\n").forEach(function() {
      let ____args = Array.prototype.slice.call(arguments);
      return (function() {
        let s = [
          ____args[0]
        ].join("").trim();
        return (not_DASH_empty(s) ?
          conj_BANG(out, [
            "//",
            s,
            "\n"
          ].join("")) :
          null);
      }).call(this);
    });
  }
  return out;
};
//fn: [txDo] in file: compiler.ky,line: 420
const txDo = function(ast, env) {
  let GS__16 = Array.prototype.slice.call(arguments, 2);
  let return_QUERY = GS__16[0];
  let stmtQ = stmt_QUERY(ast);
  let ret = node_QUOTE(ast);
  let e = null;
  let end = (ast.length - 1);
  return_QUERY = (stmtQ ?
    false :
    opt_QUERY__QUERY(return_QUERY, true));
  for (let i = 0, ____break = false; ((!____break) && (i < end)); i = (i + 1)) {
    e = exprHint(ast[i], false);
    ret.add([
      tx_STAR(e, env),
      ";\n"
    ]);
  }
  if ( (end >= 0) ) {
    (e = exprHint(ast[end], (!stmtQ)), e = tx_STAR(e, env));
    ret.add(((!return_QUERY) ?
      [
        e,
        ";\n"
      ] :
      [
        "return ",
        e,
        ";\n"
      ]));
  }
  return ret;
};
//fn: [meta??] in file: compiler.ky,line: 438
const meta_QUERY__QUERY = function(obj, env) {
  let mobj = null;
  if ( (Array.isArray(obj) && (3 === kirbystdlibref.count(obj)) && ("with-meta" == [
      obj[0]
    ].join(""))) ) {
    mobj = evalMeta(obj[2], env);
    obj[1]["____meta"] = mobj;
    obj = obj[1];
  }
  return [
    mobj,
    obj
  ];
};
//fn: [fmtRegoSpecOps] in file: compiler.ky,line: 450
const fmtRegoSpecOps = function(alias, fname) {
  return [
    parser.jsid("SPEC_DASH_OPS"),
    "[\"",
    alias,
    "\"] = ",
    fname
  ].join("");
};
//fn: [fmtSpecOps] in file: compiler.ky,line: 454
const fmtSpecOps = function(fname, attrs) {
  let ks = (attrs["opcode"] || []);
  let out = ks.map(function() {
    let ____args = Array.prototype.slice.call(arguments);
    return fmtRegoSpecOps([
      ____args[0]
    ].join(""), fname);
  }).join(";\n");
  return (not_DASH_empty(ks) ?
    [
      out,
      ";\n"
    ].join("") :
    out);
};
//fn: [writeFuncInfo] in file: compiler.ky,line: 461
const writeFuncInfo = function(fname, ast) {
  let file = (ast.source ?
    ast.source.slice((ast.source.lastIndexOf("/") + 1)) :
    "?");
  let s = [
    "//fn: [",
    fname,
    "] in file: ",
    file,
    ",line: ",
    (ast.line || "?"),
    "\n"
  ].join("");
  let len = s.length;
  if ( (len < 80) ) {
    len = 80;
  }
  [
    "/".repeat(len),
    "\n"
  ].join("");
  return s;
};
var icache = [];
//fn: [includeFile] in file: compiler.ky,line: 476
const includeFile = function(fname, ast) {
  return (contains_QUERY(icache, fname) ?
    node_QUOTE(ast) :
    (function() {
      let src = fs.readFileSync(fname, "utf-8");
      conj_BANG(icache, fname);
      return txTree(parser.parse(src, fname), eng.globalEnv());
    }).call(this));
};
//fn: [evalMeta] in file: compiler.ky,line: 484
const evalMeta = function(ast, env) {
  let x = (Array.isArray(ast) ?
    ast :
    (keyword_QUERY(ast) ?
      into_BANG("map", [
        ast,
        true
      ]) :
      (symbol_QUERY(ast) ?
        into_BANG("map", [
          keyword(":tag"),
          ast
        ]) :
        (true ?
          error_BANG("invalid_DASH_meta", ast) :
          null))));
  let v = eng.compute(x, env);
  return v;
};
//fn: [maybeStripStdlib] in file: compiler.ky,line: 499
const maybeStripStdlib = function(cmd) {
  let lib = "kirbystdlibref.";
  let nsp = eng.globalEnv().peekNSP();
  cmd = [
    cmd
  ].join("");
  return ((cmd.startsWith(lib) && (nsp === "czlab.kirby.stdlib")) ?
    cmd.slice(lib.length) :
    cmd);
};
//fn: [assertArity] in file: compiler.ky,line: 508
const assertArity = function(kond, ast) {
  if ( (!kond) ) {
    error_BANG("invalid_DASH_arity", ast);
  } else {
    null;
  }
  return assertInfo(ast);
};
//fn: [assertInfo] in file: compiler.ky,line: 513
const assertInfo = function(ast) {
  return ((false && ast && (!simple_QUERY(ast)) && (!(typeof (ast.line) === "number"))) ?
    error_BANG("no_DASH_sourcemap_DASH_info", ast) :
    null);
};
//fn: [sf-quote] in file: compiler.ky,line: 522
const sf_DASH_quote = function(ast, env) {
  assertArity((kirbystdlibref.count(ast) === 2), ast);
  let ret = node_QUOTE(ast);
  return wrap(ret, null, quote_BANG(ast[1], env));
};
SPEC_DASH_OPS["quote"] = sf_DASH_quote;
//fn: [sf-deftype] in file: compiler.ky,line: 529
//Define a JS Class
const sf_DASH_deftype = function(ast, env) {
  assertArity((kirbystdlibref.count(ast) >= 4), ast);
  let ret = node_QUOTE(ast);
  let mtd,
    pos,
    n,
    m;
  let private_QUERY = [
    ast[0]
  ].join("").endsWith("-");
  let czname = tx_STAR(ast[1], env);
  let par = ast[2][0];
  let czargs = ast[3];
  let GS__17 = ((typeof (ast[4]) === "string") ?
    [
      ast[4],
      Array.prototype.slice.call(ast, 5)
    ] :
    [
      null,
      Array.prototype.slice.call(ast, 4)
    ]);
  let doc = GS__17[0];
  let mtds = GS__17[1];
  ret.add([
    "class ",
    czname
  ]);
  if (par) {
    ret.add([
      " extends ",
      tx_STAR(par, env)
    ]);
  }
  ret.add(" {\n");
  let GS__18 = mtds;
  for (let GS__20 = 0, GS__19 = false, ____break = false; ((!____break) && ((!GS__19) && (GS__20 < GS__18.length))); GS__20 = (GS__20 + 1)) {
    let m = GS__18[GS__20];
    null;
    if ( (!true) ) {
      GS__19 = true;
    } else {
      null;
    }
    if ( ((!GS__19) && true) ) {
      (mtd = kirbystdlibref.symbol("method"), pos = ((typeof (m[1]) === "string") ?
        3 :
        2));
      xfi(m[0], mtd);
      xfi(m[0], m);
      if ( (([
          m[0]
        ].join("") == "constructor") && not_DASH_empty(czargs)) ) {
        for (let x = 0, sz = kirbystdlibref.count(czargs), ____break = false; ((!____break) && (x < sz)); x = (x + 2)) {
          czargs[x] = [
            czargs[x]
          ].join("");
        }
        m.splice(pos, 0, [
          kirbystdlibref.symbol("set-in!"),
          kirbystdlibref.symbol("this")
        ].concat(czargs));
      }
      m.unshift(mtd);
      ret.add([
        sf_DASH_func(m, env, false),
        "\n"
      ]);
    }
  }
  null;
  ret.add("}\n");
  if (doc) {
    ret.prepend(writeDoc(doc));
  }
  if ( ((!private_QUERY) && (1 === eng.globalEnv().countNSPCache())) ) {
    _STAR_externs_STAR[czname] = czname;
  }
  return ret;
};
SPEC_DASH_OPS["deftype"] = sf_DASH_deftype;
SPEC_DASH_OPS["deftype-"] = sf_DASH_deftype;
//fn: [sf-compOp] in file: compiler.ky,line: 571
const sf_DASH_compOp = function(ast, env) {
  assertArity(((kirbystdlibref.count(ast) >= 3) && (!(0 === kirbystdlibref.modulo(kirbystdlibref.count(ast), 2)))), ast);
  let ret = node_QUOTE(ast);
  let cmd = [
    ast[0]
  ].join("");
  if ( (cmd == "not=") ) {
    ast[0] = kirbystdlibref.symbol("!==");
  } else {
    if ( (cmd == "=") ) {
      ast[0] = kirbystdlibref.symbol("===");
    } else {
      null;
    }
  }
  for (let i = 1, op = tx_STAR(ast[0], env), ____break = false; ((!____break) && (i < (ast.length - 1))); i = (i + 1)) {
    if ( (i !== 1) ) {
      ret.add(" && ");
    }
    ret.add([
      tx_STAR(ast[i], env),
      " ",
      op,
      " ",
      tx_STAR(ast[i + 1], env)
    ]);
  }
  return wrap(ret, "(", ")");
};
SPEC_DASH_OPS["not="] = sf_DASH_compOp;
SPEC_DASH_OPS["!="] = sf_DASH_compOp;
SPEC_DASH_OPS["=="] = sf_DASH_compOp;
SPEC_DASH_OPS["="] = sf_DASH_compOp;
SPEC_DASH_OPS[">"] = sf_DASH_compOp;
SPEC_DASH_OPS[">="] = sf_DASH_compOp;
SPEC_DASH_OPS["<"] = sf_DASH_compOp;
SPEC_DASH_OPS["<="] = sf_DASH_compOp;
//fn: [sf-arithOp] in file: compiler.ky,line: 588
const sf_DASH_arithOp = function(ast, env) {
  assertArity((kirbystdlibref.count(ast) >= 2), ast);
  let e1 = tx_STAR(ast[0], env);
  let cmd = [
    e1
  ].join("");
  let ret = node_QUOTE(ast);
  if ( (cmd == "bitwise-zrshift") ) {
    cmd = ">>>";
  } else {
    if ( (cmd == "bitwise-rshift") ) {
      cmd = ">>";
    } else {
      if ( (cmd == "bitwise-lshift") ) {
        cmd = "<<";
      } else {
        if ( (cmd == "bitwise-and") ) {
          cmd = "&";
        } else {
          if ( (cmd == "bitwise-or") ) {
            cmd = "|";
          } else {
            if ( (cmd == "bitwise-not") ) {
              cmd = "~";
            } else {
              if ( (cmd == "bitwise-xor") ) {
                cmd = "^";
              } else {
                if ( (cmd == "rem") ) {
                  cmd = "%";
                } else {
                  if ( (cmd == "div") ) {
                    cmd = "/";
                  } else {
                    if ( (cmd == "and") ) {
                      cmd = "&&";
                    } else {
                      if ( (cmd == "or") ) {
                        cmd = "||";
                      } else {
                        if ( (cmd == "exp") ) {
                          cmd = "**";
                        } else {
                          null;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if ( (("-" == cmd) && (2 === kirbystdlibref.count(ast))) ) {
    ret.add("-");
  }
  for (let i = 1, sz = kirbystdlibref.count(ast), ____break = false; ((!____break) && (i < sz)); i = (i + 1)) {
    if ( (sz > 2) ) {
      if ( (i > 1) ) {
        ret.add(cmd);
      }
    }
    ret.add(tx_STAR(ast[i], env));
  }
  return wrap(ret, "(", ")");
};
SPEC_DASH_OPS["bitwise-lshift"] = sf_DASH_arithOp;
SPEC_DASH_OPS["bitwise-rshift"] = sf_DASH_arithOp;
SPEC_DASH_OPS["bitwise-zrshift"] = sf_DASH_arithOp;
SPEC_DASH_OPS["+"] = sf_DASH_arithOp;
SPEC_DASH_OPS["-"] = sf_DASH_arithOp;
SPEC_DASH_OPS["*"] = sf_DASH_arithOp;
SPEC_DASH_OPS["div"] = sf_DASH_arithOp;
SPEC_DASH_OPS["mod"] = sf_DASH_arithOp;
SPEC_DASH_OPS["or"] = sf_DASH_arithOp;
SPEC_DASH_OPS["and"] = sf_DASH_arithOp;
SPEC_DASH_OPS["exp"] = sf_DASH_arithOp;
SPEC_DASH_OPS["rem"] = sf_DASH_arithOp;
SPEC_DASH_OPS["bitwise-and"] = sf_DASH_arithOp;
SPEC_DASH_OPS["bitwise-or"] = sf_DASH_arithOp;
SPEC_DASH_OPS["bitwise-not"] = sf_DASH_arithOp;
SPEC_DASH_OPS["bitwise-xor"] = sf_DASH_arithOp;
//fn: [sf-do] in file: compiler.ky,line: 620
const sf_DASH_do = function(ast, env) {
  assertArity(true, ast);
  let ret = node_QUOTE(ast);
  let stmtQ = stmt_QUERY(ast);
  ret.add(txDo(exprHint(xfi(ast, ast.slice(1)), (!stmtQ)), env, (!stmtQ)));
  return (stmtQ ?
    wrap(ret, null, "") :
    wrap(ret, "(function() {\n", "}).call(this)"));
};
SPEC_DASH_OPS["do"] = sf_DASH_do;
//fn: [sf-case] in file: compiler.ky,line: 633
const sf_DASH_case = function(ast, env) {
  assertArity((kirbystdlibref.count(ast) >= 4), ast);
  let stmtQ = stmt_QUERY(ast);
  let ret = node_QUOTE(ast);
  let tst = ast[1];
  let brk = ";\nbreak;\n";
  let gs = [
    gensym("C__")
  ].join("");
  let e,
    t,
    c,
    dft;
  if ( (!(0 === kirbystdlibref.modulo(kirbystdlibref.count(ast), 2))) ) {
    dft = pop_BANG(ast)[0];
  }
  for (let i = 2, sz = kirbystdlibref.count(ast), ____break = false; ((!____break) && (i < sz)); i = (i + 2)) {
    (e = ast[i], c = ast[i + 1]);
    if (pairs_QUERY(e)) {
      for (let j = 0, sz = kirbystdlibref.count(e), ____break = false; ((!____break) && (j < sz)); j = (j + 1)) {
        ret.add([
          "case ",
          tx_STAR(e[j], env),
          ":\n"
        ]);
        if ( (j === (e.length - 1)) ) {
          ret.add([
            gs,
            "=",
            tx_STAR(c, env),
            brk
          ]);
        }
      }
    } else {
      ret.add([
        "case ",
        tx_STAR(e, env),
        ":\n",
        gs,
        "=",
        tx_STAR(c, env),
        brk
      ]);
    }
  }
  if (dft) {
    ret.add([
      "default:\n",
      gs,
      "=",
      tx_STAR(dft, env),
      brk
    ]);
  }
  wrap(ret, [
    "switch (",
    tx_STAR(tst, env),
    ") {\n"
  ], "}");
  return (stmtQ ?
    wrap(ret, [
      "let ",
      gs,
      ";\n"
    ], "") :
    wrap(ret, [
      "(function() { let ",
      gs,
      ";\n"
    ], [
      "return ",
      gs,
      ";}).call(this)"
    ]));
};
SPEC_DASH_OPS["case"] = sf_DASH_case;
//fn: [sf-vardefs] in file: compiler.ky,line: 667
const sf_DASH_vardefs = function(ast, env) {
  assertArity((kirbystdlibref.count(ast) >= 2), ast);
  let ret = node_QUOTE(ast);
  let cmd = [
    ast[0]
  ].join("");
  let keys = {};
  let private_QUERY = (cmd !== "def~");
  if (cmd.startsWith("def")) {
    cmd = "var";
  } else {
    cmd = "let";
  }
  for (let i = 1, s = null, sz = kirbystdlibref.count(ast), ____break = false; ((!____break) && (i < sz)); i = (i + 1)) {
    s = tx_STAR(ast[i], env);
    keys[s] = null;
    if ( (i > 1) ) {
      ret.add(",");
    }
    ret.add(s);
  }
  wrap(ret, [
    cmd,
    " "
  ].join(""), ";\n");
  if ( ((!private_QUERY) && (1 === eng.globalEnv().countNSPCache())) ) {
    let GS__21 = keys;
    Object.entries(GS__21).forEach(function(e) {
      return (function(v, k) {
        return _STAR_externs_STAR[k] = k;
      })(e[1], e[0]);
    });
  }
  return ret;
};
SPEC_DASH_OPS["def~-"] = sf_DASH_vardefs;
SPEC_DASH_OPS["def~"] = sf_DASH_vardefs;
SPEC_DASH_OPS["var~"] = sf_DASH_vardefs;
//fn: [sf-var] in file: compiler.ky,line: 689
const sf_DASH_var = function(ast, env) {
  assertArity((!(0 === kirbystdlibref.modulo(kirbystdlibref.count(ast), 2))), ast);
  let ret = node_QUOTE(ast);
  let cmd = [
    ast[0]
  ].join("");
  let keys = [];
  let tmp = null;
  let vname = null;
  let private_QUERY = ((cmd !== "const") && (cmd !== "def"));
  let rval,
    rc,
    lhs,
    rhs;
  cmd = (cmd.startsWith("const") ?
    "const" :
    ((cmd == "var") ?
      "let" :
      "var"));
  for (let i = 1, sz = kirbystdlibref.count(ast), ____break = false; ((!____break) && (i < sz)); i = (i + 2)) {
    (lhs = ast[i], rhs = ast[i + 1], rval = tx_STAR(rhs, env));
    if (symbol_QUERY(lhs)) {
      (lhs = tx_STAR(lhs, env), tmp = [
        cmd,
        " ",
        lhs,
        "=",
        rval,
        ";\n"
      ]);
      conj_BANG(keys, lhs);
      ret.add(tmp);
    } else {
      (out = node_QUOTE(ast), rhs = destruct_STAR(lhs, out, env, ast));
      ret.add([
        "let ",
        tx_STAR(rhs, env),
        "=",
        rval,
        ";\n",
        [
          out
        ].join("")
      ]);
    }
  }
  if ( ((!private_QUERY) && (1 === eng.globalEnv().countNSPCache())) ) {
    keys.forEach(function(k) {
      return _STAR_externs_STAR[k] = k;
    });
  }
  return ret;
};
SPEC_DASH_OPS["const-"] = sf_DASH_var;
SPEC_DASH_OPS["const"] = sf_DASH_var;
SPEC_DASH_OPS["def-"] = sf_DASH_var;
SPEC_DASH_OPS["def"] = sf_DASH_var;
SPEC_DASH_OPS["var"] = sf_DASH_var;
//fn: [sf-inst?] in file: compiler.ky,line: 726
const sf_DASH_inst_QUERY = function(ast, env) {
  assertArity((kirbystdlibref.count(ast) === 3), ast);
  let ret = node_QUOTE(ast);
  return wrap(ret, null, [
    "(",
    tx_STAR(ast[2], env),
    " instanceof ",
    tx_STAR(ast[1], env),
    ")"
  ]);
};
SPEC_DASH_OPS["inst?"] = sf_DASH_inst_QUERY;
//fn: [sf-delete] in file: compiler.ky,line: 734
const sf_DASH_delete = function(ast, env) {
  assertArity(((kirbystdlibref.count(ast) >= 2) && (kirbystdlibref.count(ast) < 4)), ast);
  let ret = node_QUOTE(ast);
  ret.add([
    "delete ",
    tx_STAR(ast[1], env)
  ]);
  if ( (kirbystdlibref.count(ast) > 2) ) {
    ret.add([
      "[",
      tx_STAR(ast[2], env),
      "]"
    ]);
  }
  return ret;
};
SPEC_DASH_OPS["delete!"] = sf_DASH_delete;
//fn: [sf-new] in file: compiler.ky,line: 745
const sf_DASH_new = function(ast, env) {
  assertArity((kirbystdlibref.count(ast) >= 2), ast);
  let ret = node_QUOTE(ast);
  return wrap(ret, "new ", tx_STAR(xfi(ast, ast.slice(1)), env));
};
SPEC_DASH_OPS["new"] = sf_DASH_new;
//fn: [sf-throw] in file: compiler.ky,line: 752
const sf_DASH_throw = function(ast, env) {
  assertArity((kirbystdlibref.count(ast) >= 2), ast);
  let ret = node_QUOTE(ast);
  let stmtQ = stmt_QUERY(ast);
  ret.add([
    "throw ",
    tx_STAR(xfi(ast, ast[1]), env)
  ]);
  if ( (!stmtQ) ) {
    wrap(ret, "(function (){ ", ";}).call(this)");
  } else {
    null;
  }
  return ret;
};
SPEC_DASH_OPS["throw"] = sf_DASH_throw;
//fn: [sf-x-opop] in file: compiler.ky,line: 764
const sf_DASH_x_DASH_opop = function(ast, env) {
  assertArity((kirbystdlibref.count(ast) === 2), ast);
  let ret = node_QUOTE(ast);
  let cmd = [
    ast[0]
  ].join("");
  let a2 = tx_STAR(ast[1], env);
  if (cmd.endsWith("$")) {
    ret.add([
      a2,
      cmd.slice(0, -1)
    ]);
  } else {
    ret.add([
      cmd,
      a2
    ]);
  }
  return ret;
};
SPEC_DASH_OPS["++"] = sf_DASH_x_DASH_opop;
SPEC_DASH_OPS["--"] = sf_DASH_x_DASH_opop;
SPEC_DASH_OPS["++$"] = sf_DASH_x_DASH_opop;
SPEC_DASH_OPS["--$"] = sf_DASH_x_DASH_opop;
//fn: [sf-x-eq] in file: compiler.ky,line: 775
const sf_DASH_x_DASH_eq = function(ast, env) {
  assertArity((kirbystdlibref.count(ast) === 3), ast);
  let cmd = [
    ast[0]
  ].join("");
  let ret = node_QUOTE(ast);
  if ( (cmd == "bitwise-zrshift=") ) {
    cmd = ">>>=";
  } else {
    if ( (cmd == "bitwise-rshift=") ) {
      cmd = ">>=";
    } else {
      if ( (cmd == "bitwise-lshift=") ) {
        cmd = "<<=";
      } else {
        if ( (cmd == "bitwise-xor=") ) {
          cmd = "^=";
        } else {
          if ( (cmd == "bitwise-or=") ) {
            cmd = "|=";
          } else {
            if ( (cmd == "bitwise-and=") ) {
              cmd = "&=";
            } else {
              if ( (cmd == "div=") ) {
                cmd = "/=";
              } else {
                if ( (cmd == "rem=") ) {
                  cmd = "%=";
                } else {
                  if ( (cmd == "exp=") ) {
                    cmd = "**=";
                  } else {
                    null;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return wrap(ret, null, [
    tx_STAR(ast[1], env),
    " ",
    cmd,
    " ",
    tx_STAR(ast[2], env)
  ]);
};
SPEC_DASH_OPS["+="] = sf_DASH_x_DASH_eq;
SPEC_DASH_OPS["-="] = sf_DASH_x_DASH_eq;
SPEC_DASH_OPS["*="] = sf_DASH_x_DASH_eq;
SPEC_DASH_OPS["div="] = sf_DASH_x_DASH_eq;
SPEC_DASH_OPS["rem="] = sf_DASH_x_DASH_eq;
SPEC_DASH_OPS["exp="] = sf_DASH_x_DASH_eq;
SPEC_DASH_OPS["bitwise-and="] = sf_DASH_x_DASH_eq;
SPEC_DASH_OPS["bitwise-or="] = sf_DASH_x_DASH_eq;
SPEC_DASH_OPS["bitwise-xor="] = sf_DASH_x_DASH_eq;
SPEC_DASH_OPS["bitwise-lshift="] = sf_DASH_x_DASH_eq;
SPEC_DASH_OPS["bitwise-rshift="] = sf_DASH_x_DASH_eq;
SPEC_DASH_OPS["bitwise-zrshift="] = sf_DASH_x_DASH_eq;
//fn: [sf-set-in] in file: compiler.ky,line: 805
const sf_DASH_set_DASH_in = function(ast, env) {
  assertArity((0 === kirbystdlibref.modulo(kirbystdlibref.count(ast), 2)), ast);
  let ret = node_QUOTE(ast);
  let more = false;
  let obj = tx_STAR(ast[1], env);
  for (let i = 2, sz = kirbystdlibref.count(ast), ____break = false; ((!____break) && (i < sz)); i = (i + 2)) {
    if ( (i > 2) ) {
      ret.add(",");
      more = true;
    }
    ret.add([
      obj,
      "[",
      tx_STAR(xfi(ast, ast[i]), env),
      "]",
      "=",
      tx_STAR(xfi(ast, ast[i + 1]), env)
    ]);
  }
  if (more) {
    wrap(ret, "(", ")");
  }
  return ret;
};
SPEC_DASH_OPS["set-in!"] = sf_DASH_set_DASH_in;
SPEC_DASH_OPS["=>>"] = sf_DASH_set_DASH_in;
//fn: [sf-set] in file: compiler.ky,line: 822
const sf_DASH_set = function(ast, env) {
  assertArity((!(0 === kirbystdlibref.modulo(kirbystdlibref.count(ast), 2))), ast);
  let more = false;
  let ret = node_QUOTE(ast);
  for (let i = 1, sz = kirbystdlibref.count(ast), ____break = false; ((!____break) && (i < sz)); i = (i + 2)) {
    if ( (i > 1) ) {
      ret.add(",");
      more = true;
    }
    ret.add([
      tx_STAR(ast[i], env),
      "=",
      tx_STAR(xfi(ast, ast[i + 1]), env)
    ]);
  }
  if (more) {
    wrap(ret, "(", ")");
  }
  return ret;
};
SPEC_DASH_OPS["set!"] = sf_DASH_set;
SPEC_DASH_OPS["=>"] = sf_DASH_set;
//fn: [sf-fn] in file: compiler.ky,line: 837
//(fn [x y] ...)
const sf_DASH_fn = function(ast, env) {
  assertArity((kirbystdlibref.count(ast) >= 2), ast);
  let ret = node_QUOTE(ast);
  let fargs = null;
  let body = xfi(ast, Array.prototype.slice.call(ast, 2));
  let GS__22 = meta_QUERY__QUERY(ast[1], env);
  let args = GS__22[1];
  if ( (!Array.isArray(args)) ) {
    error_BANG("invalid_DASH_fargs", ast);
  } else {
    null;
  }
  fargs = doFuncArgs(xfi(ast, args), ast, env);
  return wrap(ret, null, [
    "function (",
    fargs[0],
    ") {\n",
    fargs[1],
    txDo(body, env, true),
    "}"
  ]);
};
SPEC_DASH_OPS["fn"] = sf_DASH_fn;
//fn: [sf-func] in file: compiler.ky,line: 854
const sf_DASH_func = function(ast, env) {
  assertArity((kirbystdlibref.count(ast) >= 2), ast);
  let private_QUERY = [
    ast[0]
  ].join("").endsWith("-");
  let mtd_QUERY = ([
      ast[0]
    ].join("") == "method");
  let fname0 = [
    ast[1]
  ].join("");
  let fname = tx_STAR(ast[1], env);
  let dot_QUERY = contains_QUERY(fname, ".");
  let fargs = null;
  let ret = node_QUOTE(ast);
  let GS__23 = ((typeof (ast[2]) === "string") ?
    [
      ast[2],
      3
    ] :
    [
      null,
      2
    ]);
  let doc = GS__23[0];
  let pargs = GS__23[1];
  let body = xfi(ast, Array.prototype.slice.call(ast, (pargs + 1)));
  let GS__24 = meta_QUERY__QUERY(ast[pargs], env);
  let hints = GS__24[0];
  let args = GS__24[1];
  if ( (!Array.isArray(args)) ) {
    error_BANG("invalid_DASH_fargs", ast);
  } else {
    null;
  }
  fargs = doFuncArgs(xfi(ast, args), ast, env);
  hints = (hints || {});
  if (mtd_QUERY) {
    if (hints.static) {
      ret.add("static ");
    }
    ret.add([
      fname,
      " ("
    ]);
    if ( (fname == "constructor") ) {
      conj_BANG(body, kirbystdlibref.symbol("this"));
    }
  } else {
    if (dot_QUERY) {
      ret.add([
        fname,
        " = function ("
      ]);
    } else {
      if (true) {
        ret.add([
          "const ",
          fname,
          " = function ("
        ]);
      }
    }
  }
  ret.add([
    fargs[0],
    ") {\n",
    fargs[1],
    txDo(body, env, true),
    "};\n"
  ]);
  if (not_DASH_empty(hints)) {
    ret.add(fmtSpecOps(fname, hints));
  }
  if (doc) {
    ret.prepend(writeDoc(doc));
  }
  ret.prepend(writeFuncInfo(fname0, ast));
  if ( ((!private_QUERY) && (!dot_QUERY) && (!mtd_QUERY) && (1 === eng.globalEnv().countNSPCache())) ) {
    _STAR_externs_STAR[fname] = fname;
  }
  return ret;
};
SPEC_DASH_OPS["defn"] = sf_DASH_func;
SPEC_DASH_OPS["defn-"] = sf_DASH_func;
//fn: [sf-try] in file: compiler.ky,line: 896
const sf_DASH_try = function(ast, env) {
  assertArity((kirbystdlibref.count(ast) >= 2), ast);
  let stmtQ = stmt_QUERY(ast);
  let sz = kirbystdlibref.count(ast);
  let ret = node_QUOTE(ast);
  let t,
    f,
    c;
  f = last(ast);
  if ( (Array.isArray(f) && ("finally" == [
      f[0]
    ].join(""))) ) {
    pop_BANG(ast);
    sz = kirbystdlibref.count(ast);
    xfi(f[0], f);
  } else {
    f = null;
  }
  c = null;
  if ( (sz > 1) ) {
    c = ast[(sz - 1)];
  }
  if ( (Array.isArray(c) && ("catch" == [
      c[0]
    ].join(""))) ) {
    if ( ((kirbystdlibref.count(c) < 2) || (!symbol_QUERY(c[1]))) ) {
      error_BANG("invalid_DASH_catch", ast);
    }
    pop_BANG(ast);
    xfi(c[0], c);
  } else {
    c = null;
  }
  if ( ((f === null) && (c === null)) ) {
    error_BANG("invalid_DASH_try", ast);
  }
  ret.add([
    "try {\n",
    txDo(exprHint(xfi(ast, ast.slice(1)), (!stmtQ)), env),
    "\n}"
  ]);
  if (c) {
    t = c[1];
    ret.add([
      [
        "catch (",
        tx_STAR(t, env),
        ") {\n"
      ].join(""),
      txDo(exprHint(xfi(c, Array.prototype.slice.call(c, 2)), (!stmtQ)), env),
      ";\n}\n"
    ]);
  }
  if (f) {
    ret.add([
      "finally {\n",
      txDo(exprHint(xfi(f, f.slice(1)), false), env, false),
      ";\n}\n"
    ]);
  }
  if ( (!stmtQ) ) {
    wrap(ret, "(function(){\n", "}).call(this)");
  } else {
    null;
  }
  return ret;
};
SPEC_DASH_OPS["try"] = sf_DASH_try;
//fn: [sf-if] in file: compiler.ky,line: 940
const sf_DASH_if = function(ast, env) {
  assertArity((kirbystdlibref.count(ast) >= 3), ast);
  let stmtQ = stmt_QUERY(ast);
  let ret = node_QUOTE(ast);
  let a1 = exprHint(xfi(ast, ast[1]), (!stmtQ));
  let a2 = exprHint(xfi(ast, ast[2]), (!stmtQ));
  let m_QUERY = (kirbystdlibref.count(ast) > 3);
  let a3 = (m_QUERY ?
    xfi(ast, ast[3]) :
    null);
  let elze = (m_QUERY ?
    exprHint(a3, (!stmtQ)) :
    null);
  (a1 = tx_STAR(a1, env), a2 = tx_STAR(a2, env), elze = tx_STAR(elze, env));
  return wrap(ret, null, (stmtQ ?
    [
      "if (",
      a1,
      ") {\n",
      a2,
      ";\n}",
      (m_QUERY ?
        [
          " else { \n",
          elze,
          ";\n}"
        ] :
        "")
    ] :
    [
      "(",
      a1,
      " ?\n",
      a2,
      " :\n",
      (elze || "null"),
      ")"
    ]));
};
SPEC_DASH_OPS["if"] = sf_DASH_if;
//fn: [sf-get] in file: compiler.ky,line: 960
const sf_DASH_get = function(ast, env) {
  assertArity((kirbystdlibref.count(ast) === 3), ast);
  let ret = node_QUOTE(ast);
  return wrap(ret, null, [
    tx_STAR(xfi(ast, ast[1]), env),
    "[",
    tx_STAR(xfi(ast, ast[2]), env),
    "]"
  ]);
};
SPEC_DASH_OPS["nth"] = sf_DASH_get;
SPEC_DASH_OPS["get"] = sf_DASH_get;
//fn: [sf-array] in file: compiler.ky,line: 967
const sf_DASH_array = function(ast, env) {
  assertArity(true, ast);
  let pos = 0;
  let ret = node_QUOTE(ast);
  if ( (0 === kirbystdlibref.count(ast)) ) {
    ret.add("[]");
  } else {
    if ( (!vector_QUERY(ast)) ) {
      pos = 1;
    } else {
      null;
    }
    ret.add("[\n");
    for (let i = pos, sz = kirbystdlibref.count(ast), ____break = false; ((!____break) && (i < sz)); i = (i + 1)) {
      if ( (i > pos) ) {
        ret.add(",\n");
      }
      ret.add(tx_STAR(xfi(ast, ast[i]), env));
    }
    ret.add("\n]");
  }
  return ret;
};
SPEC_DASH_OPS["vec"] = sf_DASH_array;
//fn: [sf-object] in file: compiler.ky,line: 982
const sf_DASH_object = function(ast, env) {
  assertArity(true, ast);
  let pos = 0;
  let ret = node_QUOTE(ast);
  if ( (0 === kirbystdlibref.count(ast)) ) {
    ret.add("{}");
  } else {
    if ( (!map_QUERY(ast)) ) {
      pos = 1;
    } else {
      null;
    }
    ret.add("{\n");
    for (let i = pos, sz = kirbystdlibref.count(ast), ____break = false; ((!____break) && (i < sz)); i = (i + 2)) {
      if ( (i > pos) ) {
        ret.add(",\n");
      }
      ret.add([
        tx_STAR(ast[i], env),
        ": ",
        tx_STAR(xfi(ast, ast[i + 1]), env)
      ]);
    }
    ret.add("\n}");
  }
  return ret;
};
SPEC_DASH_OPS["hashmap"] = sf_DASH_object;
//fn: [sf-include] in file: compiler.ky,line: 998
const sf_DASH_include = function(ast, env) {
  assertArity((kirbystdlibref.count(ast) >= 2), ast);
  let ret = [];
  let dir = path.dirname(ast.source);
  let fname,
    e;
  for (let i = 1, sz = kirbystdlibref.count(ast), ____break = false; ((!____break) && (i < sz)); i = (i + 1)) {
    e = ast[i];
    if ( ((!Array.isArray(e)) || (1 !== kirbystdlibref.count(e))) ) {
      error_BANG("invalid_DASH_include", ast);
    }
    fname = [
      e[0]
    ].join("");
    if (fname) {
      fname = fname.replace(/[\"]/g, "");
    }
    try {
      fname = fs.realpathSync([
        dir,
        "/",
        fname
      ].join(""));
    } catch (e) {
      error_BANG("file_DASH_access", ast);
    }
    try {
      conj_BANG(ret, includeFile(fname, ast));
    } catch (e) {
      error_BANG("file_DASH_read", ast);
    }
    finally {
      eng.globalEnv().popNSP();
    }
  }
  return ((0 === kirbystdlibref.count(ret)) ?
    "" :
    ret);
};
//fn: [sf-require] in file: compiler.ky,line: 1026
const sf_DASH_require = function(ast, env) {
  assertArity((kirbystdlibref.count(ast) >= 2), ast);
  let as,
    path,
    v,
    e,
    refers,
    renames;
  let ret = node_QUOTE(ast);
  for (let i = 1, sz = kirbystdlibref.count(ast), ____break = false; ((!____break) && (i < sz)); i = (i + 1)) {
    (e = ast[i], as = [
      gensym("R__")
    ].join(""), refers = null, renames = null);
    if ( ((!Array.isArray(e)) || (kirbystdlibref.count(e) < 3)) ) {
      error_BANG("invalid_DASH_require", ast);
    }
    path = [
      e[0]
    ].join("");
    for (let j = 1, sz = kirbystdlibref.count(e), ____break = false; ((!____break) && (j < sz)); j = (j + 1)) {
      v = e[j];
      if ( (v == "as") ) {
        as = [
          e[j + 1]
        ].join("");
        ++j;
      } else {
        if ( (v == "refer") ) {
          refers = e[j + 1];
          ++j;
        } else {
          if ( (v == "rename") ) {
            renames = e[j + 1];
            ++j;
          } else {
            null;
          }
        }
      }
    }
    ret.add([
      "const ",
      parser.jsid(as),
      "= require(",
      tx_STAR(path, env),
      ");\n"
    ]);
    for (let i = 0, sz = kirbystdlibref.count(refers), ____break = false; ((!____break) && (i < sz)); i = (i + 1)) {
      v = tx_STAR(refers[i], env);
      ret.add([
        "const ",
        v,
        "=",
        as,
        "[\"",
        v,
        "\"];\n"
      ]);
    }
    for (let i = 0, sz = kirbystdlibref.count(renames), ____break = false; ((!____break) && (i < sz)); i = (i + 2)) {
      (e = tx_STAR(renames[i], env), v = tx_STAR(renames[i + 1], env));
      ret.add([
        "const ",
        v,
        "=",
        as,
        "[\"",
        e,
        "\"];\n"
      ]);
    }
  }
  return ret;
};
//fn: [sf-ns] in file: compiler.ky,line: 1064
const sf_DASH_ns = function(ast, env) {
  assertArity((kirbystdlibref.count(ast) >= 2), ast);
  let ret = [];
  let e = null;
  let GS__25 = meta_QUERY__QUERY(ast[1], env);
  let hints = GS__25[0];
  let nsp = GS__25[1];
  if ( (!symbol_QUERY(nsp)) ) {
    error_BANG("invalid_DASH_namespace", ast);
  } else {
    null;
  }
  eng.globalEnv().pushNSP([
    nsp
  ].join(""));
  ast = xfi(ast, Array.prototype.slice.call(ast, 2));
  for (let i = 0, sz = kirbystdlibref.count(ast), ____break = false; ((!____break) && (i < sz)); i = (i + 1)) {
    e = ast[i];
    if ( (pairs_QUERY(e) && ("include" == [
        e[0]
      ].join(""))) ) {
      conj_BANG(ret, sf_DASH_include(xfi(ast, e)));
    } else {
      if ( (pairs_QUERY(e) && ("require" == [
          e[0]
        ].join(""))) ) {
        conj_BANG(ret, sf_DASH_require(xfi(ast, e)));
      } else {
        null;
      }
    }
  }
  nsp = eng.globalEnv().peekNSP();
  if ( ((nsp === "czlab.kirby.macros") || (nsp === "czlab.kirby.stdlib")) ) {
    null;
  } else {
    if (nsp.startsWith("czlab.kirby.")) {
      conj_BANG(ret, "const kirbystdlibref=std;\n");
    } else {
      if (true) {
        conj_BANG(ret, sf_DASH_require(xfi(ast, [kirbystdlibref.symbol("require"), ["kirby", kirbystdlibref.keyword(":as"), kirbystdlibref.symbol("kirbystdlibref")]])));
      }
    }
  }
  return ret;
};
SPEC_DASH_OPS["ns"] = sf_DASH_ns;
//fn: [sf-comment] in file: compiler.ky,line: 1095
const sf_DASH_comment = function(ast, env) {
  return "";
};
SPEC_DASH_OPS["comment"] = sf_DASH_comment;
//fn: [sf-for] in file: compiler.ky,line: 1098
const sf_DASH_for = function(ast, env) {
  assertArity((kirbystdlibref.count(ast) >= 2), ast);
  let stmtQ = stmt_QUERY(ast);
  let ret = node_QUOTE(ast);
  let body = exprHint(xfi(ast, Array.prototype.slice.call(ast, 2)), false);
  if ( (0 === kirbystdlibref.count(body)) ) {
    node_QUOTE(ast);
  } else {
    sf_DASH_floop(ret, xfi(ast, ast[1]), body, env, stmtQ);
  }
  return ret;
};
SPEC_DASH_OPS["for"] = sf_DASH_for;
//fn: [sf-floop] in file: compiler.ky,line: 1110
const sf_DASH_floop = function(ret, args, body, env, stmtQ) {
  let vars = [];
  let recurs = [];
  let tst,
    nb,
    e;
  for (let i = 0, sz = kirbystdlibref.count(args), ____break = false; ((!____break) && (i < sz)); i = (i + 1)) {
    e = args[i];
    if ( (e == "while") ) {
      tst = args[i + 1];
      ++i;
    } else {
      if ( (e == "recur") ) {
        recurs = Array.prototype.slice.call(args, (i + 1));
        ____break = true;
      } else {
        if (symbol_QUERY(e)) {
          conj_BANG(vars, e, args[i + 1]);
          ++i;
        } else {
          null;
        }
      }
    }
  }
  ret.add("for (");
  for (let i = 0, sz = kirbystdlibref.count(vars), ____break = false; ((!____break) && (i < sz)); i = (i + 2)) {
    if ( (i === 0) ) {
      ret.add("let ");
    }
    if ( (i !== 0) ) {
      ret.add(",");
    }
    ret.add([
      tx_STAR(vars[i], env),
      "=",
      [
        tx_STAR(vars[i + 1], env)
      ].join("")
    ]);
  }
  ret.add(((0 === kirbystdlibref.count(vars)) ?
    "let ____break=false;" :
    ",____break=false;"));
  nb = [kirbystdlibref.symbol("not"), kirbystdlibref.symbol("____break")];
  if (tst) {
    tst = [
      kirbystdlibref.symbol("and"),
      nb,
      tst
    ];
  } else {
    tst = nb;
  }
  ret.add([
    [
      tx_STAR(tst, env)
    ].join(""),
    "; "
  ]);
  for (let i = 0, k = 0, sz = kirbystdlibref.count(recurs), ____break = false; ((!____break) && (i < sz)); i = (i + 1), k = (k + 2)) {
    if ( (i !== 0) ) {
      ret.add(",");
    }
    ret.add([
      tx_STAR(vars[k], env),
      "=",
      [
        tx_STAR(recurs[i], env)
      ].join("")
    ]);
  }
  ret.add([
    "){\n",
    txDo(body, env, false),
    "}\n"
  ]);
  if ( (!stmtQ) ) {
    wrap(ret, "(function() {\n", "}).call(this)");
  } else {
    null;
  }
  return ret;
};
//fn: [sf-jscode] in file: compiler.ky,line: 1148
const sf_DASH_jscode = function(ast, env) {
  assertArity((kirbystdlibref.count(ast) >= 2), ast);
  let s = [
    ast[1]
  ].join("");
  return node_QUOTE(ast, tnodeEx(((s.endsWith("\"") && s.startsWith("\"")) ?
    s.slice(1, -1) :
    s)));
};
SPEC_DASH_OPS["js#"] = sf_DASH_jscode;
//fn: [sf-macro] in file: compiler.ky,line: 1157
const sf_DASH_macro = function(ast, env) {
  assertArity((kirbystdlibref.count(ast) >= 2), ast);
  let pms = [];
  let args = ast[2];
  let body = Array.prototype.slice.call(ast, 3);
  let doc,
    x,
    e,
    ev;
  if ( (typeof (args) === "string") ) {
    (doc = args, args = ast[3], body = Array.prototype.slice.call(ast, 4));
  }
  for (let i = 0, sz = kirbystdlibref.count(args), ____break = false; ((!____break) && (i < sz)); i = (i + 1)) {
    (e = args[i], ev = [
      e
    ].join(""));
    if ( (ev === "&") ) {
      if (Array.isArray(args[i + 1])) {
        e = args[i + 1];
        ++i;
        for (let j = 0, sz = kirbystdlibref.count(e), ____break = false; ((!____break) && (j < sz)); j = (j + 1)) {
          x = e[j];
          if ( (!symbol_QUERY(x)) ) {
            error_BANG("syntax_DASH_error", ast);
          } else {
            null;
          }
          conj_BANG(pms, x);
        }
      } else {
        conj_BANG(pms, e, args[i + 1]);
        ++i;
      }
    } else {
      if ( (!symbol_QUERY(e)) ) {
        error_BANG("syntax_DASH_error", ast);
      } else {
        if (true) {
          conj_BANG(pms, e);
        }
      }
    }
  }
  let a2 = [
    kirbystdlibref.symbol("fn*"),
    pms
  ].concat(body);
  let func = eng.compute(a2, env);
  let a1 = [
    ast[1]
  ].join("");
  (func["____macro"] = true, func["____doc"] = doc);
  eng.setMacro(a1, func);
  return "";
};
SPEC_DASH_OPS["defmacro"] = sf_DASH_macro;
//fn: [sf-unary] in file: compiler.ky,line: 1190
const sf_DASH_unary = function(ast, env) {
  assertArity((kirbystdlibref.count(ast) === 2), ast);
  let GS__26 = ast;
  let a0 = GS__26[0];
  let a1 = GS__26[1];
  let ret = node_QUOTE(ast);
  if ( (a0 == "not") ) {
    a0 = kirbystdlibref.symbol("!");
  }
  ret.add([
    "(",
    [
      tx_STAR(a0, env)
    ].join(""),
    [
      tx_STAR(a1, env)
    ].join(""),
    ")"
  ]);
  return ret;
};
SPEC_DASH_OPS["not"] = sf_DASH_unary;
SPEC_DASH_OPS["~"] = sf_DASH_unary;
SPEC_DASH_OPS["!"] = sf_DASH_unary;
//fn: [xfi] in file: compiler.ky,line: 1198
const xfi = function(from, to) {
  return ((from && to) ?
    (function() {
      let tline = to.line;
      let fline = from.line;
      if ( ((!(typeof (tline) === "number")) && (typeof (fline) === "number")) ) {
        (to["source"] = from.source, to["line"] = from.line, to["column"] = from.column);
      }
      return to;
    }).call(this) :
    (true ?
      to :
      null));
};
//fn: [spitExterns] in file: compiler.ky,line: 1212
const spitExterns = function() {
  let s = "";
  let ks = Object.keys(_STAR_externs_STAR);
  if (not_DASH_empty(ks)) {
    (s = ks.map(function() {
      let ____args = Array.prototype.slice.call(arguments);
      return [
        ____args[0],
        ": ",
        ____args[0]
      ].join("");
    }).join(",\n"), s = [
      "\n\nmodule.exports = {\n",
      s,
      "\n};\n\n"
    ].join(""));
  }
  return s;
};
//fn: [banner] in file: compiler.ky,line: 1219
const banner = function() {
  return [
    "/*",
    "Auto generated by Kirby - v",
    MODULE_DASH_VERSION,
    " ",
    eng.globalEnv().firstNSP(),
    " - ",
    new Date(),
    "*/\n\n"
  ].join("");
};
//fn: [cleanCode] in file: compiler.ky,line: 1225
const cleanCode = function(code) {
  let tmp = null;
  let arr = [];
  let GS__27 = code.split("\n");
  for (let GS__29 = 0, GS__28 = false, ____break = false; ((!____break) && ((!GS__28) && (GS__29 < GS__27.length))); GS__29 = (GS__29 + 1)) {
    let s = GS__27[GS__29];
    let tmp = s.trim();
    if ( (!true) ) {
      GS__28 = true;
    } else {
      null;
    }
    if ( ((!GS__28) && true) ) {
      if ( (not_DASH_empty(tmp) && (tmp !== ";")) ) {
        conj_BANG(arr, s);
      }
    }
  }
  null;
  return arr.join("\n");
};
//fn: [transpile*] in file: compiler.ky,line: 1234
const transpile_STAR = function(source, fname, options) {
  eng.globalEnv().resetNSPCache();
  _STAR_externs_STAR = {};
  let ret = txTree(parser.parse(source, fname), eng.globalEnv());
  let GS__30 = options;
  let source_DASH_map = GS__30["source-map"];
  let format = GS__30["format"];
  let fbase = path.basename(fname, ".ky");
  let extra = spitExterns();
  let fopts = {};
  let cstr = (source_DASH_map ?
    (function() {
      let fmap = [
        fbase,
        ".js"
      ].join("");
      let smap = [
        fbase,
        ".map"
      ].join("");
      let sout = ret.toStringWithSourceMap({
        "skipValidation": true,
        "file": fmap
      });
      fs.writeFileSync(smap, sout.map);
      return [
        sout.code,
        extra,
        "\n//# sourceMappingURL=",
        path.relative(path.dirname(fname), smap)
      ].join("");
    }).call(this) :
    [
      ret,
      extra
    ].join(""));
  if (format) {
    cstr = esfmt.format(cstr, fopts);
  }
  cstr = cleanCode(cstr);
  return ((0 === kirbystdlibref.count(cstr)) ?
    "" :
    [
      banner(),
      cstr
    ].join(""));
};
//fn: [transpile] in file: compiler.ky,line: 1262
const transpile = function(code, file) {
  let GS__31 = Array.prototype.slice.call(arguments, 2);
  let options = GS__31[0];
  return (function() {
    try {
      return transpile_STAR(code, file, opt_QUERY__QUERY(options, {}));
    } catch (e) {
      if (console) {
        console.log([
          e.stack
        ].join(""));
      }
      return (function() {
        throw e;
      }).call(this);
    }
  }).call(this);
};
//fn: [dbgAST] in file: compiler.ky,line: 1269
const dbgAST = function(source, fname) {
  return parser.dumpTree(parser.parse(source, fname));
};
const version = MODULE_DASH_VERSION;
module.exports = {
  tnodeEx: tnodeEx,
  tnode: tnode,
  transpile: transpile,
  dbgAST: dbgAST,
  version: version
};