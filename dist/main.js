// Generated by LispyScript v1.5.0
var _STARreadline_STAR = require("readline"),
  _STARkirby_STAR = require("kirby"),
  _STARprocess_STAR = process,
  prefix = "kirby> ";
function runrepl() {
  let cli = _STARreadline_STAR.createInterface((_STARprocess_STAR)["stdin"],(_STARprocess_STAR)["stdout"]);
  cli.on("line",function (line) {
    (function() {
    try {
      let l = _STARkirby_STAR.transpile(line);
      return console.log(this.eval(l));

    } catch (err) {
return     (function() {
    return console.log(err);
    })();
    }
    })();
    cli.setPrompt(prefix,(prefix)["length"]);
    return cli.prompt();
  });
  cli.on("close",function () {
    console.log("Bye!");
    return _STARprocess_STAR.exit(0);
  });
  console.log([prefix,"Kirby REPL v1.0.0"].join(""));
  cli.setPrompt(prefix,(prefix)["length"]);
  return cli.prompt();
}
var _STARgopt_STAR = require("node-getopt"),
  _STARwatcher_STAR = require("watch"),
  _STARpath_STAR = require("path"),
  _STARfs_STAR = require("fs"),
  _STARprocess_STAR = process,
  error = function (e) {
    console.error([e].join(""));
    return _STARprocess_STAR.exit(1);
  },
  validFlag_QUERY = new RegExp("-h\\b|-r\\b|-v\\b|-b\\b|-s\\b|-t\\b");
var opt = _STARgopt_STAR.create([
  [
    "h",
    "help",
    "display this help"
  ],
  [
    "v",
    "version",
    "show version"
  ],
  [
    "r",
    "run",
    "run .kirby files"
  ],
  [
    "w",
    "watch",
    "auto-compile changed files"
  ],
  [
    "b",
    "browser-bundle",
    "bundle for browser"
  ],
  [
    "m",
    "map",
    "generate source maps"
  ],
  [
    "t",
    "tree",
    "show AST"
  ],
  [
    "i",
    "include-dir=ARG+",
    "add directory to include search path"
  ]
]).setHelp(["kirby [OPTION] [<infile>] [<outfile>]\n\n","<outfile> default to <infile> with \".js\" extension\n\n","Also compile stdin to stdout\n","eg. $ echo '(console.log \"hello\")' | kirby\n\n","[[OPTIONS]]\n\n"].join("")).bindHelp().parseSystem();
function handleNoArgs() {
  let pout = (_STARprocess_STAR)["stdout"],
    source = "",
    pin = (_STARprocess_STAR)["stdin"];
  pin.resume();
  pin.setEncoding("utf8");
  pin.on("data",function (chunk) {
    return source += chunk.toString();
  });
  pin.on("end",function () {
    return (function() {
    try {
      return pout.write(_STARkirby_STAR.transpile(source,_STARprocess_STAR.cwd()));

    } catch (e) {
return     (function() {
    return error(e);
    })();
    }
    })();
  });
  pout.on("error",error);
  pin.on("error",error);
  return setTimeout(function () {
    return ((0 === (pin)["bytesRead"]) ?
            (function() {
      pin.removeAllListeners("data");
      return runrepl();
      })() :
      undefined);
  },20);
}
function compileFiles() {
  let fin = (opt.argv[0] ?
      opt.argv[0] :
      error("No Input file")),
    fout = opt.argv[1];
  ((!fout) ?
        (function() {
    fout = fin.replace(new RegExp("\\.kirby$"),".js");
    return ((fout === fin) ?
      error("Input file must have extension \".kirby\"") :
      undefined);
    })() :
    undefined);
  return (function() {
  try {
    let wantMap_QUERY = opt.options["map"],
      dbgAST_QUERY = opt.options["tree"],
      source = null,
      dirs = opt.options["include-dir"];
    ((!dbgAST_QUERY) ?
      console.log(["kirby v1.0.0",": compiling: ",fin," -> ",fout].join("")) :
      undefined);
    source = _STARfs_STAR.readFileSync(fin,"utf8");
    return (dbgAST_QUERY ?
      _STARkirby_STAR.dbgAST(source,fin,dirs) :
      _STARfs_STAR.writeFileSync(fout,(wantMap_QUERY ?
        _STARkirby_STAR.transpileWithSrcMap(source,fin,dirs) :
        _STARkirby_STAR.transpile(source,fin,dirs)),"utf8"));

  } catch (e) {
return   (function() {
  return error(e);
  })();
  }
  })();
}
function _main() {
  return (((opt.argv ?
      (0 === (opt.argv)["length"]) :
      false) && (Object.keys(opt.options) ?
      (0 === (Object.keys(opt.options))["length"]) :
      false)) ?
    handleNoArgs() :
    (opt.options["version"] ?
      console.log(["Version: ",MODULE_VERSION].join("")) :
      (opt.options["browser-bundle"] ?
                (function() {
        let bundle = require.resolve("kirby/lib/browser-bundle.js");
        return _STARfs_STAR.createReadStream(bundle).pipe()(_STARfs_STAR.createWriteStream("browser-bundle.js"));
        })() :
        (opt.options["run"] ?
                    (function() {
          let a1 = opt.argv[0],
            infile = a1;
          ((!a1) ?
            error("No input file") :
            undefined);
          ((!(a1.endsWith(".kirby") || a1.endsWith(".js"))) ?
            error("Input file must end with \".kirby\" or \".js\"") :
            undefined);
          return require(infile);
          })() :
          (opt.options["watch"] ?
                        (function() {
            let cwd = (_STARprocess_STAR)["cwd"];
            console.log("Watching",cwd,"for file changes...");
            return _STARwatcher_STAR.watchTree(cwd,{
              filter: function (f,stat) {
                return ((stat)["isDirectory"] || (f.indexOf(".kirby") !== -1));
              },
              ignoreDotFiles: true,
              ignoreDirectoryPattern: new RegExp("node_modules")
            },function (f,curr,prev) {
              return ((curr && (curr.nlink !== 0)) ?
                require("child_process").spawn("kirby",[
                  f.substring(((cwd)["length"] + 1))
                ],{
                  stdio: "inherit"
                }) :
                (((Object.prototype.toString.call(f) === "[object Object]") && (Object.prototype.toString.call(prev) === "[object Null]") && (Object.prototype.toString.call(curr) === "[object Null]")) ?
                  each_key(function (stat,initialf) {
                    return ((!(initialf === cwd)) ?
                                            (function() {
                      return require("child_process").spawn("kirby",[
                        initialf.substring(((cwd)["length"] + 1))
                      ],{
                        stdio: "inherit"
                      });
                      })() :
                      undefined);
                  },f) :
                  undefined));
            });
            })() :
            (true ?
              compileFiles() :
              undefined))))));
}
_main();
