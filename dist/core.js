// Generated by LispyScript v1.5.0
function some_QUERY(obj) {
  return (!((typeof(obj) === "undefined") || (Object.prototype.toString.call(obj) === "[object Null]")));
}
function zero_QUERY(obj) {
  return ((typeof(obj) === "number") ?
    (0 == obj) :
    false);
}
function make_array(len,obj) {
  return   (function() {
  let ret = [];
  return   (function() {
  for (var i = 0; (i < len); i = (i + 1)) {
        (function() {
    return ret.push(obj);
    })();
  }
;
  return ret;
  })();
  })();
}
function each_key(func,obj) {
  return function (k) {
    return func(obj[k],k,obj);
  }.forEach(Object.keys(obj));
}
function last(coll) {
  return coll[((coll)["length"] - 1)];
}
function nth(coll,pos) {
  return coll[pos];
}
function pos_QUERY(arg) {
  return ((typeof(arg) === "number") && (arg > 0));
}
function neg_QUERY(arg) {
  return ((typeof(arg) === "number") && (arg < 0));
}
function constantly(x) {
  return function () {
    return x;
  };
}
function identity(x) {
  return x;
}
function repeat(n,expr) {
  return [];
}
function conj_BANG(c,a) {
  c.push(a);
  return c;
}
function conj_BANG_BANG(c,a) {
  (a ?
    c.push(a) :
    undefined);
  return c;
}
function not_empty(x) {
  return ((x && ((x)["length"] > 0)) ?
    x :
    null);
}
function empty_QUERY(x) {
  return (x ?
    (0 == (x)["length"]) :
    false);
}
function seq(x) {
  return ((typeof(x) === "string") ?
    Array.from(x) :
    ((Object.prototype.toString.call(x) === "[object Array]") ?
      x :
      ((Object.prototype.toString.call(x) === "[object Object]") ?
        Object.entries(x) :
        (true ?
          [] :
          undefined))));
}
